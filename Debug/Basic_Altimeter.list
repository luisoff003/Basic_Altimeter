
Basic_Altimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800df18  0800df18  0001df18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e39c  0800e39c  00020348  2**0
                  CONTENTS
  4 .ARM          00000008  0800e39c  0800e39c  0001e39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3a4  0800e3a4  00020348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3a4  0800e3a4  0001e3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3a8  0800e3a8  0001e3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  0800e3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d4c  20000348  0800e6f4  00020348  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002094  0800e6f4  00022094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016373  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b47  00000000  00000000  000366eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1f6  00000000  00000000  0003c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bfe  00000000  00000000  0005777e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f34a  00000000  00000000  0007037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff6c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e48  00000000  00000000  000ff718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000348 	.word	0x20000348
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800df00 	.word	0x0800df00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000034c 	.word	0x2000034c
 80001dc:	0800df00 	.word	0x0800df00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <SELECT+0x18>)
 8001006:	f001 fbe9 	bl	80027dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f001 f92c 	bl	8002268 <HAL_Delay>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020400 	.word	0x40020400

08001018 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2101      	movs	r1, #1
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <DESELECT+0x18>)
 8001022:	f001 fbdb 	bl	80027dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f001 f91e 	bl	8002268 <HAL_Delay>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020400 	.word	0x40020400

08001034 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800103e:	bf00      	nop
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <SPI_TxByte+0x30>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b02      	cmp	r3, #2
 800104c:	d1f8      	bne.n	8001040 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800104e:	1df9      	adds	r1, r7, #7
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	2201      	movs	r2, #1
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <SPI_TxByte+0x30>)
 8001056:	f004 fae4 	bl	8005622 <HAL_SPI_Transmit>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200003c0 	.word	0x200003c0

08001068 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001074:	bf00      	nop
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <SPI_TxBuffer+0x30>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b02      	cmp	r3, #2
 8001082:	d1f8      	bne.n	8001076 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001084:	887a      	ldrh	r2, [r7, #2]
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <SPI_TxBuffer+0x30>)
 800108c:	f004 fac9 	bl	8005622 <HAL_SPI_Transmit>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200003c0 	.word	0x200003c0

0800109c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010a2:	23ff      	movs	r3, #255	; 0xff
 80010a4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010a6:	bf00      	nop
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <SPI_RxByte+0x34>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d1f8      	bne.n	80010a8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010b6:	1dba      	adds	r2, r7, #6
 80010b8:	1df9      	adds	r1, r7, #7
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <SPI_RxByte+0x34>)
 80010c2:	f004 fbea 	bl	800589a <HAL_SPI_TransmitReceive>

	return data;
 80010c6:	79bb      	ldrb	r3, [r7, #6]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200003c0 	.word	0x200003c0

080010d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010dc:	f7ff ffde 	bl	800109c <SPI_RxByte>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <SD_ReadyWait+0x30>)
 80010f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010fc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80010fe:	f7ff ffcd 	bl	800109c <SPI_RxByte>
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2bff      	cmp	r3, #255	; 0xff
 800110a:	d004      	beq.n	8001116 <SD_ReadyWait+0x26>
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SD_ReadyWait+0x30>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f3      	bne.n	80010fe <SD_ReadyWait+0xe>

	return res;
 8001116:	79fb      	ldrb	r3, [r7, #7]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000366 	.word	0x20000366

08001124 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800112a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800112e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001130:	f7ff ff72 	bl	8001018 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	e005      	b.n	8001146 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800113a:	20ff      	movs	r0, #255	; 0xff
 800113c:	f7ff ff7a 	bl	8001034 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3301      	adds	r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b09      	cmp	r3, #9
 800114a:	ddf6      	ble.n	800113a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800114c:	f7ff ff56 	bl	8000ffc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001164:	2395      	movs	r3, #149	; 0x95
 8001166:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001168:	463b      	mov	r3, r7
 800116a:	2106      	movs	r1, #6
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7b 	bl	8001068 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001172:	e002      	b.n	800117a <SD_PowerOn+0x56>
	{
		cnt--;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3b01      	subs	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800117a:	f7ff ff8f 	bl	800109c <SPI_RxByte>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d002      	beq.n	800118a <SD_PowerOn+0x66>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f4      	bne.n	8001174 <SD_PowerOn+0x50>
	}

	DESELECT();
 800118a:	f7ff ff45 	bl	8001018 <DESELECT>
	SPI_TxByte(0XFF);
 800118e:	20ff      	movs	r0, #255	; 0xff
 8001190:	f7ff ff50 	bl	8001034 <SPI_TxByte>

	PowerFlag = 1;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <SD_PowerOn+0x80>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000369 	.word	0x20000369

080011a8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <SD_PowerOff+0x14>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000369 	.word	0x20000369

080011c0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <SD_CheckPower+0x14>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000369 	.word	0x20000369

080011d8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <SD_RxDataBlock+0x5c>)
 80011e4:	22c8      	movs	r2, #200	; 0xc8
 80011e6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011e8:	f7ff ff58 	bl	800109c <SPI_RxByte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2bff      	cmp	r3, #255	; 0xff
 80011f4:	d104      	bne.n	8001200 <SD_RxDataBlock+0x28>
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <SD_RxDataBlock+0x5c>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f3      	bne.n	80011e8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2bfe      	cmp	r3, #254	; 0xfe
 8001204:	d001      	beq.n	800120a <SD_RxDataBlock+0x32>
 8001206:	2300      	movs	r3, #0
 8001208:	e00f      	b.n	800122a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5f 	bl	80010d4 <SPI_RxBytePtr>
	} while(len--);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	603a      	str	r2, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f4      	bne.n	800120a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001220:	f7ff ff3c 	bl	800109c <SPI_RxByte>
	SPI_RxByte();
 8001224:	f7ff ff3a 	bl	800109c <SPI_RxByte>

	return TRUE;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000364 	.word	0x20000364

08001238 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001248:	f7ff ff52 	bl	80010f0 <SD_ReadyWait>
 800124c:	4603      	mov	r3, r0
 800124e:	2bff      	cmp	r3, #255	; 0xff
 8001250:	d001      	beq.n	8001256 <SD_TxDataBlock+0x1e>
 8001252:	2300      	movs	r3, #0
 8001254:	e02f      	b.n	80012b6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff feeb 	bl	8001034 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	2bfd      	cmp	r3, #253	; 0xfd
 8001262:	d020      	beq.n	80012a6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fefd 	bl	8001068 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800126e:	f7ff ff15 	bl	800109c <SPI_RxByte>
		SPI_RxByte();
 8001272:	f7ff ff13 	bl	800109c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001276:	e00b      	b.n	8001290 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001278:	f7ff ff10 	bl	800109c <SPI_RxByte>
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	2b05      	cmp	r3, #5
 8001288:	d006      	beq.n	8001298 <SD_TxDataBlock+0x60>
			i++;
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	3301      	adds	r3, #1
 800128e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001290:	7bbb      	ldrb	r3, [r7, #14]
 8001292:	2b40      	cmp	r3, #64	; 0x40
 8001294:	d9f0      	bls.n	8001278 <SD_TxDataBlock+0x40>
 8001296:	e000      	b.n	800129a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001298:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800129a:	bf00      	nop
 800129c:	f7ff fefe 	bl	800109c <SPI_RxByte>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0fa      	beq.n	800129c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d101      	bne.n	80012b4 <SD_TxDataBlock+0x7c>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	6039      	str	r1, [r7, #0]
 80012c8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012ca:	f7ff ff11 	bl	80010f0 <SD_ReadyWait>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2bff      	cmp	r3, #255	; 0xff
 80012d2:	d001      	beq.n	80012d8 <SD_SendCmd+0x1a>
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	e042      	b.n	800135e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff feaa 	bl	8001034 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	0e1b      	lsrs	r3, r3, #24
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fea4 	bl	8001034 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe9e 	bl	8001034 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fe98 	bl	8001034 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fe93 	bl	8001034 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b40      	cmp	r3, #64	; 0x40
 8001312:	d102      	bne.n	800131a <SD_SendCmd+0x5c>
 8001314:	2395      	movs	r3, #149	; 0x95
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e007      	b.n	800132a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b48      	cmp	r3, #72	; 0x48
 800131e:	d102      	bne.n	8001326 <SD_SendCmd+0x68>
 8001320:	2387      	movs	r3, #135	; 0x87
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e001      	b.n	800132a <SD_SendCmd+0x6c>
	else crc = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe81 	bl	8001034 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b4c      	cmp	r3, #76	; 0x4c
 8001336:	d101      	bne.n	800133c <SD_SendCmd+0x7e>
 8001338:	f7ff feb0 	bl	800109c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800133c:	230a      	movs	r3, #10
 800133e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001340:	f7ff feac 	bl	800109c <SPI_RxByte>
 8001344:	4603      	mov	r3, r0
 8001346:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001348:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800134c:	2b00      	cmp	r3, #0
 800134e:	da05      	bge.n	800135c <SD_SendCmd+0x9e>
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	3b01      	subs	r3, #1
 8001354:	73bb      	strb	r3, [r7, #14]
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f1      	bne.n	8001340 <SD_SendCmd+0x82>

	return res;
 800135c:	7b7b      	ldrb	r3, [r7, #13]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SD_disk_initialize+0x14>
 8001378:	2301      	movs	r3, #1
 800137a:	e0d6      	b.n	800152a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800137c:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <SD_disk_initialize+0x1cc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <SD_disk_initialize+0x2a>
 800138a:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <SD_disk_initialize+0x1cc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	e0cb      	b.n	800152a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001392:	f7ff fec7 	bl	8001124 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001396:	f7ff fe31 	bl	8000ffc <SELECT>

	/* check disk type */
	type = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800139e:	2100      	movs	r1, #0
 80013a0:	2040      	movs	r0, #64	; 0x40
 80013a2:	f7ff ff8c 	bl	80012be <SD_SendCmd>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	f040 80a6 	bne.w	80014fa <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <SD_disk_initialize+0x1d0>)
 80013b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013ba:	2048      	movs	r0, #72	; 0x48
 80013bc:	f7ff ff7f 	bl	80012be <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d158      	bne.n	8001478 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e00c      	b.n	80013e6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013cc:	7bfc      	ldrb	r4, [r7, #15]
 80013ce:	f7ff fe65 	bl	800109c <SPI_RxByte>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	f104 0310 	add.w	r3, r4, #16
 80013da:	443b      	add	r3, r7
 80013dc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d9ef      	bls.n	80013cc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013ec:	7abb      	ldrb	r3, [r7, #10]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	f040 8083 	bne.w	80014fa <SD_disk_initialize+0x192>
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	2baa      	cmp	r3, #170	; 0xaa
 80013f8:	d17f      	bne.n	80014fa <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013fa:	2100      	movs	r1, #0
 80013fc:	2077      	movs	r0, #119	; 0x77
 80013fe:	f7ff ff5e 	bl	80012be <SD_SendCmd>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d807      	bhi.n	8001418 <SD_disk_initialize+0xb0>
 8001408:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800140c:	2069      	movs	r0, #105	; 0x69
 800140e:	f7ff ff56 	bl	80012be <SD_SendCmd>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001418:	4b47      	ldr	r3, [pc, #284]	; (8001538 <SD_disk_initialize+0x1d0>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1eb      	bne.n	80013fa <SD_disk_initialize+0x92>
 8001422:	e000      	b.n	8001426 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001424:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <SD_disk_initialize+0x1d0>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d064      	beq.n	80014fa <SD_disk_initialize+0x192>
 8001430:	2100      	movs	r1, #0
 8001432:	207a      	movs	r0, #122	; 0x7a
 8001434:	f7ff ff43 	bl	80012be <SD_SendCmd>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d15d      	bne.n	80014fa <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e00c      	b.n	800145e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001444:	7bfc      	ldrb	r4, [r7, #15]
 8001446:	f7ff fe29 	bl	800109c <SPI_RxByte>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	f104 0310 	add.w	r3, r4, #16
 8001452:	443b      	add	r3, r7
 8001454:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3301      	adds	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d9ef      	bls.n	8001444 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001464:	7a3b      	ldrb	r3, [r7, #8]
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_initialize+0x10a>
 800146e:	230c      	movs	r3, #12
 8001470:	e000      	b.n	8001474 <SD_disk_initialize+0x10c>
 8001472:	2304      	movs	r3, #4
 8001474:	73bb      	strb	r3, [r7, #14]
 8001476:	e040      	b.n	80014fa <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001478:	2100      	movs	r1, #0
 800147a:	2077      	movs	r0, #119	; 0x77
 800147c:	f7ff ff1f 	bl	80012be <SD_SendCmd>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d808      	bhi.n	8001498 <SD_disk_initialize+0x130>
 8001486:	2100      	movs	r1, #0
 8001488:	2069      	movs	r0, #105	; 0x69
 800148a:	f7ff ff18 	bl	80012be <SD_SendCmd>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d801      	bhi.n	8001498 <SD_disk_initialize+0x130>
 8001494:	2302      	movs	r3, #2
 8001496:	e000      	b.n	800149a <SD_disk_initialize+0x132>
 8001498:	2301      	movs	r3, #1
 800149a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d10e      	bne.n	80014c0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014a2:	2100      	movs	r1, #0
 80014a4:	2077      	movs	r0, #119	; 0x77
 80014a6:	f7ff ff0a 	bl	80012be <SD_SendCmd>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d80e      	bhi.n	80014ce <SD_disk_initialize+0x166>
 80014b0:	2100      	movs	r1, #0
 80014b2:	2069      	movs	r0, #105	; 0x69
 80014b4:	f7ff ff03 	bl	80012be <SD_SendCmd>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <SD_disk_initialize+0x166>
 80014be:	e00d      	b.n	80014dc <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014c0:	2100      	movs	r1, #0
 80014c2:	2041      	movs	r0, #65	; 0x41
 80014c4:	f7ff fefb 	bl	80012be <SD_SendCmd>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <SD_disk_initialize+0x1d0>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e1      	bne.n	800149c <SD_disk_initialize+0x134>
 80014d8:	e000      	b.n	80014dc <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014da:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <SD_disk_initialize+0x1d0>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <SD_disk_initialize+0x18e>
 80014e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ea:	2050      	movs	r0, #80	; 0x50
 80014ec:	f7ff fee7 	bl	80012be <SD_SendCmd>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SD_disk_initialize+0x192>
 80014f6:	2300      	movs	r3, #0
 80014f8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <SD_disk_initialize+0x1d4>)
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001500:	f7ff fd8a 	bl	8001018 <DESELECT>
	SPI_RxByte();
 8001504:	f7ff fdca 	bl	800109c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <SD_disk_initialize+0x1cc>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <SD_disk_initialize+0x1cc>)
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e001      	b.n	8001524 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001520:	f7ff fe42 	bl	80011a8 <SD_PowerOff>
	}

	return Stat;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <SD_disk_initialize+0x1cc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000
 8001538:	20000364 	.word	0x20000364
 800153c:	20000368 	.word	0x20000368

08001540 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SD_disk_status+0x14>
 8001550:	2301      	movs	r3, #1
 8001552:	e002      	b.n	800155a <SD_disk_status+0x1a>
	return Stat;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SD_disk_status+0x28>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_read+0x1c>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SD_disk_read+0x20>
 8001588:	2304      	movs	r3, #4
 800158a:	e051      	b.n	8001630 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <SD_disk_read+0xcc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SD_disk_read+0x32>
 800159a:	2303      	movs	r3, #3
 800159c:	e048      	b.n	8001630 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <SD_disk_read+0xd0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <SD_disk_read+0x44>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	607b      	str	r3, [r7, #4]

	SELECT();
 80015b0:	f7ff fd24 	bl	8000ffc <SELECT>

	if (count == 1)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d111      	bne.n	80015de <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2051      	movs	r0, #81	; 0x51
 80015be:	f7ff fe7e 	bl	80012be <SD_SendCmd>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d129      	bne.n	800161c <SD_disk_read+0xb0>
 80015c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff fe03 	bl	80011d8 <SD_RxDataBlock>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <SD_disk_read+0xb0>
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	e01e      	b.n	800161c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2052      	movs	r0, #82	; 0x52
 80015e2:	f7ff fe6c 	bl	80012be <SD_SendCmd>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d117      	bne.n	800161c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f7ff fdf1 	bl	80011d8 <SD_RxDataBlock>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <SD_disk_read+0xa6>
				buff += 512;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001602:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ed      	bne.n	80015ec <SD_disk_read+0x80>
 8001610:	e000      	b.n	8001614 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001612:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	204c      	movs	r0, #76	; 0x4c
 8001618:	f7ff fe51 	bl	80012be <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800161c:	f7ff fcfc 	bl	8001018 <DESELECT>
	SPI_RxByte();
 8001620:	f7ff fd3c 	bl	800109c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000368 	.word	0x20000368

08001640 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <SD_disk_write+0x1c>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <SD_disk_write+0x20>
 800165c:	2304      	movs	r3, #4
 800165e:	e06b      	b.n	8001738 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <SD_disk_write+0x100>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SD_disk_write+0x32>
 800166e:	2303      	movs	r3, #3
 8001670:	e062      	b.n	8001738 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <SD_disk_write+0x100>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SD_disk_write+0x44>
 8001680:	2302      	movs	r3, #2
 8001682:	e059      	b.n	8001738 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <SD_disk_write+0x104>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <SD_disk_write+0x56>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	607b      	str	r3, [r7, #4]

	SELECT();
 8001696:	f7ff fcb1 	bl	8000ffc <SELECT>

	if (count == 1)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d110      	bne.n	80016c2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	2058      	movs	r0, #88	; 0x58
 80016a4:	f7ff fe0b 	bl	80012be <SD_SendCmd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13a      	bne.n	8001724 <SD_disk_write+0xe4>
 80016ae:	21fe      	movs	r1, #254	; 0xfe
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f7ff fdc1 	bl	8001238 <SD_TxDataBlock>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d033      	beq.n	8001724 <SD_disk_write+0xe4>
			count = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	e030      	b.n	8001724 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <SD_disk_write+0x104>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2077      	movs	r0, #119	; 0x77
 80016d2:	f7ff fdf4 	bl	80012be <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	2057      	movs	r0, #87	; 0x57
 80016da:	f7ff fdf0 	bl	80012be <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2059      	movs	r0, #89	; 0x59
 80016e2:	f7ff fdec 	bl	80012be <SD_SendCmd>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016ec:	21fc      	movs	r1, #252	; 0xfc
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fda2 	bl	8001238 <SD_TxDataBlock>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <SD_disk_write+0xd0>
				buff += 512;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001700:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <SD_disk_write+0xac>
 800170e:	e000      	b.n	8001712 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001710:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001712:	21fd      	movs	r1, #253	; 0xfd
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fd8f 	bl	8001238 <SD_TxDataBlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <SD_disk_write+0xe4>
			{
				count = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001724:	f7ff fc78 	bl	8001018 <DESELECT>
	SPI_RxByte();
 8001728:	f7ff fcb8 	bl	800109c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000368 	.word	0x20000368

08001748 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	; 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	603a      	str	r2, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	460b      	mov	r3, r1
 8001756:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SD_disk_ioctl+0x1e>
 8001762:	2304      	movs	r3, #4
 8001764:	e115      	b.n	8001992 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d124      	bne.n	80017bc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d012      	beq.n	80017a0 <SD_disk_ioctl+0x58>
 800177a:	2b02      	cmp	r3, #2
 800177c:	dc1a      	bgt.n	80017b4 <SD_disk_ioctl+0x6c>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <SD_disk_ioctl+0x40>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d006      	beq.n	8001794 <SD_disk_ioctl+0x4c>
 8001786:	e015      	b.n	80017b4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001788:	f7ff fd0e 	bl	80011a8 <SD_PowerOff>
			res = RES_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001792:	e0fc      	b.n	800198e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001794:	f7ff fcc6 	bl	8001124 <SD_PowerOn>
			res = RES_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800179e:	e0f6      	b.n	800198e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	1c5c      	adds	r4, r3, #1
 80017a4:	f7ff fd0c 	bl	80011c0 <SD_CheckPower>
 80017a8:	4603      	mov	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017b2:	e0ec      	b.n	800198e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017b4:	2304      	movs	r3, #4
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017ba:	e0e8      	b.n	800198e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017bc:	4b77      	ldr	r3, [pc, #476]	; (800199c <SD_disk_ioctl+0x254>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SD_disk_ioctl+0x86>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0e1      	b.n	8001992 <SD_disk_ioctl+0x24a>

		SELECT();
 80017ce:	f7ff fc15 	bl	8000ffc <SELECT>

		switch (ctrl)
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	2b0d      	cmp	r3, #13
 80017d6:	f200 80cb 	bhi.w	8001970 <SD_disk_ioctl+0x228>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <SD_disk_ioctl+0x98>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080018db 	.word	0x080018db
 80017e4:	08001819 	.word	0x08001819
 80017e8:	080018cb 	.word	0x080018cb
 80017ec:	08001971 	.word	0x08001971
 80017f0:	08001971 	.word	0x08001971
 80017f4:	08001971 	.word	0x08001971
 80017f8:	08001971 	.word	0x08001971
 80017fc:	08001971 	.word	0x08001971
 8001800:	08001971 	.word	0x08001971
 8001804:	08001971 	.word	0x08001971
 8001808:	08001971 	.word	0x08001971
 800180c:	080018ed 	.word	0x080018ed
 8001810:	08001911 	.word	0x08001911
 8001814:	08001935 	.word	0x08001935
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001818:	2100      	movs	r1, #0
 800181a:	2049      	movs	r0, #73	; 0x49
 800181c:	f7ff fd4f 	bl	80012be <SD_SendCmd>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 80a8 	bne.w	8001978 <SD_disk_ioctl+0x230>
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2110      	movs	r1, #16
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fcd2 	bl	80011d8 <SD_RxDataBlock>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 809e 	beq.w	8001978 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800183c:	7b3b      	ldrb	r3, [r7, #12]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10e      	bne.n	8001864 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001846:	7d7b      	ldrb	r3, [r7, #21]
 8001848:	b29a      	uxth	r2, r3
 800184a:	7d3b      	ldrb	r3, [r7, #20]
 800184c:	b29b      	uxth	r3, r3
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	3301      	adds	r3, #1
 8001858:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800185a:	8bfb      	ldrh	r3, [r7, #30]
 800185c:	029a      	lsls	r2, r3, #10
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e02e      	b.n	80018c2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001864:	7c7b      	ldrb	r3, [r7, #17]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	b2da      	uxtb	r2, r3
 800186c:	7dbb      	ldrb	r3, [r7, #22]
 800186e:	09db      	lsrs	r3, r3, #7
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b2da      	uxtb	r2, r3
 8001876:	7d7b      	ldrb	r3, [r7, #21]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f003 0306 	and.w	r3, r3, #6
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3302      	adds	r3, #2
 8001888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800188c:	7d3b      	ldrb	r3, [r7, #20]
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	b2db      	uxtb	r3, r3
 8001892:	b29a      	uxth	r2, r3
 8001894:	7cfb      	ldrb	r3, [r7, #19]
 8001896:	b29b      	uxth	r3, r3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29a      	uxth	r2, r3
 80018a0:	7cbb      	ldrb	r3, [r7, #18]
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018b4:	8bfa      	ldrh	r2, [r7, #30]
 80018b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ba:	3b09      	subs	r3, #9
 80018bc:	409a      	lsls	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018c8:	e056      	b.n	8001978 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018d8:	e055      	b.n	8001986 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018da:	f7ff fc09 	bl	80010f0 <SD_ReadyWait>
 80018de:	4603      	mov	r3, r0
 80018e0:	2bff      	cmp	r3, #255	; 0xff
 80018e2:	d14b      	bne.n	800197c <SD_disk_ioctl+0x234>
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018ea:	e047      	b.n	800197c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018ec:	2100      	movs	r1, #0
 80018ee:	2049      	movs	r0, #73	; 0x49
 80018f0:	f7ff fce5 	bl	80012be <SD_SendCmd>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d142      	bne.n	8001980 <SD_disk_ioctl+0x238>
 80018fa:	2110      	movs	r1, #16
 80018fc:	6a38      	ldr	r0, [r7, #32]
 80018fe:	f7ff fc6b 	bl	80011d8 <SD_RxDataBlock>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03b      	beq.n	8001980 <SD_disk_ioctl+0x238>
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800190e:	e037      	b.n	8001980 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001910:	2100      	movs	r1, #0
 8001912:	204a      	movs	r0, #74	; 0x4a
 8001914:	f7ff fcd3 	bl	80012be <SD_SendCmd>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d132      	bne.n	8001984 <SD_disk_ioctl+0x23c>
 800191e:	2110      	movs	r1, #16
 8001920:	6a38      	ldr	r0, [r7, #32]
 8001922:	f7ff fc59 	bl	80011d8 <SD_RxDataBlock>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d02b      	beq.n	8001984 <SD_disk_ioctl+0x23c>
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001932:	e027      	b.n	8001984 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001934:	2100      	movs	r1, #0
 8001936:	207a      	movs	r0, #122	; 0x7a
 8001938:	f7ff fcc1 	bl	80012be <SD_SendCmd>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d116      	bne.n	8001970 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001948:	e00b      	b.n	8001962 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800194a:	6a3c      	ldr	r4, [r7, #32]
 800194c:	1c63      	adds	r3, r4, #1
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	f7ff fba4 	bl	800109c <SPI_RxByte>
 8001954:	4603      	mov	r3, r0
 8001956:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800195c:	3301      	adds	r3, #1
 800195e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001962:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001966:	2b03      	cmp	r3, #3
 8001968:	d9ef      	bls.n	800194a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001970:	2304      	movs	r3, #4
 8001972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001976:	e006      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 8001978:	bf00      	nop
 800197a:	e004      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 800197c:	bf00      	nop
 800197e:	e002      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 8001980:	bf00      	nop
 8001982:	e000      	b.n	8001986 <SD_disk_ioctl+0x23e>
			break;
 8001984:	bf00      	nop
		}

		DESELECT();
 8001986:	f7ff fb47 	bl	8001018 <DESELECT>
		SPI_RxByte();
 800198a:	f7ff fb87 	bl	800109c <SPI_RxByte>
	}

	return res;
 800198e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001992:	4618      	mov	r0, r3
 8001994:	372c      	adds	r7, #44	; 0x2c
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t debug = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
	uint8_t size = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	72fb      	strb	r3, [r7, #11]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f000 fbe9 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f87f 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 f949 	bl	8001c4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80019ba:	f000 f8e3 	bl	8001b84 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80019be:	f008 fc9b 	bl	800a2f8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80019c2:	f000 f90d 	bl	8001be0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80019c6:	f005 fe23 	bl	8007610 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//  SearchDevice(&hi2c1);

  uint16_t init_tries= 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	813b      	strh	r3, [r7, #8]
//	  init_tries++;
////	  while(1);
//  }

  	/* BMP280 Initialization I2c Port params */
    bmp280_init_default_params(&bmp280.params);
 80019ce:	482c      	ldr	r0, [pc, #176]	; (8001a80 <main+0xe0>)
 80019d0:	f007 fe63 	bl	800969a <bmp280_init_default_params>
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <main+0xe4>)
 80019d6:	2276      	movs	r2, #118	; 0x76
 80019d8:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280.i2c = &hi2c1;
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <main+0xe4>)
 80019dc:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <main+0xe8>)
 80019de:	629a      	str	r2, [r3, #40]	; 0x28

    while (!bmp280_init(&bmp280, &bmp280.params) && false) {
 80019e0:	bf00      	nop
 80019e2:	4927      	ldr	r1, [pc, #156]	; (8001a80 <main+0xe0>)
 80019e4:	4827      	ldr	r0, [pc, #156]	; (8001a84 <main+0xe4>)
 80019e6:	f007 ffd2 	bl	800998e <bmp280_init>
      		size = sprintf((char *)buffer, "BMP280 initialization failed\n");
//  		HAL_UART_Transmit(&huart1, Data, size, 1000);
      		HAL_Delay(2000);
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <main+0xe4>)
 80019ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019f0:	2b60      	cmp	r3, #96	; 0x60
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
	size = sprintf((char *)buffer, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <main+0x64>
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <main+0xec>)
 8001a02:	e000      	b.n	8001a06 <main+0x66>
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <main+0xf0>)
 8001a06:	461a      	mov	r2, r3
 8001a08:	4922      	ldr	r1, [pc, #136]	; (8001a94 <main+0xf4>)
 8001a0a:	4823      	ldr	r0, [pc, #140]	; (8001a98 <main+0xf8>)
 8001a0c:	f009 fdfa 	bl	800b604 <siprintf>
 8001a10:	4603      	mov	r3, r0
 8001a12:	72fb      	strb	r3, [r7, #11]
    /* USER CODE END WHILE */



	  /* Read BMP280 sensor every 2s */
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)  && false) {
 8001a14:	bf00      	nop
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <main+0xfc>)
 8001a18:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <main+0x100>)
 8001a1a:	4922      	ldr	r1, [pc, #136]	; (8001aa4 <main+0x104>)
 8001a1c:	4819      	ldr	r0, [pc, #100]	; (8001a84 <main+0xe4>)
 8001a1e:	f008 fc1f 	bl	800a260 <bmp280_read_float>
				  "Temperature/pressure reading failed\n");
//	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
			CDC_Transmit_FS(buffer,size);
			HAL_Delay(2000);
		}
	size = sprintf((char *)buffer,"Pressure: %.2f Pa, Temperature: %.2f C",
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <main+0x100>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd96 	bl	8000558 <__aeabi_f2d>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	460d      	mov	r5, r1
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <main+0x104>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd8f 	bl	8000558 <__aeabi_f2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a42:	4622      	mov	r2, r4
 8001a44:	462b      	mov	r3, r5
 8001a46:	4918      	ldr	r1, [pc, #96]	; (8001aa8 <main+0x108>)
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <main+0xf8>)
 8001a4a:	f009 fddb 	bl	800b604 <siprintf>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	72fb      	strb	r3, [r7, #11]
			pressure, temperature);
//	CDC_Transmit_FS(buffer,size);

	Altitud = BMP280_CalcularAltitud ( pressure, 273.0 + temperature);
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <main+0x100>)
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <main+0x104>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001aac <main+0x10c>
 8001a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a66:	eef0 0a67 	vmov.f32	s1, s15
 8001a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a6e:	f000 f94b 	bl	8001d08 <BMP280_CalcularAltitud>
 8001a72:	eef0 7a40 	vmov.f32	s15, s0
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <main+0x110>)
 8001a78:	edc3 7a00 	vstr	s15, [r3]
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)  && false) {
 8001a7c:	e7ca      	b.n	8001a14 <main+0x74>
 8001a7e:	bf00      	nop
 8001a80:	20000444 	.word	0x20000444
 8001a84:	20000418 	.word	0x20000418
 8001a88:	2000036c 	.word	0x2000036c
 8001a8c:	0800df18 	.word	0x0800df18
 8001a90:	0800df20 	.word	0x0800df20
 8001a94:	0800df28 	.word	0x0800df28
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	20000454 	.word	0x20000454
 8001aa0:	2000044c 	.word	0x2000044c
 8001aa4:	20000450 	.word	0x20000450
 8001aa8:	0800df3c 	.word	0x0800df3c
 8001aac:	43888000 	.word	0x43888000
 8001ab0:	20000458 	.word	0x20000458

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	; 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	2230      	movs	r2, #48	; 0x30
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f009 f92c 	bl	800ad20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <SystemClock_Config+0xc8>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <SystemClock_Config+0xc8>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <SystemClock_Config+0xc8>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <SystemClock_Config+0xcc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <SystemClock_Config+0xcc>)
 8001afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <SystemClock_Config+0xcc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001b24:	230f      	movs	r3, #15
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001b28:	2390      	movs	r3, #144	; 0x90
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001b30:	2305      	movs	r3, #5
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f8a5 	bl	8004c88 <HAL_RCC_OscConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b44:	f000 f92a 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2101      	movs	r1, #1
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fb07 	bl	8005178 <HAL_RCC_ClockConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b70:	f000 f914 	bl	8001d9c <Error_Handler>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000

08001b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <MX_I2C1_Init+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_I2C1_Init+0x58>)
 8001b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bc2:	f000 fe25 	bl	8002810 <HAL_I2C_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bcc:	f000 f8e6 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000036c 	.word	0x2000036c
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <MX_SPI1_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c14:	2218      	movs	r2, #24
 8001c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c32:	f003 fc6d 	bl	8005510 <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f000 f8ae 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200003c0 	.word	0x200003c0
 8001c48:	40013000 	.word	0x40013000

08001c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_GPIO_Init+0xb4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <MX_GPIO_Init+0xb8>)
 8001cd8:	f000 fd80 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001cdc:	2310      	movs	r3, #16
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_GPIO_Init+0xb8>)
 8001cf4:	f000 fbee 	bl	80024d4 <HAL_GPIO_Init>

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000

08001d08 <BMP280_CalcularAltitud>:

/* USER CODE BEGIN 4 */

float BMP280_CalcularAltitud (float P, float TK)
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d12:	edc7 0a00 	vstr	s1, [r7]
    return TK * Const_aire * ((float) log (p0_def / P));
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	f7fe fc1e 	bl	8000558 <__aeabi_f2d>
 8001d1c:	a31d      	add	r3, pc, #116	; (adr r3, 8001d94 <BMP280_CalcularAltitud+0x8c>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d90 <BMP280_CalcularAltitud+0x88>
 8001d32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d3a:	ee16 0a90 	vmov	r0, s13
 8001d3e:	f7fe fc0b 	bl	8000558 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ec43 2b10 	vmov	d0, r2, r3
 8001d4a:	f00b fed5 	bl	800daf8 <log>
 8001d4e:	ec53 2b10 	vmov	r2, r3, d0
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7fe ff2f 	bl	8000bb8 <__aeabi_d2f>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbfb 	bl	8000558 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	f7fe fc4d 	bl	8000608 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe ff1f 	bl	8000bb8 <__aeabi_d2f>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	ee07 3a90 	vmov	s15, r3
}
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	f3af 8000 	nop.w
 8001d90:	47c5e680 	.word	0x47c5e680
 8001d94:	9dadfb50 	.word	0x9dadfb50
 8001d98:	403d4528 	.word	0x403d4528

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <Error_Handler+0x8>
	...

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_MspInit+0x4c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_I2C_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_I2C_MspInit+0x88>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_I2C_MspInit+0x88>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_I2C_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e36:	23c0      	movs	r3, #192	; 0xc0
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3a:	2312      	movs	r3, #18
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e46:	2304      	movs	r3, #4
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <HAL_I2C_MspInit+0x8c>)
 8001e52:	f000 fb3f 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_I2C_MspInit+0x88>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_I2C_MspInit+0x88>)
 8001e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_I2C_MspInit+0x88>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40005400 	.word	0x40005400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020400 	.word	0x40020400

08001e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_SPI_MspInit+0x84>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d12b      	bne.n	8001f02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ee2:	23e0      	movs	r3, #224	; 0xe0
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_SPI_MspInit+0x8c>)
 8001efe:	f000 fae9 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40013000 	.word	0x40013000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 f960 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <OTG_FS_IRQHandler+0x10>)
 8001f72:	f001 fd5c 	bl	8003a2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20001958 	.word	0x20001958

08001f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	return 1;
 8001f84:	2301      	movs	r3, #1
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_kill>:

int _kill(int pid, int sig)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f9a:	f008 fe97 	bl	800accc <__errno>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2216      	movs	r2, #22
 8001fa2:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_exit>:

void _exit (int status)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ffe7 	bl	8001f90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fc2:	e7fe      	b.n	8001fc2 <_exit+0x12>

08001fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e00a      	b.n	8001fec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd6:	f3af 8000 	nop.w
 8001fda:	4601      	mov	r1, r0
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	b2ca      	uxtb	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf0      	blt.n	8001fd6 <_read+0x12>
	}

return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e009      	b.n	8002024 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbf1      	blt.n	8002010 <_write+0x12>
	}
	return len;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_close>:

int _close(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205e:	605a      	str	r2, [r3, #4]
	return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_isatty>:

int _isatty(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
	return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f008 fdfc 	bl	800accc <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20020000 	.word	0x20020000
 8002100:	00000400 	.word	0x00000400
 8002104:	2000045c 	.word	0x2000045c
 8002108:	20002098 	.word	0x20002098

0800210c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <SystemInit+0x20>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <SystemInit+0x20>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800214c:	4c0b      	ldr	r4, [pc, #44]	; (800217c <LoopFillZerobss+0x26>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800215a:	f7ff ffd7 	bl	800210c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215e:	f008 fdbb 	bl	800acd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002162:	f7ff fc1d 	bl	80019a0 <main>
  bx  lr    
 8002166:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8002174:	0800e3ac 	.word	0x0800e3ac
  ldr r2, =_sbss
 8002178:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 800217c:	20002094 	.word	0x20002094

08002180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC_IRQHandler>
	...

08002184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_Init+0x40>)
 800218e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_Init+0x40>)
 800219a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_Init+0x40>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f94f 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b2:	200f      	movs	r0, #15
 80021b4:	f000 f808 	bl	80021c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b8:	f7ff fdf6 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00

080021c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_InitTick+0x54>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_InitTick+0x58>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f967 	bl	80024ba <HAL_SYSTICK_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00e      	b.n	8002214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	d80a      	bhi.n	8002212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021fc:	2200      	movs	r2, #0
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f000 f92f 	bl	8002466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002208:	4a06      	ldr	r2, [pc, #24]	; (8002224 <HAL_InitTick+0x5c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000068 	.word	0x20000068
 8002220:	20000070 	.word	0x20000070
 8002224:	2000006c 	.word	0x2000006c

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000070 	.word	0x20000070
 800224c:	20000460 	.word	0x20000460

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000460 	.word	0x20000460

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000070 	.word	0x20000070

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff29 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff3e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff31 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e159      	b.n	80027a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 8148 	bne.w	800279e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d005      	beq.n	8002526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	2b02      	cmp	r3, #2
 8002524:	d130      	bne.n	8002588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b03      	cmp	r3, #3
 8002592:	d017      	beq.n	80025c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d123      	bne.n	8002618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220f      	movs	r2, #15
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0203 	and.w	r2, r3, #3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a2 	beq.w	800279e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b57      	ldr	r3, [pc, #348]	; (80027bc <HAL_GPIO_Init+0x2e8>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_GPIO_Init+0x2e8>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b54      	ldr	r3, [pc, #336]	; (80027bc <HAL_GPIO_Init+0x2e8>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002676:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_GPIO_Init+0x2ec>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a49      	ldr	r2, [pc, #292]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x202>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a48      	ldr	r2, [pc, #288]	; (80027c8 <HAL_GPIO_Init+0x2f4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x1fe>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_GPIO_Init+0x2f8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x1fa>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a46      	ldr	r2, [pc, #280]	; (80027d0 <HAL_GPIO_Init+0x2fc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x1f6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_GPIO_Init+0x300>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x1f2>
 80026c2:	2304      	movs	r3, #4
 80026c4:	e008      	b.n	80026d8 <HAL_GPIO_Init+0x204>
 80026c6:	2307      	movs	r3, #7
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x204>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x204>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x204>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x204>
 80026d6:	2300      	movs	r3, #0
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e8:	4935      	ldr	r1, [pc, #212]	; (80027c0 <HAL_GPIO_Init+0x2ec>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_GPIO_Init+0x304>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271a:	4a2f      	ldr	r2, [pc, #188]	; (80027d8 <HAL_GPIO_Init+0x304>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_GPIO_Init+0x304>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <HAL_GPIO_Init+0x304>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_GPIO_Init+0x304>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_GPIO_Init+0x304>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_GPIO_Init+0x304>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002798:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <HAL_GPIO_Init+0x304>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	f67f aea2 	bls.w	80024f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020c00 	.word	0x40020c00
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40013c00 	.word	0x40013c00

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f8:	e003      	b.n	8002802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	041a      	lsls	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e12b      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fade 	bl	8001df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002874:	f002 fe38 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8002878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a81      	ldr	r2, [pc, #516]	; (8002a84 <HAL_I2C_Init+0x274>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d807      	bhi.n	8002894 <HAL_I2C_Init+0x84>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a80      	ldr	r2, [pc, #512]	; (8002a88 <HAL_I2C_Init+0x278>)
 8002888:	4293      	cmp	r3, r2
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e006      	b.n	80028a2 <HAL_I2C_Init+0x92>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a7d      	ldr	r2, [pc, #500]	; (8002a8c <HAL_I2C_Init+0x27c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	bf94      	ite	ls
 800289c:	2301      	movls	r3, #1
 800289e:	2300      	movhi	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0e7      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a78      	ldr	r2, [pc, #480]	; (8002a90 <HAL_I2C_Init+0x280>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <HAL_I2C_Init+0x274>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d802      	bhi.n	80028e4 <HAL_I2C_Init+0xd4>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3301      	adds	r3, #1
 80028e2:	e009      	b.n	80028f8 <HAL_I2C_Init+0xe8>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	4a69      	ldr	r2, [pc, #420]	; (8002a94 <HAL_I2C_Init+0x284>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	3301      	adds	r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800290a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	495c      	ldr	r1, [pc, #368]	; (8002a84 <HAL_I2C_Init+0x274>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d819      	bhi.n	800294c <HAL_I2C_Init+0x13c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e59      	subs	r1, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fbb1 f3f3 	udiv	r3, r1, r3
 8002926:	1c59      	adds	r1, r3, #1
 8002928:	f640 73fc 	movw	r3, #4092	; 0xffc
 800292c:	400b      	ands	r3, r1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_I2C_Init+0x138>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e59      	subs	r1, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002946:	e051      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 8002948:	2304      	movs	r3, #4
 800294a:	e04f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <HAL_I2C_Init+0x168>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e012      	b.n	800299e <HAL_I2C_Init+0x18e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	0099      	lsls	r1, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Init+0x196>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e022      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10e      	bne.n	80029cc <HAL_I2C_Init+0x1bc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e58      	subs	r0, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	440b      	add	r3, r1
 80029bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ca:	e00f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	0099      	lsls	r1, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6809      	ldr	r1, [r1, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6911      	ldr	r1, [r2, #16]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	000186a0 	.word	0x000186a0
 8002a88:	001e847f 	.word	0x001e847f
 8002a8c:	003d08ff 	.word	0x003d08ff
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	10624dd3 	.word	0x10624dd3

08002a98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab2:	f7ff fbcd 	bl	8002250 <HAL_GetTick>
 8002ab6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	f040 80d9 	bne.w	8002c78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2319      	movs	r3, #25
 8002acc:	2201      	movs	r2, #1
 8002ace:	496d      	ldr	r1, [pc, #436]	; (8002c84 <HAL_I2C_Mem_Write+0x1ec>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fc7f 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0cc      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Mem_Write+0x56>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0c5      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d007      	beq.n	8002b14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2221      	movs	r2, #33	; 0x21
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a4d      	ldr	r2, [pc, #308]	; (8002c88 <HAL_I2C_Mem_Write+0x1f0>)
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b56:	88f8      	ldrh	r0, [r7, #6]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fab6 	bl	80030d8 <I2C_RequestMemoryWrite>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d052      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e081      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fd00 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06b      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d11b      	bne.n	8002c18 <HAL_I2C_Mem_Write+0x180>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d017      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1aa      	bne.n	8002b76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fcec 	bl	8003602 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e016      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	00100002 	.word	0x00100002
 8002c88:	ffff0000 	.word	0xffff0000

08002c8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ca6:	f7ff fad3 	bl	8002250 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	f040 8208 	bne.w	80030ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2319      	movs	r3, #25
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	497b      	ldr	r1, [pc, #492]	; (8002eb0 <HAL_I2C_Mem_Read+0x224>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fb85 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e1fb      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_Mem_Read+0x56>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e1f4      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d007      	beq.n	8002d08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2222      	movs	r2, #34	; 0x22
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a5b      	ldr	r2, [pc, #364]	; (8002eb4 <HAL_I2C_Mem_Read+0x228>)
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d4a:	88f8      	ldrh	r0, [r7, #6]
 8002d4c:	893a      	ldrh	r2, [r7, #8]
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	4603      	mov	r3, r0
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fa52 	bl	8003204 <I2C_RequestMemoryRead>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1b0      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d113      	bne.n	8002d9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e184      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d11b      	bne.n	8002dda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e164      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d11b      	bne.n	8002e1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	e144      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e30:	e138      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	f200 80f1 	bhi.w	800301e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d123      	bne.n	8002e8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fc1b 	bl	8003684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e139      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e8a:	e10b      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d14e      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4906      	ldr	r1, [pc, #24]	; (8002eb8 <HAL_I2C_Mem_Read+0x22c>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa98 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e10e      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
 8002eae:	bf00      	nop
 8002eb0:	00100002 	.word	0x00100002
 8002eb4:	ffff0000 	.word	0xffff0000
 8002eb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f30:	e0b8      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4966      	ldr	r1, [pc, #408]	; (80030d4 <HAL_I2C_Mem_Read+0x448>)
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fa49 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0bf      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	2200      	movs	r2, #0
 8002f96:	494f      	ldr	r1, [pc, #316]	; (80030d4 <HAL_I2C_Mem_Read+0x448>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fa1b 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e091      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800301c:	e042      	b.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fb2e 	bl	8003684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e04c      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d118      	bne.n	80030a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f47f aec2 	bne.w	8002e32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e000      	b.n	80030cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
  }
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3728      	adds	r7, #40	; 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	00010004 	.word	0x00010004

080030d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	817b      	strh	r3, [r7, #10]
 80030ea:	460b      	mov	r3, r1
 80030ec:	813b      	strh	r3, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	2200      	movs	r2, #0
 800310a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f960 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003128:	d103      	bne.n	8003132 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e05f      	b.n	80031f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003136:	897b      	ldrh	r3, [r7, #10]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	492d      	ldr	r1, [pc, #180]	; (8003200 <I2C_RequestMemoryWrite+0x128>)
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f998 	bl	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e04c      	b.n	80031f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	6a39      	ldr	r1, [r7, #32]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa02 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b04      	cmp	r3, #4
 8003188:	d107      	bne.n	800319a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e02b      	b.n	80031f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	611a      	str	r2, [r3, #16]
 80031ae:	e021      	b.n	80031f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	6a39      	ldr	r1, [r7, #32]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f9dc 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d107      	bne.n	80031e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e005      	b.n	80031f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ea:	893b      	ldrh	r3, [r7, #8]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	00010002 	.word	0x00010002

08003204 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800322c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	2200      	movs	r2, #0
 8003246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f8c2 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003264:	d103      	bne.n	800326e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0aa      	b.n	80033c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003280:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	6a3a      	ldr	r2, [r7, #32]
 8003286:	4952      	ldr	r1, [pc, #328]	; (80033d0 <I2C_RequestMemoryRead+0x1cc>)
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f8fa 	bl	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e097      	b.n	80033c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	6a39      	ldr	r1, [r7, #32]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f964 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d107      	bne.n	80032d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e076      	b.n	80033c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032e0:	893b      	ldrh	r3, [r7, #8]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	611a      	str	r2, [r3, #16]
 80032ea:	e021      	b.n	8003330 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032ec:	893b      	ldrh	r3, [r7, #8]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	6a39      	ldr	r1, [r7, #32]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f93e 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b04      	cmp	r3, #4
 8003310:	d107      	bne.n	8003322 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003320:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e050      	b.n	80033c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003326:	893b      	ldrh	r3, [r7, #8]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	6a39      	ldr	r1, [r7, #32]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f923 	bl	8003580 <I2C_WaitOnTXEFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2b04      	cmp	r3, #4
 8003346:	d107      	bne.n	8003358 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e035      	b.n	80033c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2200      	movs	r2, #0
 8003374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f82b 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00d      	beq.n	80033a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d103      	bne.n	800339c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e013      	b.n	80033c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033a0:	897b      	ldrh	r3, [r7, #10]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	6a3a      	ldr	r2, [r7, #32]
 80033b4:	4906      	ldr	r1, [pc, #24]	; (80033d0 <I2C_RequestMemoryRead+0x1cc>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f863 	bl	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	00010002 	.word	0x00010002

080033d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	e025      	b.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d021      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe ff2f 	bl	8002250 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d116      	bne.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e023      	b.n	800347a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10d      	bne.n	8003458 <I2C_WaitOnFlagUntilTimeout+0x84>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	e00c      	b.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d0b6      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003490:	e051      	b.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d123      	bne.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e046      	b.n	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d021      	beq.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fe fead 	bl	8002250 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e020      	b.n	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10c      	bne.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e00b      	b.n	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d18d      	bne.n	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800358c:	e02d      	b.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f8ce 	bl	8003730 <I2C_IsAcknowledgeFailed>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e02d      	b.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d021      	beq.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe fe53 	bl	8002250 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e007      	b.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d1ca      	bne.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800360e:	e02d      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f88d 	bl	8003730 <I2C_IsAcknowledgeFailed>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e02d      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d021      	beq.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	f7fe fe12 	bl	8002250 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d1ca      	bne.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003690:	e042      	b.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b10      	cmp	r3, #16
 800369e:	d119      	bne.n	80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0210 	mvn.w	r2, #16
 80036a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e029      	b.n	8003728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d4:	f7fe fdbc 	bl	8002250 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d116      	bne.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d1b5      	bne.n	8003692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003746:	d11b      	bne.n	8003780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800378e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003790:	b08f      	sub	sp, #60	; 0x3c
 8003792:	af0a      	add	r7, sp, #40	; 0x28
 8003794:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e10f      	b.n	80039c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f006 ff7c 	bl	800a6b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2203      	movs	r2, #3
 80037c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 fbdd 	bl	8005f9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	687e      	ldr	r6, [r7, #4]
 80037ec:	466d      	mov	r5, sp
 80037ee:	f106 0410 	add.w	r4, r6, #16
 80037f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003802:	1d33      	adds	r3, r6, #4
 8003804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003806:	6838      	ldr	r0, [r7, #0]
 8003808:	f002 fab4 	bl	8005d74 <USB_CoreInit>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0d0      	b.n	80039c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fbcb 	bl	8005fc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	e04a      	b.n	80038c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	333d      	adds	r3, #61	; 0x3d
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	333c      	adds	r3, #60	; 0x3c
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	b298      	uxth	r0, r3
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	3344      	adds	r3, #68	; 0x44
 800386c:	4602      	mov	r2, r0
 800386e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	3340      	adds	r3, #64	; 0x40
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3348      	adds	r3, #72	; 0x48
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	334c      	adds	r3, #76	; 0x4c
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3354      	adds	r3, #84	; 0x54
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	3301      	adds	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3af      	bcc.n	8003830 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e044      	b.n	8003960 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	3301      	adds	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3b5      	bcc.n	80038d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	687e      	ldr	r6, [r7, #4]
 8003972:	466d      	mov	r5, sp
 8003974:	f106 0410 	add.w	r4, r6, #16
 8003978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800397c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003980:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003984:	e885 0003 	stmia.w	r5, {r0, r1}
 8003988:	1d33      	adds	r3, r6, #4
 800398a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800398c:	6838      	ldr	r0, [r7, #0]
 800398e:	f002 fb63 	bl	8006058 <USB_DevInit>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e00d      	b.n	80039c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f003 fcb2 	bl	8007322 <USB_DevDisconnect>

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_PCD_Start+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e020      	b.n	8003a26 <HAL_PCD_Start+0x5e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d109      	bne.n	8003a08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d005      	beq.n	8003a08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f002 fab5 	bl	8005f7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 fc62 	bl	80072e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a2e:	b590      	push	{r4, r7, lr}
 8003a30:	b08d      	sub	sp, #52	; 0x34
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 fd20 	bl	800748a <USB_GetMode>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 848a 	bne.w	8004366 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 fc84 	bl	8007364 <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8480 	beq.w	8004364 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 fc71 	bl	8007364 <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d107      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f002 0202 	and.w	r2, r2, #2
 8003a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f003 fc5f 	bl	8007364 <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d161      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0210 	bic.w	r2, r2, #16
 8003abe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	0c5b      	lsrs	r3, r3, #17
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d124      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d035      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6a38      	ldr	r0, [r7, #32]
 8003b0c:	f003 fa96 	bl	800703c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1c:	441a      	add	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	6a1a      	ldr	r2, [r3, #32]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2e:	441a      	add	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	621a      	str	r2, [r3, #32]
 8003b34:	e016      	b.n	8003b64 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	0c5b      	lsrs	r3, r3, #17
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d110      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b48:	2208      	movs	r2, #8
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6a38      	ldr	r0, [r7, #32]
 8003b4e:	f003 fa75 	bl	800703c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5e:	441a      	add	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0210 	orr.w	r2, r2, #16
 8003b72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f003 fbf3 	bl	8007364 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b88:	f040 80a7 	bne.w	8003cda <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f003 fbf8 	bl	800738a <USB_ReadDevAllOutEpInterrupt>
 8003b9a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b9c:	e099      	b.n	8003cd2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 808e 	beq.w	8003cc6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fc1c 	bl	80073f2 <USB_ReadDevOutEPInterrupt>
 8003bba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fec2 	bl	8004964 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 ff98 	bl	8004b34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d030      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d109      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c48:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	78db      	ldrb	r3, [r3, #3]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d108      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f006 fe1b 	bl	800a8b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	2302      	movs	r3, #2
 8003c8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cc4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	3301      	adds	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f47f af62 	bne.w	8003b9e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 fb40 	bl	8007364 <USB_ReadInterrupts>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cee:	f040 80db 	bne.w	8003ea8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f003 fb61 	bl	80073be <USB_ReadDevAllInEpInterrupt>
 8003cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d02:	e0cd      	b.n	8003ea0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80c2 	beq.w	8003e94 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fb87 	bl	800742e <USB_ReadDevInEPInterrupt>
 8003d20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d057      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69f9      	ldr	r1, [r7, #28]
 8003d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d132      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	334c      	adds	r3, #76	; 0x4c
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4403      	add	r3, r0
 8003d8a:	3348      	adds	r3, #72	; 0x48
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4419      	add	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4403      	add	r3, r0
 8003d9e:	334c      	adds	r3, #76	; 0x4c
 8003da0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d113      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x3a2>
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3354      	adds	r3, #84	; 0x54
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2101      	movs	r1, #1
 8003dcc:	f003 fb8e 	bl	80074ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f006 fcef 	bl	800a7ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	461a      	mov	r2, r3
 8003df4:	2308      	movs	r3, #8
 8003df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2310      	movs	r3, #16
 8003e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2340      	movs	r3, #64	; 0x40
 8003e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e3c:	6a38      	ldr	r0, [r7, #32]
 8003e3e:	f002 fa6f 	bl	8006320 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d108      	bne.n	8003e70 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f006 fd32 	bl	800a8d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2302      	movs	r3, #2
 8003e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fcdb 	bl	800484a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	3301      	adds	r3, #1
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f af2e 	bne.w	8003d04 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f003 fa59 	bl	8007364 <USB_ReadInterrupts>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ebc:	d122      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d108      	bne.n	8003eee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fec2 	bl	8004c70 <HAL_PCDEx_LPM_Callback>
 8003eec:	e002      	b.n	8003ef4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f006 fcd0 	bl	800a894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 fa2b 	bl	8007364 <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f18:	d112      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d102      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f006 fc8c 	bl	800a848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f3e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 fa0d 	bl	8007364 <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f54:	f040 80b7 	bne.w	80040c6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2110      	movs	r1, #16
 8003f72:	4618      	mov	r0, r3
 8003f74:	f002 f9d4 	bl	8006320 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7c:	e046      	b.n	800400c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fc4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fe4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004000:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004004:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	3301      	adds	r3, #1
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004012:	429a      	cmp	r2, r3
 8004014:	d3b3      	bcc.n	8003f7e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004024:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004028:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004042:	f043 030b 	orr.w	r3, r3, #11
 8004046:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004058:	f043 030b 	orr.w	r3, r3, #11
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	e015      	b.n	800408c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004072:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004076:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004086:	f043 030b 	orr.w	r3, r3, #11
 800408a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800409e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040b0:	461a      	mov	r2, r3
 80040b2:	f003 fa1b 	bl	80074ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 f94a 	bl	8007364 <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040da:	d124      	bne.n	8004126 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 f9e0 	bl	80074a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 f995 	bl	800641a <USB_GetDevSpeed>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681c      	ldr	r4, [r3, #0]
 80040fc:	f001 f9e8 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 8004100:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	4620      	mov	r0, r4
 800410c:	f001 fe94 	bl	8005e38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f006 fb7a 	bl	800a80a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004124:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f003 f91a 	bl	8007364 <USB_ReadInterrupts>
 8004130:	4603      	mov	r3, r0
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b08      	cmp	r3, #8
 8004138:	d10a      	bne.n	8004150 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f006 fb57 	bl	800a7ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f002 0208 	and.w	r2, r2, #8
 800414e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f003 f905 	bl	8007364 <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d122      	bne.n	80041aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004170:	2301      	movs	r3, #1
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
 8004174:	e014      	b.n	80041a0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fb27 	bl	80047e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	3301      	adds	r3, #1
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d3e5      	bcc.n	8004176 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 f8d8 	bl	8007364 <USB_ReadInterrupts>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041be:	d13b      	bne.n	8004238 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c0:	2301      	movs	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	e02b      	b.n	800421e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3340      	adds	r3, #64	; 0x40
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d115      	bne.n	8004218 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da12      	bge.n	8004218 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	333f      	adds	r3, #63	; 0x3f
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800420e:	b2db      	uxtb	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fae8 	bl	80047e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	3301      	adds	r3, #1
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	429a      	cmp	r2, r3
 8004226:	d3ce      	bcc.n	80041c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f003 f891 	bl	8007364 <USB_ReadInterrupts>
 8004242:	4603      	mov	r3, r0
 8004244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424c:	d155      	bne.n	80042fa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800424e:	2301      	movs	r3, #1
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e045      	b.n	80042e0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d12e      	bne.n	80042da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800427c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800427e:	2b00      	cmp	r3, #0
 8004280:	da2b      	bge.n	80042da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800428e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004292:	429a      	cmp	r2, r3
 8004294:	d121      	bne.n	80042da <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d6:	6053      	str	r3, [r2, #4]
            break;
 80042d8:	e007      	b.n	80042ea <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	3301      	adds	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b4      	bcc.n	8004254 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f003 f830 	bl	8007364 <USB_ReadInterrupts>
 8004304:	4603      	mov	r3, r0
 8004306:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430e:	d10a      	bne.n	8004326 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f006 faf1 	bl	800a8f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f003 f81a 	bl	8007364 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d115      	bne.n	8004366 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f006 fae1 	bl	800a914 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	e000      	b.n	8004366 <HAL_PCD_IRQHandler+0x938>
      return;
 8004364:	bf00      	nop
    }
  }
}
 8004366:	3734      	adds	r7, #52	; 0x34
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}

0800436c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_PCD_SetAddress+0x1a>
 8004382:	2302      	movs	r3, #2
 8004384:	e013      	b.n	80043ae <HAL_PCD_SetAddress+0x42>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f002 ff78 	bl	8007294 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	4608      	mov	r0, r1
 80043c0:	4611      	mov	r1, r2
 80043c2:	461a      	mov	r2, r3
 80043c4:	4603      	mov	r3, r0
 80043c6:	70fb      	strb	r3, [r7, #3]
 80043c8:	460b      	mov	r3, r1
 80043ca:	803b      	strh	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	da0f      	bge.n	80043fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	f003 020f 	and.w	r2, r3, #15
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3338      	adds	r3, #56	; 0x38
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	705a      	strb	r2, [r3, #1]
 80043fa:	e00f      	b.n	800441c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	3304      	adds	r3, #4
 8004414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	b2da      	uxtb	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004428:	883a      	ldrh	r2, [r7, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	78ba      	ldrb	r2, [r7, #2]
 8004432:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004446:	78bb      	ldrb	r3, [r7, #2]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d102      	bne.n	8004452 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_PCD_EP_Open+0xaa>
 800445c:	2302      	movs	r3, #2
 800445e:	e00e      	b.n	800447e <HAL_PCD_EP_Open+0xc8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68f9      	ldr	r1, [r7, #12]
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fff8 	bl	8006464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800447c:	7afb      	ldrb	r3, [r7, #11]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da0f      	bge.n	80044ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3338      	adds	r3, #56	; 0x38
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	705a      	strb	r2, [r3, #1]
 80044b8:	e00f      	b.n	80044da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	f003 020f 	and.w	r2, r3, #15
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4413      	add	r3, r2
 80044d0:	3304      	adds	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_PCD_EP_Close+0x6e>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e00e      	b.n	8004512 <HAL_PCD_EP_Close+0x8c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68f9      	ldr	r1, [r7, #12]
 8004502:	4618      	mov	r0, r3
 8004504:	f002 f836 	bl	8006574 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	460b      	mov	r3, r1
 8004528:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800452a:	7afb      	ldrb	r3, [r7, #11]
 800452c:	f003 020f 	and.w	r2, r3, #15
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	3304      	adds	r3, #4
 8004542:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	b2da      	uxtb	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d102      	bne.n	8004576 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	6979      	ldr	r1, [r7, #20]
 800458e:	f002 fb15 	bl	8006bbc <USB_EP0StartXfer>
 8004592:	e008      	b.n	80045a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	6979      	ldr	r1, [r7, #20]
 80045a2:	f002 f8c3 	bl	800672c <USB_EPStartXfer>
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 020f 	and.w	r2, r3, #15
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	460b      	mov	r3, r1
 80045ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f0:	7afb      	ldrb	r3, [r7, #11]
 80045f2:	f003 020f 	and.w	r2, r3, #15
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	3338      	adds	r3, #56	; 0x38
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	3304      	adds	r3, #4
 8004606:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2200      	movs	r2, #0
 8004618:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2201      	movs	r2, #1
 800461e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004620:	7afb      	ldrb	r3, [r7, #11]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	b2da      	uxtb	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d102      	bne.n	800463a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800463a:	7afb      	ldrb	r3, [r7, #11]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	6979      	ldr	r1, [r7, #20]
 8004652:	f002 fab3 	bl	8006bbc <USB_EP0StartXfer>
 8004656:	e008      	b.n	800466a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	6979      	ldr	r1, [r7, #20]
 8004666:	f002 f861 	bl	800672c <USB_EPStartXfer>
  }

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	f003 020f 	and.w	r2, r3, #15
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d901      	bls.n	8004692 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e050      	b.n	8004734 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004696:	2b00      	cmp	r3, #0
 8004698:	da0f      	bge.n	80046ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	3338      	adds	r3, #56	; 0x38
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	3304      	adds	r3, #4
 80046b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	705a      	strb	r2, [r3, #1]
 80046b8:	e00d      	b.n	80046d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046ba:	78fa      	ldrb	r2, [r7, #3]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	3304      	adds	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_PCD_EP_SetStall+0x82>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e01e      	b.n	8004734 <HAL_PCD_EP_SetStall+0xc0>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	f002 fcf1 	bl	80070ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	b2d9      	uxtb	r1, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004724:	461a      	mov	r2, r3
 8004726:	f002 fee1 	bl	80074ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d901      	bls.n	800475a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e042      	b.n	80047e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800475a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800475e:	2b00      	cmp	r3, #0
 8004760:	da0f      	bge.n	8004782 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	f003 020f 	and.w	r2, r3, #15
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	3338      	adds	r3, #56	; 0x38
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	3304      	adds	r3, #4
 8004778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	705a      	strb	r2, [r3, #1]
 8004780:	e00f      	b.n	80047a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 020f 	and.w	r2, r3, #15
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_PCD_EP_ClrStall+0x86>
 80047be:	2302      	movs	r3, #2
 80047c0:	e00e      	b.n	80047e0 <HAL_PCD_EP_ClrStall+0xa4>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f002 fcf9 	bl	80071c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	da0c      	bge.n	8004816 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	f003 020f 	and.w	r2, r3, #15
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	3338      	adds	r3, #56	; 0x38
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	3304      	adds	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e00c      	b.n	8004830 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	f003 020f 	and.w	r2, r3, #15
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68f9      	ldr	r1, [r7, #12]
 8004836:	4618      	mov	r0, r3
 8004838:	f002 fb18 	bl	8006e6c <USB_EPStopXfer>
 800483c:	4603      	mov	r3, r0
 800483e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004840:	7afb      	ldrb	r3, [r7, #11]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b08a      	sub	sp, #40	; 0x28
 800484e:	af02      	add	r7, sp, #8
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	3338      	adds	r3, #56	; 0x38
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	3304      	adds	r3, #4
 8004870:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	429a      	cmp	r2, r3
 800487c:	d901      	bls.n	8004882 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06c      	b.n	800495c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	429a      	cmp	r2, r3
 8004896:	d902      	bls.n	800489e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3303      	adds	r3, #3
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048a6:	e02b      	b.n	8004900 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d902      	bls.n	80048c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3303      	adds	r3, #3
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6919      	ldr	r1, [r3, #16]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	4603      	mov	r3, r0
 80048e2:	6978      	ldr	r0, [r7, #20]
 80048e4:	f002 fb6c 	bl	8006fc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	441a      	add	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	b29b      	uxth	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	429a      	cmp	r2, r3
 8004914:	d809      	bhi.n	800492a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800491e:	429a      	cmp	r2, r3
 8004920:	d203      	bcs.n	800492a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1be      	bne.n	80048a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	429a      	cmp	r2, r3
 8004934:	d811      	bhi.n	800495a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	2201      	movs	r2, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	43db      	mvns	r3, r3
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004956:	4013      	ands	r3, r2
 8004958:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	333c      	adds	r3, #60	; 0x3c
 800497c:	3304      	adds	r3, #4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d17b      	bne.n	8004a92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d015      	beq.n	80049d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	4a61      	ldr	r2, [pc, #388]	; (8004b2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	f240 80b9 	bls.w	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80b3 	beq.w	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	461a      	mov	r2, r3
 80049c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049cc:	6093      	str	r3, [r2, #8]
 80049ce:	e0a7      	b.n	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	461a      	mov	r2, r3
 80049e8:	2320      	movs	r3, #32
 80049ea:	6093      	str	r3, [r2, #8]
 80049ec:	e098      	b.n	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f040 8093 	bne.w	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4a4b      	ldr	r2, [pc, #300]	; (8004b2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d90f      	bls.n	8004a22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1e:	6093      	str	r3, [r2, #8]
 8004a20:	e07e      	b.n	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	0159      	lsls	r1, r3, #5
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	440b      	add	r3, r1
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4e:	1ad2      	subs	r2, r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d114      	bne.n	8004a84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2101      	movs	r1, #1
 8004a70:	f002 fd3c 	bl	80074ec <USB_EP0_OutStart>
 8004a74:	e006      	b.n	8004a84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	441a      	add	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f005 fe7a 	bl	800a784 <HAL_PCD_DataOutStageCallback>
 8004a90:	e046      	b.n	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d124      	bne.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab6:	6093      	str	r3, [r2, #8]
 8004ab8:	e032      	b.n	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f005 fe51 	bl	800a784 <HAL_PCD_DataOutStageCallback>
 8004ae2:	e01d      	b.n	8004b20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d114      	bne.n	8004b14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	4613      	mov	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d108      	bne.n	8004b14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2100      	movs	r1, #0
 8004b10:	f002 fcec 	bl	80074ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f005 fe32 	bl	800a784 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	4f54300a 	.word	0x4f54300a
 8004b30:	4f54310a 	.word	0x4f54310a

08004b34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	333c      	adds	r3, #60	; 0x3c
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d90e      	bls.n	8004b88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d009      	beq.n	8004b88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	461a      	mov	r2, r3
 8004b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f005 fde9 	bl	800a760 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d90c      	bls.n	8004bb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d108      	bne.n	8004bb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2101      	movs	r1, #1
 8004bac:	f002 fc9e 	bl	80074ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	4f54300a 	.word	0x4f54300a

08004bc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bde:	883b      	ldrh	r3, [r7, #0]
 8004be0:	0419      	lsls	r1, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
 8004bec:	e028      	b.n	8004c40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]
 8004c00:	e00d      	b.n	8004c1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	3340      	adds	r3, #64	; 0x40
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4413      	add	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3ec      	bcc.n	8004c02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c28:	883b      	ldrh	r3, [r7, #0]
 8004c2a:	0418      	lsls	r0, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6819      	ldr	r1, [r3, #0]
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	4302      	orrs	r2, r0
 8004c38:	3340      	adds	r3, #64	; 0x40
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e267      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d075      	beq.n	8004d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ca6:	4b88      	ldr	r3, [pc, #544]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d00c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb2:	4b85      	ldr	r3, [pc, #532]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d112      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbe:	4b82      	ldr	r3, [pc, #520]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	4b7e      	ldr	r3, [pc, #504]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05b      	beq.n	8004d90 <HAL_RCC_OscConfig+0x108>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d157      	bne.n	8004d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e242      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d106      	bne.n	8004cfc <HAL_RCC_OscConfig+0x74>
 8004cee:	4b76      	ldr	r3, [pc, #472]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a75      	ldr	r2, [pc, #468]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x98>
 8004d06:	4b70      	ldr	r3, [pc, #448]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6f      	ldr	r2, [pc, #444]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b6d      	ldr	r3, [pc, #436]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6c      	ldr	r2, [pc, #432]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004d20:	4b69      	ldr	r3, [pc, #420]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a68      	ldr	r2, [pc, #416]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a65      	ldr	r2, [pc, #404]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fd fa86 	bl	8002250 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fa82 	bl	8002250 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e207      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b5b      	ldr	r3, [pc, #364]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xc0>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd fa72 	bl	8002250 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fd fa6e 	bl	8002250 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e1f3      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0xe8>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db6:	4b44      	ldr	r3, [pc, #272]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b41      	ldr	r3, [pc, #260]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x152>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1c7      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4937      	ldr	r1, [pc, #220]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e03a      	b.n	8004e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b34      	ldr	r3, [pc, #208]	; (8004ecc <HAL_RCC_OscConfig+0x244>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fd fa27 	bl	8002250 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fd fa23 	bl	8002250 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e1a8      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b28      	ldr	r3, [pc, #160]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4925      	ldr	r1, [pc, #148]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3a:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_RCC_OscConfig+0x244>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fd fa06 	bl	8002250 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fd fa02 	bl	8002250 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e187      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d036      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_RCC_OscConfig+0x248>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fd f9e6 	bl	8002250 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fd f9e2 	bl	8002250 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e167      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x200>
 8004ea6:	e01b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_OscConfig+0x248>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fd f9cf 	bl	8002250 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	e00e      	b.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fd f9cb 	bl	8002250 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d907      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e150      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	42470000 	.word	0x42470000
 8004ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed4:	4b88      	ldr	r3, [pc, #544]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ea      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8097 	beq.w	800501c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef2:	4b81      	ldr	r3, [pc, #516]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10f      	bne.n	8004f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	4b7d      	ldr	r3, [pc, #500]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	4a7c      	ldr	r2, [pc, #496]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0e:	4b7a      	ldr	r3, [pc, #488]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1e:	4b77      	ldr	r3, [pc, #476]	; (80050fc <HAL_RCC_OscConfig+0x474>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d118      	bne.n	8004f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2a:	4b74      	ldr	r3, [pc, #464]	; (80050fc <HAL_RCC_OscConfig+0x474>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a73      	ldr	r2, [pc, #460]	; (80050fc <HAL_RCC_OscConfig+0x474>)
 8004f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f36:	f7fd f98b 	bl	8002250 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3e:	f7fd f987 	bl	8002250 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e10c      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f50:	4b6a      	ldr	r3, [pc, #424]	; (80050fc <HAL_RCC_OscConfig+0x474>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d106      	bne.n	8004f72 <HAL_RCC_OscConfig+0x2ea>
 8004f64:	4b64      	ldr	r3, [pc, #400]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	4a63      	ldr	r2, [pc, #396]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f70:	e01c      	b.n	8004fac <HAL_RCC_OscConfig+0x324>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x30c>
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a5e      	ldr	r2, [pc, #376]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70
 8004f86:	4b5c      	ldr	r3, [pc, #368]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a5b      	ldr	r2, [pc, #364]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
 8004f92:	e00b      	b.n	8004fac <HAL_RCC_OscConfig+0x324>
 8004f94:	4b58      	ldr	r3, [pc, #352]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a57      	ldr	r2, [pc, #348]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa0:	4b55      	ldr	r3, [pc, #340]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	4a54      	ldr	r2, [pc, #336]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004fa6:	f023 0304 	bic.w	r3, r3, #4
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d015      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fd f94c 	bl	8002250 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fd f948 	bl	8002250 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0cb      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd2:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0ee      	beq.n	8004fbc <HAL_RCC_OscConfig+0x334>
 8004fde:	e014      	b.n	800500a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe0:	f7fd f936 	bl	8002250 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7fd f932 	bl	8002250 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e0b5      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffe:	4b3e      	ldr	r3, [pc, #248]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ee      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d105      	bne.n	800501c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005010:	4b39      	ldr	r3, [pc, #228]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	4a38      	ldr	r2, [pc, #224]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a1 	beq.w	8005168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005026:	4b34      	ldr	r3, [pc, #208]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b08      	cmp	r3, #8
 8005030:	d05c      	beq.n	80050ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d141      	bne.n	80050be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <HAL_RCC_OscConfig+0x478>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fd f906 	bl	8002250 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd f902 	bl	8002250 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e087      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	3b01      	subs	r3, #1
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	491b      	ldr	r1, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 800508c:	4313      	orrs	r3, r2
 800508e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <HAL_RCC_OscConfig+0x478>)
 8005092:	2201      	movs	r2, #1
 8005094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005096:	f7fd f8db 	bl	8002250 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509e:	f7fd f8d7 	bl	8002250 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e05c      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x416>
 80050bc:	e054      	b.n	8005168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <HAL_RCC_OscConfig+0x478>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fd f8c4 	bl	8002250 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050cc:	f7fd f8c0 	bl	8002250 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e045      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCC_OscConfig+0x470>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0x444>
 80050ea:	e03d      	b.n	8005168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d107      	bne.n	8005104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e038      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40007000 	.word	0x40007000
 8005100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_RCC_OscConfig+0x4ec>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d028      	beq.n	8005164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d121      	bne.n	8005164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d11a      	bne.n	8005164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800513c:	4293      	cmp	r3, r2
 800513e:	d111      	bne.n	8005164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	3b01      	subs	r3, #1
 800514e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d107      	bne.n	8005164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023800 	.word	0x40023800

08005178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0cc      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b68      	ldr	r3, [pc, #416]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d90c      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b65      	ldr	r3, [pc, #404]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b63      	ldr	r3, [pc, #396]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0b8      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051cc:	4b59      	ldr	r3, [pc, #356]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a58      	ldr	r2, [pc, #352]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e4:	4b53      	ldr	r3, [pc, #332]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	4a52      	ldr	r2, [pc, #328]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f0:	4b50      	ldr	r3, [pc, #320]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	494d      	ldr	r1, [pc, #308]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d044      	beq.n	8005298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b47      	ldr	r3, [pc, #284]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d119      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e07f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d003      	beq.n	8005236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005232:	2b03      	cmp	r3, #3
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005236:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e06f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005246:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e067      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005256:	4b37      	ldr	r3, [pc, #220]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f023 0203 	bic.w	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4934      	ldr	r1, [pc, #208]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005268:	f7fc fff2 	bl	8002250 <HAL_GetTick>
 800526c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526e:	e00a      	b.n	8005286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005270:	f7fc ffee 	bl	8002250 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e04f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005286:	4b2b      	ldr	r3, [pc, #172]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 020c 	and.w	r2, r3, #12
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	429a      	cmp	r2, r3
 8005296:	d1eb      	bne.n	8005270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d20c      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b22      	ldr	r3, [pc, #136]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b20      	ldr	r3, [pc, #128]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e032      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4916      	ldr	r1, [pc, #88]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	490e      	ldr	r1, [pc, #56]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052fe:	f000 f821 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490a      	ldr	r1, [pc, #40]	; (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	fa22 f303 	lsr.w	r3, r2, r3
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fc ff52 	bl	80021c8 <HAL_InitTick>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40023c00 	.word	0x40023c00
 8005334:	40023800 	.word	0x40023800
 8005338:	0800dfac 	.word	0x0800dfac
 800533c:	20000068 	.word	0x20000068
 8005340:	2000006c 	.word	0x2000006c

08005344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b090      	sub	sp, #64	; 0x40
 800534a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
 8005350:	2300      	movs	r3, #0
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005354:	2300      	movs	r3, #0
 8005356:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535c:	4b59      	ldr	r3, [pc, #356]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	d00d      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x40>
 8005368:	2b08      	cmp	r3, #8
 800536a:	f200 80a1 	bhi.w	80054b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x34>
 8005372:	2b04      	cmp	r3, #4
 8005374:	d003      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x3a>
 8005376:	e09b      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b53      	ldr	r3, [pc, #332]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800537c:	e09b      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800537e:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_GetSysClockFreq+0x188>)
 8005380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005382:	e098      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005384:	4b4f      	ldr	r3, [pc, #316]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800538e:	4b4d      	ldr	r3, [pc, #308]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d028      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539a:	4b4a      	ldr	r3, [pc, #296]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	099b      	lsrs	r3, r3, #6
 80053a0:	2200      	movs	r2, #0
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	627a      	str	r2, [r7, #36]	; 0x24
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053ac:	2100      	movs	r1, #0
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCC_GetSysClockFreq+0x188>)
 80053b0:	fb03 f201 	mul.w	r2, r3, r1
 80053b4:	2300      	movs	r3, #0
 80053b6:	fb00 f303 	mul.w	r3, r0, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	4a43      	ldr	r2, [pc, #268]	; (80054cc <HAL_RCC_GetSysClockFreq+0x188>)
 80053be:	fba0 1202 	umull	r1, r2, r0, r2
 80053c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053c4:	460a      	mov	r2, r1
 80053c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80053c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ca:	4413      	add	r3, r2
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	2200      	movs	r2, #0
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	61fa      	str	r2, [r7, #28]
 80053d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053de:	f7fb fc8b 	bl	8000cf8 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4613      	mov	r3, r2
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ea:	e053      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ec:	4b35      	ldr	r3, [pc, #212]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	099b      	lsrs	r3, r3, #6
 80053f2:	2200      	movs	r2, #0
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	617a      	str	r2, [r7, #20]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053fe:	f04f 0b00 	mov.w	fp, #0
 8005402:	4652      	mov	r2, sl
 8005404:	465b      	mov	r3, fp
 8005406:	f04f 0000 	mov.w	r0, #0
 800540a:	f04f 0100 	mov.w	r1, #0
 800540e:	0159      	lsls	r1, r3, #5
 8005410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005414:	0150      	lsls	r0, r2, #5
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	ebb2 080a 	subs.w	r8, r2, sl
 800541e:	eb63 090b 	sbc.w	r9, r3, fp
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800542e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005436:	ebb2 0408 	subs.w	r4, r2, r8
 800543a:	eb63 0509 	sbc.w	r5, r3, r9
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	00eb      	lsls	r3, r5, #3
 8005448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544c:	00e2      	lsls	r2, r4, #3
 800544e:	4614      	mov	r4, r2
 8005450:	461d      	mov	r5, r3
 8005452:	eb14 030a 	adds.w	r3, r4, sl
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	eb45 030b 	adc.w	r3, r5, fp
 800545c:	607b      	str	r3, [r7, #4]
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546a:	4629      	mov	r1, r5
 800546c:	028b      	lsls	r3, r1, #10
 800546e:	4621      	mov	r1, r4
 8005470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005474:	4621      	mov	r1, r4
 8005476:	028a      	lsls	r2, r1, #10
 8005478:	4610      	mov	r0, r2
 800547a:	4619      	mov	r1, r3
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	2200      	movs	r2, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005488:	f7fb fc36 	bl	8000cf8 <__aeabi_uldivmod>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4613      	mov	r3, r2
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	3301      	adds	r3, #1
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80054a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054ae:	e002      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80054b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3740      	adds	r7, #64	; 0x40
 80054bc:	46bd      	mov	sp, r7
 80054be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800
 80054c8:	00f42400 	.word	0x00f42400
 80054cc:	017d7840 	.word	0x017d7840

080054d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d6:	681b      	ldr	r3, [r3, #0]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000068 	.word	0x20000068

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054ec:	f7ff fff0 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	0a9b      	lsrs	r3, r3, #10
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4903      	ldr	r1, [pc, #12]	; (800550c <HAL_RCC_GetPCLK1Freq+0x24>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40023800 	.word	0x40023800
 800550c:	0800dfbc 	.word	0x0800dfbc

08005510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e07b      	b.n	800561a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d108      	bne.n	800553c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005532:	d009      	beq.n	8005548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	61da      	str	r2, [r3, #28]
 800553a:	e005      	b.n	8005548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc fc90 	bl	8001e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055cc:	ea42 0103 	orr.w	r1, r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	f003 0104 	and.w	r1, r3, #4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f003 0210 	and.w	r2, r3, #16
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b088      	sub	sp, #32
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	4613      	mov	r3, r2
 8005630:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_SPI_Transmit+0x22>
 8005640:	2302      	movs	r3, #2
 8005642:	e126      	b.n	8005892 <HAL_SPI_Transmit+0x270>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800564c:	f7fc fe00 	bl	8002250 <HAL_GetTick>
 8005650:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d002      	beq.n	8005668 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005662:	2302      	movs	r3, #2
 8005664:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005666:	e10b      	b.n	8005880 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_SPI_Transmit+0x52>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005678:	e102      	b.n	8005880 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2203      	movs	r2, #3
 800567e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	d10f      	bne.n	80056e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d007      	beq.n	8005700 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005708:	d14b      	bne.n	80057a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Transmit+0xf6>
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d13e      	bne.n	8005796 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800573c:	e02b      	b.n	8005796 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d112      	bne.n	8005772 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	881a      	ldrh	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	1c9a      	adds	r2, r3, #2
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005770:	e011      	b.n	8005796 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005772:	f7fc fd6d 	bl	8002250 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d803      	bhi.n	800578a <HAL_SPI_Transmit+0x168>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d102      	bne.n	8005790 <HAL_SPI_Transmit+0x16e>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005794:	e074      	b.n	8005880 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ce      	bne.n	800573e <HAL_SPI_Transmit+0x11c>
 80057a0:	e04c      	b.n	800583c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Transmit+0x18e>
 80057aa:	8afb      	ldrh	r3, [r7, #22]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d140      	bne.n	8005832 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057d6:	e02c      	b.n	8005832 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d113      	bne.n	800580e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	86da      	strh	r2, [r3, #54]	; 0x36
 800580c:	e011      	b.n	8005832 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580e:	f7fc fd1f 	bl	8002250 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d803      	bhi.n	8005826 <HAL_SPI_Transmit+0x204>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d102      	bne.n	800582c <HAL_SPI_Transmit+0x20a>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005830:	e026      	b.n	8005880 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1cd      	bne.n	80057d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fa55 	bl	8005cf0 <SPI_EndRxTxTransaction>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e000      	b.n	8005880 <HAL_SPI_Transmit+0x25e>
  }

error:
 800587e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005890:	7ffb      	ldrb	r3, [r7, #31]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b08c      	sub	sp, #48	; 0x30
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058a8:	2301      	movs	r3, #1
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x26>
 80058bc:	2302      	movs	r3, #2
 80058be:	e18a      	b.n	8005bd6 <HAL_SPI_TransmitReceive+0x33c>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c8:	f7fc fcc2 	bl	8002250 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058de:	887b      	ldrh	r3, [r7, #2]
 80058e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d00f      	beq.n	800590a <HAL_SPI_TransmitReceive+0x70>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f0:	d107      	bne.n	8005902 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <HAL_SPI_TransmitReceive+0x68>
 80058fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d003      	beq.n	800590a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005902:	2302      	movs	r3, #2
 8005904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005908:	e15b      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_SPI_TransmitReceive+0x82>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_SPI_TransmitReceive+0x82>
 8005916:	887b      	ldrh	r3, [r7, #2]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005922:	e14e      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b04      	cmp	r3, #4
 800592e:	d003      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2205      	movs	r2, #5
 8005934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	887a      	ldrh	r2, [r7, #2]
 800594e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	887a      	ldrh	r2, [r7, #2]
 800595a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	887a      	ldrh	r2, [r7, #2]
 8005960:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d007      	beq.n	800598c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800598a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d178      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_SPI_TransmitReceive+0x10a>
 800599e:	8b7b      	ldrh	r3, [r7, #26]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d166      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	881a      	ldrh	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	1c9a      	adds	r2, r3, #2
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c8:	e053      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d11b      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x176>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HAL_SPI_TransmitReceive+0x176>
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d113      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	881a      	ldrh	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	1c9a      	adds	r2, r3, #2
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d119      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x1b8>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d014      	beq.n	8005a52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	b292      	uxth	r2, r2
 8005a34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	1c9a      	adds	r2, r3, #2
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a52:	f7fc fbfd 	bl	8002250 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d807      	bhi.n	8005a72 <HAL_SPI_TransmitReceive+0x1d8>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d003      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a70:	e0a7      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1a6      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x130>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1a1      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x130>
 8005a86:	e07c      	b.n	8005b82 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_SPI_TransmitReceive+0x1fc>
 8005a90:	8b7b      	ldrh	r3, [r7, #26]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d16b      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	7812      	ldrb	r2, [r2, #0]
 8005aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005abc:	e057      	b.n	8005b6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d11c      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x26c>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d017      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x26c>
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d114      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d119      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x2ae>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d014      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b44:	2301      	movs	r3, #1
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b48:	f7fc fb82 	bl	8002250 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d803      	bhi.n	8005b60 <HAL_SPI_TransmitReceive+0x2c6>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d102      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x2cc>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b6c:	e029      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1a2      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x224>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d19d      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f8b2 	bl	8005cf0 <SPI_EndRxTxTransaction>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b9e:	e010      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	e000      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005bc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3730      	adds	r7, #48	; 0x30
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bf0:	f7fc fb2e 	bl	8002250 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c00:	f7fc fb26 	bl	8002250 <HAL_GetTick>
 8005c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c06:	4b39      	ldr	r3, [pc, #228]	; (8005cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	015b      	lsls	r3, r3, #5
 8005c0c:	0d1b      	lsrs	r3, r3, #20
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c16:	e054      	b.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1e:	d050      	beq.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c20:	f7fc fb16 	bl	8002250 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d902      	bls.n	8005c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d13d      	bne.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d111      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c58:	d004      	beq.n	8005c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c62:	d107      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7c:	d10f      	bne.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e017      	b.n	8005ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2301      	moveq	r3, #1
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d19b      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000068 	.word	0x20000068

08005cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <SPI_EndRxTxTransaction+0x7c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <SPI_EndRxTxTransaction+0x80>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	0d5b      	lsrs	r3, r3, #21
 8005d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d0c:	fb02 f303 	mul.w	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1a:	d112      	bne.n	8005d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f7ff ff5a 	bl	8005be0 <SPI_WaitFlagStateUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d016      	beq.n	8005d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	f043 0220 	orr.w	r2, r3, #32
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e00f      	b.n	8005d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	2b80      	cmp	r3, #128	; 0x80
 8005d5a:	d0f2      	beq.n	8005d42 <SPI_EndRxTxTransaction+0x52>
 8005d5c:	e000      	b.n	8005d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d5e:	bf00      	nop
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000068 	.word	0x20000068
 8005d70:	165e9f81 	.word	0x165e9f81

08005d74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d74:	b084      	sub	sp, #16
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	f107 001c 	add.w	r0, r7, #28
 8005d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d122      	bne.n	8005dd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f001 fbee 	bl	80075a8 <USB_CoreReset>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73fb      	strb	r3, [r7, #15]
 8005dd0:	e01a      	b.n	8005e08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fbe2 	bl	80075a8 <USB_CoreReset>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
 8005dfa:	e005      	b.n	8005e08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d10b      	bne.n	8005e26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f043 0206 	orr.w	r2, r3, #6
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e32:	b004      	add	sp, #16
 8005e34:	4770      	bx	lr
	...

08005e38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d165      	bne.n	8005f18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a41      	ldr	r2, [pc, #260]	; (8005f54 <USB_SetTurnaroundTime+0x11c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d906      	bls.n	8005e62 <USB_SetTurnaroundTime+0x2a>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a40      	ldr	r2, [pc, #256]	; (8005f58 <USB_SetTurnaroundTime+0x120>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d202      	bcs.n	8005e62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e5c:	230f      	movs	r3, #15
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e062      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a3c      	ldr	r2, [pc, #240]	; (8005f58 <USB_SetTurnaroundTime+0x120>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d306      	bcc.n	8005e78 <USB_SetTurnaroundTime+0x40>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a3b      	ldr	r2, [pc, #236]	; (8005f5c <USB_SetTurnaroundTime+0x124>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d202      	bcs.n	8005e78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e72:	230e      	movs	r3, #14
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e057      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a38      	ldr	r2, [pc, #224]	; (8005f5c <USB_SetTurnaroundTime+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d306      	bcc.n	8005e8e <USB_SetTurnaroundTime+0x56>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a37      	ldr	r2, [pc, #220]	; (8005f60 <USB_SetTurnaroundTime+0x128>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d202      	bcs.n	8005e8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e88:	230d      	movs	r3, #13
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e04c      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a33      	ldr	r2, [pc, #204]	; (8005f60 <USB_SetTurnaroundTime+0x128>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d306      	bcc.n	8005ea4 <USB_SetTurnaroundTime+0x6c>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4a32      	ldr	r2, [pc, #200]	; (8005f64 <USB_SetTurnaroundTime+0x12c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d802      	bhi.n	8005ea4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e041      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a2f      	ldr	r2, [pc, #188]	; (8005f64 <USB_SetTurnaroundTime+0x12c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d906      	bls.n	8005eba <USB_SetTurnaroundTime+0x82>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4a2e      	ldr	r2, [pc, #184]	; (8005f68 <USB_SetTurnaroundTime+0x130>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d802      	bhi.n	8005eba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005eb4:	230b      	movs	r3, #11
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e036      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <USB_SetTurnaroundTime+0x130>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d906      	bls.n	8005ed0 <USB_SetTurnaroundTime+0x98>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <USB_SetTurnaroundTime+0x134>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d802      	bhi.n	8005ed0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005eca:	230a      	movs	r3, #10
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e02b      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <USB_SetTurnaroundTime+0x134>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d906      	bls.n	8005ee6 <USB_SetTurnaroundTime+0xae>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <USB_SetTurnaroundTime+0x138>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d202      	bcs.n	8005ee6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ee0:	2309      	movs	r3, #9
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e020      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <USB_SetTurnaroundTime+0x138>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d306      	bcc.n	8005efc <USB_SetTurnaroundTime+0xc4>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <USB_SetTurnaroundTime+0x13c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d802      	bhi.n	8005efc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e015      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <USB_SetTurnaroundTime+0x13c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d906      	bls.n	8005f12 <USB_SetTurnaroundTime+0xda>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <USB_SetTurnaroundTime+0x140>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d202      	bcs.n	8005f12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f0c:	2307      	movs	r3, #7
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e00a      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f12:	2306      	movs	r3, #6
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e007      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f1e:	2309      	movs	r3, #9
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e001      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f24:	2309      	movs	r3, #9
 8005f26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	00d8acbf 	.word	0x00d8acbf
 8005f58:	00e4e1c0 	.word	0x00e4e1c0
 8005f5c:	00f42400 	.word	0x00f42400
 8005f60:	01067380 	.word	0x01067380
 8005f64:	011a499f 	.word	0x011a499f
 8005f68:	01312cff 	.word	0x01312cff
 8005f6c:	014ca43f 	.word	0x014ca43f
 8005f70:	016e3600 	.word	0x016e3600
 8005f74:	01a6ab1f 	.word	0x01a6ab1f
 8005f78:	01e84800 	.word	0x01e84800

08005f7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f043 0201 	orr.w	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f023 0201 	bic.w	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d115      	bne.n	800600e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fee:	2001      	movs	r0, #1
 8005ff0:	f7fc f93a 	bl	8002268 <HAL_Delay>
      ms++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fa45 	bl	800748a <USB_GetMode>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d01e      	beq.n	8006044 <USB_SetCurrentMode+0x84>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b31      	cmp	r3, #49	; 0x31
 800600a:	d9f0      	bls.n	8005fee <USB_SetCurrentMode+0x2e>
 800600c:	e01a      	b.n	8006044 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d115      	bne.n	8006040 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006020:	2001      	movs	r0, #1
 8006022:	f7fc f921 	bl	8002268 <HAL_Delay>
      ms++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fa2c 	bl	800748a <USB_GetMode>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <USB_SetCurrentMode+0x84>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b31      	cmp	r3, #49	; 0x31
 800603c:	d9f0      	bls.n	8006020 <USB_SetCurrentMode+0x60>
 800603e:	e001      	b.n	8006044 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e005      	b.n	8006050 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b32      	cmp	r3, #50	; 0x32
 8006048:	d101      	bne.n	800604e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006058:	b084      	sub	sp, #16
 800605a:	b580      	push	{r7, lr}
 800605c:	b086      	sub	sp, #24
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e009      	b.n	800608c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3340      	adds	r3, #64	; 0x40
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	2200      	movs	r2, #0
 8006084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3301      	adds	r3, #1
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b0e      	cmp	r3, #14
 8006090:	d9f2      	bls.n	8006078 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11c      	bne.n	80060d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38
 80060d0:	e00b      	b.n	80060ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060f0:	461a      	mov	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fc:	4619      	mov	r1, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	461a      	mov	r2, r3
 8006106:	680b      	ldr	r3, [r1, #0]
 8006108:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10c      	bne.n	800612a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006116:	2100      	movs	r1, #0
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f965 	bl	80063e8 <USB_SetDevSpeed>
 800611e:	e008      	b.n	8006132 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006120:	2101      	movs	r1, #1
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f960 	bl	80063e8 <USB_SetDevSpeed>
 8006128:	e003      	b.n	8006132 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800612a:	2103      	movs	r1, #3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f95b 	bl	80063e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006132:	2110      	movs	r1, #16
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8f3 	bl	8006320 <USB_FlushTxFifo>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f91f 	bl	8006388 <USB_FlushRxFifo>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	461a      	mov	r2, r3
 800615c:	2300      	movs	r3, #0
 800615e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	461a      	mov	r2, r3
 8006168:	2300      	movs	r3, #0
 800616a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	461a      	mov	r2, r3
 8006174:	2300      	movs	r3, #0
 8006176:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	e043      	b.n	8006206 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006194:	d118      	bne.n	80061c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	461a      	mov	r2, r3
 80061aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	e013      	b.n	80061da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061be:	461a      	mov	r2, r3
 80061c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	e008      	b.n	80061da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	461a      	mov	r2, r3
 80061d6:	2300      	movs	r3, #0
 80061d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	461a      	mov	r2, r3
 80061e8:	2300      	movs	r3, #0
 80061ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	461a      	mov	r2, r3
 80061fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3301      	adds	r3, #1
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	429a      	cmp	r2, r3
 800620c:	d3b7      	bcc.n	800617e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e043      	b.n	800629c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800622a:	d118      	bne.n	800625e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	461a      	mov	r2, r3
 8006240:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e013      	b.n	8006270 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006254:	461a      	mov	r2, r3
 8006256:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e008      	b.n	8006270 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	461a      	mov	r2, r3
 800626c:	2300      	movs	r3, #0
 800626e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	461a      	mov	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	461a      	mov	r2, r3
 8006290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006294:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	3301      	adds	r3, #1
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d3b7      	bcc.n	8006214 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d105      	bne.n	80062d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	f043 0210 	orr.w	r2, r3, #16
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <USB_DevInit+0x2c4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f043 0208 	orr.w	r2, r3, #8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d107      	bne.n	800630c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006304:	f043 0304 	orr.w	r3, r3, #4
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006318:	b004      	add	sp, #16
 800631a:	4770      	bx	lr
 800631c:	803c3800 	.word	0x803c3800

08006320 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3301      	adds	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4a13      	ldr	r2, [pc, #76]	; (8006384 <USB_FlushTxFifo+0x64>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d901      	bls.n	8006340 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e01b      	b.n	8006378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	daf2      	bge.n	800632e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	019b      	lsls	r3, r3, #6
 8006350:	f043 0220 	orr.w	r2, r3, #32
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a08      	ldr	r2, [pc, #32]	; (8006384 <USB_FlushTxFifo+0x64>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e006      	b.n	8006378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b20      	cmp	r3, #32
 8006374:	d0f0      	beq.n	8006358 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	00030d40 	.word	0x00030d40

08006388 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a11      	ldr	r2, [pc, #68]	; (80063e4 <USB_FlushRxFifo+0x5c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e018      	b.n	80063d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	daf2      	bge.n	8006394 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2210      	movs	r2, #16
 80063b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <USB_FlushRxFifo+0x5c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d901      	bls.n	80063ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e006      	b.n	80063d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b10      	cmp	r3, #16
 80063d4:	d0f0      	beq.n	80063b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	00030d40 	.word	0x00030d40

080063e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800641a:	b480      	push	{r7}
 800641c:	b087      	sub	sp, #28
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0306 	and.w	r3, r3, #6
 8006432:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]
 800643e:	e00a      	b.n	8006456 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d002      	beq.n	800644c <USB_GetDevSpeed+0x32>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b06      	cmp	r3, #6
 800644a:	d102      	bne.n	8006452 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800644c:	2302      	movs	r3, #2
 800644e:	75fb      	strb	r3, [r7, #23]
 8006450:	e001      	b.n	8006456 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006452:	230f      	movs	r3, #15
 8006454:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d13a      	bne.n	80064f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	2101      	movs	r1, #1
 8006492:	fa01 f303 	lsl.w	r3, r1, r3
 8006496:	b29b      	uxth	r3, r3
 8006498:	68f9      	ldr	r1, [r7, #12]
 800649a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800649e:	4313      	orrs	r3, r2
 80064a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d155      	bne.n	8006564 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	059b      	lsls	r3, r3, #22
 80064da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064dc:	4313      	orrs	r3, r2
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e036      	b.n	8006564 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	2101      	movs	r1, #1
 8006508:	fa01 f303 	lsl.w	r3, r1, r3
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006514:	4313      	orrs	r3, r2
 8006516:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11a      	bne.n	8006564 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800654a:	430b      	orrs	r3, r1
 800654c:	4313      	orrs	r3, r2
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d161      	bne.n	8006654 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a6:	d11f      	bne.n	80065e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	2101      	movs	r1, #1
 80065fa:	fa01 f303 	lsl.w	r3, r1, r3
 80065fe:	b29b      	uxth	r3, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	68f9      	ldr	r1, [r7, #12]
 8006604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006608:	4013      	ands	r3, r2
 800660a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	2101      	movs	r1, #1
 800661e:	fa01 f303 	lsl.w	r3, r1, r3
 8006622:	b29b      	uxth	r3, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800662c:	4013      	ands	r3, r2
 800662e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	0159      	lsls	r1, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	440b      	add	r3, r1
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	4619      	mov	r1, r3
 800664c:	4b35      	ldr	r3, [pc, #212]	; (8006724 <USB_DeactivateEndpoint+0x1b0>)
 800664e:	4013      	ands	r3, r2
 8006650:	600b      	str	r3, [r1, #0]
 8006652:	e060      	b.n	8006716 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800666a:	d11f      	bne.n	80066ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006686:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800668a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	2101      	movs	r1, #1
 80066be:	fa01 f303 	lsl.w	r3, r1, r3
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	43db      	mvns	r3, r3
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066cc:	4013      	ands	r3, r2
 80066ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	2101      	movs	r1, #1
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	43db      	mvns	r3, r3
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f0:	4013      	ands	r3, r2
 80066f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	0159      	lsls	r1, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	440b      	add	r3, r1
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	4619      	mov	r1, r3
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <USB_DeactivateEndpoint+0x1b4>)
 8006712:	4013      	ands	r3, r2
 8006714:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	ec337800 	.word	0xec337800
 8006728:	eff37800 	.word	0xeff37800

0800672c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b01      	cmp	r3, #1
 800674a:	f040 815c 	bne.w	8006a06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d132      	bne.n	80067bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	440a      	add	r2, r1
 800676c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b4:	0cdb      	lsrs	r3, r3, #19
 80067b6:	04db      	lsls	r3, r3, #19
 80067b8:	6113      	str	r3, [r2, #16]
 80067ba:	e074      	b.n	80068a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d6:	0cdb      	lsrs	r3, r3, #19
 80067d8:	04db      	lsls	r3, r3, #19
 80067da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6999      	ldr	r1, [r3, #24]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	440b      	add	r3, r1
 8006818:	1e59      	subs	r1, r3, #1
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006822:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006824:	4b9d      	ldr	r3, [pc, #628]	; (8006a9c <USB_EPStartXfer+0x370>)
 8006826:	400b      	ands	r3, r1
 8006828:	69b9      	ldr	r1, [r7, #24]
 800682a:	0148      	lsls	r0, r1, #5
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	4401      	add	r1, r0
 8006830:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006834:	4313      	orrs	r3, r2
 8006836:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800684e:	69b9      	ldr	r1, [r7, #24]
 8006850:	0148      	lsls	r0, r1, #5
 8006852:	69f9      	ldr	r1, [r7, #28]
 8006854:	4401      	add	r1, r0
 8006856:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800685a:	4313      	orrs	r3, r2
 800685c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	791b      	ldrb	r3, [r3, #4]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d11f      	bne.n	80068a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006880:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006884:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d14b      	bne.n	8006944 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	461a      	mov	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	791b      	ldrb	r3, [r3, #4]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d128      	bne.n	8006922 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d110      	bne.n	8006902 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e00f      	b.n	8006922 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006920:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e133      	b.n	8006bac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	440a      	add	r2, r1
 800695a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006962:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	791b      	ldrb	r3, [r3, #4]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d015      	beq.n	8006998 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 811b 	beq.w	8006bac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	2101      	movs	r1, #1
 8006988:	fa01 f303 	lsl.w	r3, r1, r3
 800698c:	69f9      	ldr	r1, [r7, #28]
 800698e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006992:	4313      	orrs	r3, r2
 8006994:	634b      	str	r3, [r1, #52]	; 0x34
 8006996:	e109      	b.n	8006bac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d110      	bne.n	80069ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e00f      	b.n	80069ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6919      	ldr	r1, [r3, #16]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	b298      	uxth	r0, r3
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	4603      	mov	r3, r0
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fade 	bl	8006fc0 <USB_WritePacket>
 8006a04:	e0d2      	b.n	8006bac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a20:	0cdb      	lsrs	r3, r3, #19
 8006a22:	04db      	lsls	r3, r3, #19
 8006a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d126      	bne.n	8006aa0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a68:	69b9      	ldr	r1, [r7, #24]
 8006a6a:	0148      	lsls	r0, r1, #5
 8006a6c:	69f9      	ldr	r1, [r7, #28]
 8006a6e:	4401      	add	r1, r0
 8006a70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a74:	4313      	orrs	r3, r2
 8006a76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a96:	6113      	str	r3, [r2, #16]
 8006a98:	e03a      	b.n	8006b10 <USB_EPStartXfer+0x3e4>
 8006a9a:	bf00      	nop
 8006a9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	8afa      	ldrh	r2, [r7, #22]
 8006abc:	fb03 f202 	mul.w	r2, r3, r2
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	8afb      	ldrh	r3, [r7, #22]
 8006ad4:	04d9      	lsls	r1, r3, #19
 8006ad6:	4b38      	ldr	r3, [pc, #224]	; (8006bb8 <USB_EPStartXfer+0x48c>)
 8006ad8:	400b      	ands	r3, r1
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	0148      	lsls	r0, r1, #5
 8006ade:	69f9      	ldr	r1, [r7, #28]
 8006ae0:	4401      	add	r1, r0
 8006ae2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b00:	69b9      	ldr	r1, [r7, #24]
 8006b02:	0148      	lsls	r0, r1, #5
 8006b04:	69f9      	ldr	r1, [r7, #28]
 8006b06:	4401      	add	r1, r0
 8006b08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d10d      	bne.n	8006b32 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6919      	ldr	r1, [r3, #16]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2e:	460a      	mov	r2, r1
 8006b30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	791b      	ldrb	r3, [r3, #4]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d128      	bne.n	8006b8c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d110      	bne.n	8006b6c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e00f      	b.n	8006b8c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	0151      	lsls	r1, r2, #5
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	440a      	add	r2, r1
 8006ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006baa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3720      	adds	r7, #32
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	1ff80000 	.word	0x1ff80000

08006bbc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	f040 80ce 	bne.w	8006d7a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d132      	bne.n	8006c4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c44:	0cdb      	lsrs	r3, r3, #19
 8006c46:	04db      	lsls	r3, r3, #19
 8006c48:	6113      	str	r3, [r2, #16]
 8006c4a:	e04e      	b.n	8006cea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	0cdb      	lsrs	r3, r3, #19
 8006c68:	04db      	lsls	r3, r3, #19
 8006c6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c8e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d903      	bls.n	8006ca4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	691a      	ldr	r2, [r3, #16]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cda:	6939      	ldr	r1, [r7, #16]
 8006cdc:	0148      	lsls	r0, r1, #5
 8006cde:	6979      	ldr	r1, [r7, #20]
 8006ce0:	4401      	add	r1, r0
 8006ce2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d11e      	bne.n	8006d2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d009      	beq.n	8006d0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	461a      	mov	r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e097      	b.n	8006e5e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8083 	beq.w	8006e5e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	2101      	movs	r1, #1
 8006d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4313      	orrs	r3, r2
 8006d76:	634b      	str	r3, [r1, #52]	; 0x34
 8006d78:	e071      	b.n	8006e5e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d94:	0cdb      	lsrs	r3, r3, #19
 8006d96:	04db      	lsls	r3, r3, #19
 8006d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0c:	6939      	ldr	r1, [r7, #16]
 8006e0e:	0148      	lsls	r0, r1, #5
 8006e10:	6979      	ldr	r1, [r7, #20]
 8006e12:	4401      	add	r1, r0
 8006e14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10d      	bne.n	8006e3e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6919      	ldr	r1, [r3, #16]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d14a      	bne.n	8006f20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea2:	f040 8086 	bne.w	8006fb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ec8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d902      	bls.n	8006f04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
          break;
 8006f02:	e056      	b.n	8006fb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1c:	d0e7      	beq.n	8006eee <USB_EPStopXfer+0x82>
 8006f1e:	e048      	b.n	8006fb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f38:	d13b      	bne.n	8006fb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	7812      	ldrb	r2, [r2, #0]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d902      	bls.n	8006f98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
          break;
 8006f96:	e00c      	b.n	8006fb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb0:	d0e7      	beq.n	8006f82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	; 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4611      	mov	r1, r2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	460b      	mov	r3, r1
 8006fd0:	71fb      	strb	r3, [r7, #7]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d123      	bne.n	800702e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fe6:	88bb      	ldrh	r3, [r7, #4]
 8006fe8:	3303      	adds	r3, #3
 8006fea:	089b      	lsrs	r3, r3, #2
 8006fec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e018      	b.n	8007026 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	031a      	lsls	r2, r3, #12
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007000:	461a      	mov	r2, r3
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	3301      	adds	r3, #1
 800700c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	3301      	adds	r3, #1
 8007012:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	3301      	adds	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	3301      	adds	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3e2      	bcc.n	8006ff4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3724      	adds	r7, #36	; 0x24
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800703c:	b480      	push	{r7}
 800703e:	b08b      	sub	sp, #44	; 0x2c
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	089b      	lsrs	r3, r3, #2
 8007056:	b29b      	uxth	r3, r3
 8007058:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007062:	2300      	movs	r3, #0
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	e014      	b.n	8007092 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	601a      	str	r2, [r3, #0]
    pDest++;
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	3301      	adds	r3, #1
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	3301      	adds	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	3301      	adds	r3, #1
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	3301      	adds	r3, #1
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	3301      	adds	r3, #1
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	6a3a      	ldr	r2, [r7, #32]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	429a      	cmp	r2, r3
 8007098:	d3e6      	bcc.n	8007068 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800709a:	8bfb      	ldrh	r3, [r7, #30]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01e      	beq.n	80070de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070aa:	461a      	mov	r2, r3
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	701a      	strb	r2, [r3, #0]
      i++;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	3301      	adds	r3, #1
 80070ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	3301      	adds	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80070d2:	8bfb      	ldrh	r3, [r7, #30]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070d8:	8bfb      	ldrh	r3, [r7, #30]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1ea      	bne.n	80070b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	372c      	adds	r7, #44	; 0x2c
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d12c      	bne.n	8007162 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	db12      	blt.n	8007140 <USB_EPSetStall+0x54>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800713e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e02b      	b.n	80071ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	db12      	blt.n	800719a <USB_EPSetStall+0xae>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00f      	beq.n	800719a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	0151      	lsls	r1, r2, #5
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	440a      	add	r2, r1
 8007190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007198:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	0151      	lsls	r1, r2, #5
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	440a      	add	r2, r1
 80071b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	785b      	ldrb	r3, [r3, #1]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d128      	bne.n	8007236 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007202:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	791b      	ldrb	r3, [r3, #4]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d003      	beq.n	8007214 <USB_EPClearStall+0x4c>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d138      	bne.n	8007286 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	e027      	b.n	8007286 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007250:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007254:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	791b      	ldrb	r3, [r3, #4]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d003      	beq.n	8007266 <USB_EPClearStall+0x9e>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d10f      	bne.n	8007286 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007284:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80072b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80072c8:	68f9      	ldr	r1, [r7, #12]
 80072ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ce:	4313      	orrs	r3, r2
 80072d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800730e:	f023 0302 	bic.w	r3, r3, #2
 8007312:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007322:	b480      	push	{r7}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800733c:	f023 0303 	bic.w	r3, r3, #3
 8007340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007350:	f043 0302 	orr.w	r3, r3, #2
 8007354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4013      	ands	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4013      	ands	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	0c1b      	lsrs	r3, r3, #16
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	4013      	ands	r3, r2
 80073e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	b29b      	uxth	r3, r3
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4013      	ands	r3, r2
 800741e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007420:	68bb      	ldr	r3, [r7, #8]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800742e:	b480      	push	{r7}
 8007430:	b087      	sub	sp, #28
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	fa22 f303 	lsr.w	r3, r2, r3
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	b2db      	uxtb	r3, r3
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4013      	ands	r3, r2
 800747a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800747c:	68bb      	ldr	r3, [r7, #8]
}
 800747e:	4618      	mov	r0, r3
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0301 	and.w	r3, r3, #1
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074c4:	f023 0307 	bic.w	r3, r3, #7
 80074c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	460b      	mov	r3, r1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	333c      	adds	r3, #60	; 0x3c
 8007502:	3304      	adds	r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4a26      	ldr	r2, [pc, #152]	; (80075a4 <USB_EP0_OutStart+0xb8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d90a      	bls.n	8007526 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800751c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007520:	d101      	bne.n	8007526 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e037      	b.n	8007596 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752c:	461a      	mov	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007544:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007554:	f043 0318 	orr.w	r3, r3, #24
 8007558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007568:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800756c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10f      	bne.n	8007594 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	4f54300a 	.word	0x4f54300a

080075a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4a13      	ldr	r2, [pc, #76]	; (800760c <USB_CoreReset+0x64>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e01b      	b.n	80075fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	daf2      	bge.n	80075b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f043 0201 	orr.w	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <USB_CoreReset+0x64>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d901      	bls.n	80075f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e006      	b.n	80075fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d0f0      	beq.n	80075de <USB_CoreReset+0x36>

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	00030d40 	.word	0x00030d40

08007610 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007614:	4904      	ldr	r1, [pc, #16]	; (8007628 <MX_FATFS_Init+0x18>)
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <MX_FATFS_Init+0x1c>)
 8007618:	f002 f830 	bl	800967c <FATFS_LinkDriver>
 800761c:	4603      	mov	r3, r0
 800761e:	461a      	mov	r2, r3
 8007620:	4b03      	ldr	r3, [pc, #12]	; (8007630 <MX_FATFS_Init+0x20>)
 8007622:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007624:	bf00      	nop
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000468 	.word	0x20000468
 800762c:	20000074 	.word	0x20000074
 8007630:	20000464 	.word	0x20000464

08007634 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	4618      	mov	r0, r3
 8007642:	f7f9 fe91 	bl	8001368 <SD_disk_initialize>
 8007646:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	4618      	mov	r0, r3
 800765e:	f7f9 ff6f 	bl	8001540 <SD_disk_status>
 8007662:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800767c:	7bf8      	ldrb	r0, [r7, #15]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	f7f9 ff72 	bl	800156c <SD_disk_read>
 8007688:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80076a2:	7bf8      	ldrb	r0, [r7, #15]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	f7f9 ffc9 	bl	8001640 <SD_disk_write>
 80076ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	603a      	str	r2, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
 80076c4:	460b      	mov	r3, r1
 80076c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80076c8:	79b9      	ldrb	r1, [r7, #6]
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fa f83a 	bl	8001748 <SD_disk_ioctl>
 80076d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80076f0:	f003 faa8 	bl	800ac44 <USBD_static_malloc>
 80076f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	32b0      	adds	r2, #176	; 0xb0
 8007706:	2100      	movs	r1, #0
 8007708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800770c:	2302      	movs	r3, #2
 800770e:	e0d4      	b.n	80078ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007710:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007714:	2100      	movs	r1, #0
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f003 fb02 	bl	800ad20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32b0      	adds	r2, #176	; 0xb0
 8007726:	68f9      	ldr	r1, [r7, #12]
 8007728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	32b0      	adds	r2, #176	; 0xb0
 8007736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7c1b      	ldrb	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d138      	bne.n	80077ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007748:	4b5e      	ldr	r3, [pc, #376]	; (80078c4 <USBD_CDC_Init+0x1e4>)
 800774a:	7819      	ldrb	r1, [r3, #0]
 800774c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007750:	2202      	movs	r2, #2
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f003 f953 	bl	800a9fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007758:	4b5a      	ldr	r3, [pc, #360]	; (80078c4 <USBD_CDC_Init+0x1e4>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	f003 020f 	and.w	r2, r3, #15
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	3324      	adds	r3, #36	; 0x24
 800776e:	2201      	movs	r2, #1
 8007770:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007772:	4b55      	ldr	r3, [pc, #340]	; (80078c8 <USBD_CDC_Init+0x1e8>)
 8007774:	7819      	ldrb	r1, [r3, #0]
 8007776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800777a:	2202      	movs	r2, #2
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f003 f93e 	bl	800a9fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007782:	4b51      	ldr	r3, [pc, #324]	; (80078c8 <USBD_CDC_Init+0x1e8>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 020f 	and.w	r2, r3, #15
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800779a:	2201      	movs	r2, #1
 800779c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800779e:	4b4b      	ldr	r3, [pc, #300]	; (80078cc <USBD_CDC_Init+0x1ec>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	f003 020f 	and.w	r2, r3, #15
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	440b      	add	r3, r1
 80077b2:	3326      	adds	r3, #38	; 0x26
 80077b4:	2210      	movs	r2, #16
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	e035      	b.n	8007826 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077ba:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <USBD_CDC_Init+0x1e4>)
 80077bc:	7819      	ldrb	r1, [r3, #0]
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	2202      	movs	r2, #2
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f003 f91b 	bl	800a9fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077c8:	4b3e      	ldr	r3, [pc, #248]	; (80078c4 <USBD_CDC_Init+0x1e4>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 020f 	and.w	r2, r3, #15
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3324      	adds	r3, #36	; 0x24
 80077de:	2201      	movs	r2, #1
 80077e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077e2:	4b39      	ldr	r3, [pc, #228]	; (80078c8 <USBD_CDC_Init+0x1e8>)
 80077e4:	7819      	ldrb	r1, [r3, #0]
 80077e6:	2340      	movs	r3, #64	; 0x40
 80077e8:	2202      	movs	r2, #2
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f003 f907 	bl	800a9fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077f0:	4b35      	ldr	r3, [pc, #212]	; (80078c8 <USBD_CDC_Init+0x1e8>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007808:	2201      	movs	r2, #1
 800780a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800780c:	4b2f      	ldr	r3, [pc, #188]	; (80078cc <USBD_CDC_Init+0x1ec>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 020f 	and.w	r2, r3, #15
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	3326      	adds	r3, #38	; 0x26
 8007822:	2210      	movs	r2, #16
 8007824:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007826:	4b29      	ldr	r3, [pc, #164]	; (80078cc <USBD_CDC_Init+0x1ec>)
 8007828:	7819      	ldrb	r1, [r3, #0]
 800782a:	2308      	movs	r3, #8
 800782c:	2203      	movs	r2, #3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f003 f8e5 	bl	800a9fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007834:	4b25      	ldr	r3, [pc, #148]	; (80078cc <USBD_CDC_Init+0x1ec>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 020f 	and.w	r2, r3, #15
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	3324      	adds	r3, #36	; 0x24
 800784a:	2201      	movs	r2, #1
 800784c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	33b0      	adds	r3, #176	; 0xb0
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007884:	2302      	movs	r3, #2
 8007886:	e018      	b.n	80078ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7c1b      	ldrb	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007890:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <USBD_CDC_Init+0x1e8>)
 8007892:	7819      	ldrb	r1, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800789a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f003 f99c 	bl	800abdc <USBD_LL_PrepareReceive>
 80078a4:	e008      	b.n	80078b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <USBD_CDC_Init+0x1e8>)
 80078a8:	7819      	ldrb	r1, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f003 f992 	bl	800abdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	2000010f 	.word	0x2000010f
 80078c8:	20000110 	.word	0x20000110
 80078cc:	20000111 	.word	0x20000111

080078d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80078dc:	4b3a      	ldr	r3, [pc, #232]	; (80079c8 <USBD_CDC_DeInit+0xf8>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f003 f8b1 	bl	800aa4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80078e8:	4b37      	ldr	r3, [pc, #220]	; (80079c8 <USBD_CDC_DeInit+0xf8>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 020f 	and.w	r2, r3, #15
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	3324      	adds	r3, #36	; 0x24
 80078fe:	2200      	movs	r2, #0
 8007900:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007902:	4b32      	ldr	r3, [pc, #200]	; (80079cc <USBD_CDC_DeInit+0xfc>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f003 f89e 	bl	800aa4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800790e:	4b2f      	ldr	r3, [pc, #188]	; (80079cc <USBD_CDC_DeInit+0xfc>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	f003 020f 	and.w	r2, r3, #15
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007926:	2200      	movs	r2, #0
 8007928:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800792a:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <USBD_CDC_DeInit+0x100>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f003 f88a 	bl	800aa4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007936:	4b26      	ldr	r3, [pc, #152]	; (80079d0 <USBD_CDC_DeInit+0x100>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f003 020f 	and.w	r2, r3, #15
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	3324      	adds	r3, #36	; 0x24
 800794c:	2200      	movs	r2, #0
 800794e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007950:	4b1f      	ldr	r3, [pc, #124]	; (80079d0 <USBD_CDC_DeInit+0x100>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 020f 	and.w	r2, r3, #15
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	3326      	adds	r3, #38	; 0x26
 8007966:	2200      	movs	r2, #0
 8007968:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	32b0      	adds	r2, #176	; 0xb0
 8007974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01f      	beq.n	80079bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	33b0      	adds	r3, #176	; 0xb0
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32b0      	adds	r2, #176	; 0xb0
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	4618      	mov	r0, r3
 80079a0:	f003 f95e 	bl	800ac60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	32b0      	adds	r2, #176	; 0xb0
 80079ae:	2100      	movs	r1, #0
 80079b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	2000010f 	.word	0x2000010f
 80079cc:	20000110 	.word	0x20000110
 80079d0:	20000111 	.word	0x20000111

080079d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	32b0      	adds	r2, #176	; 0xb0
 80079e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e0bf      	b.n	8007b84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d050      	beq.n	8007ab2 <USBD_CDC_Setup+0xde>
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	f040 80af 	bne.w	8007b74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	88db      	ldrh	r3, [r3, #6]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d03a      	beq.n	8007a94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b25b      	sxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da1b      	bge.n	8007a60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	33b0      	adds	r3, #176	; 0xb0
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	88d2      	ldrh	r2, [r2, #6]
 8007a44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	88db      	ldrh	r3, [r3, #6]
 8007a4a:	2b07      	cmp	r3, #7
 8007a4c:	bf28      	it	cs
 8007a4e:	2307      	movcs	r3, #7
 8007a50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	89fa      	ldrh	r2, [r7, #14]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fd43 	bl	80094e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a5e:	e090      	b.n	8007b82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	785a      	ldrb	r2, [r3, #1]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b3f      	cmp	r3, #63	; 0x3f
 8007a70:	d803      	bhi.n	8007a7a <USBD_CDC_Setup+0xa6>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	e000      	b.n	8007a7c <USBD_CDC_Setup+0xa8>
 8007a7a:	2240      	movs	r2, #64	; 0x40
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007a82:	6939      	ldr	r1, [r7, #16]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fd55 	bl	800953c <USBD_CtlPrepareRx>
      break;
 8007a92:	e076      	b.n	8007b82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	33b0      	adds	r3, #176	; 0xb0
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	7850      	ldrb	r0, [r2, #1]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	4798      	blx	r3
      break;
 8007ab0:	e067      	b.n	8007b82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b0b      	cmp	r3, #11
 8007ab8:	d851      	bhi.n	8007b5e <USBD_CDC_Setup+0x18a>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_CDC_Setup+0xec>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007af1 	.word	0x08007af1
 8007ac4:	08007b6d 	.word	0x08007b6d
 8007ac8:	08007b5f 	.word	0x08007b5f
 8007acc:	08007b5f 	.word	0x08007b5f
 8007ad0:	08007b5f 	.word	0x08007b5f
 8007ad4:	08007b5f 	.word	0x08007b5f
 8007ad8:	08007b5f 	.word	0x08007b5f
 8007adc:	08007b5f 	.word	0x08007b5f
 8007ae0:	08007b5f 	.word	0x08007b5f
 8007ae4:	08007b5f 	.word	0x08007b5f
 8007ae8:	08007b1b 	.word	0x08007b1b
 8007aec:	08007b45 	.word	0x08007b45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d107      	bne.n	8007b0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007afc:	f107 030a 	add.w	r3, r7, #10
 8007b00:	2202      	movs	r2, #2
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fced 	bl	80094e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b0a:	e032      	b.n	8007b72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fc77 	bl	8009402 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b14:	2303      	movs	r3, #3
 8007b16:	75fb      	strb	r3, [r7, #23]
          break;
 8007b18:	e02b      	b.n	8007b72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d107      	bne.n	8007b36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b26:	f107 030d 	add.w	r3, r7, #13
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fcd8 	bl	80094e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b34:	e01d      	b.n	8007b72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 fc62 	bl	8009402 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	75fb      	strb	r3, [r7, #23]
          break;
 8007b42:	e016      	b.n	8007b72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d00f      	beq.n	8007b70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fc55 	bl	8009402 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b5c:	e008      	b.n	8007b70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 fc4e 	bl	8009402 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6a:	e002      	b.n	8007b72 <USBD_CDC_Setup+0x19e>
          break;
 8007b6c:	bf00      	nop
 8007b6e:	e008      	b.n	8007b82 <USBD_CDC_Setup+0x1ae>
          break;
 8007b70:	bf00      	nop
      }
      break;
 8007b72:	e006      	b.n	8007b82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fc43 	bl	8009402 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b80:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	32b0      	adds	r2, #176	; 0xb0
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e065      	b.n	8007c82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	32b0      	adds	r2, #176	; 0xb0
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	f003 020f 	and.w	r2, r3, #15
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3318      	adds	r3, #24
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d02f      	beq.n	8007c40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	f003 020f 	and.w	r2, r3, #15
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3318      	adds	r3, #24
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	78fb      	ldrb	r3, [r7, #3]
 8007bf8:	f003 010f 	and.w	r1, r3, #15
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	440b      	add	r3, r1
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4403      	add	r3, r0
 8007c08:	3348      	adds	r3, #72	; 0x48
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d112      	bne.n	8007c40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	f003 020f 	and.w	r2, r3, #15
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3318      	adds	r3, #24
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c32:	78f9      	ldrb	r1, [r7, #3]
 8007c34:	2300      	movs	r3, #0
 8007c36:	2200      	movs	r2, #0
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f002 ffae 	bl	800ab9a <USBD_LL_Transmit>
 8007c3e:	e01f      	b.n	8007c80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	33b0      	adds	r3, #176	; 0xb0
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d010      	beq.n	8007c80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	33b0      	adds	r3, #176	; 0xb0
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	32b0      	adds	r2, #176	; 0xb0
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	32b0      	adds	r2, #176	; 0xb0
 8007cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e01a      	b.n	8007cf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f002 ffac 	bl	800ac1e <USBD_LL_GetRxDataSize>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	33b0      	adds	r3, #176	; 0xb0
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cec:	4611      	mov	r1, r2
 8007cee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	32b0      	adds	r2, #176	; 0xb0
 8007d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e025      	b.n	8007d68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	33b0      	adds	r3, #176	; 0xb0
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01a      	beq.n	8007d66 <USBD_CDC_EP0_RxReady+0x6c>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d36:	2bff      	cmp	r3, #255	; 0xff
 8007d38:	d015      	beq.n	8007d66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	33b0      	adds	r3, #176	; 0xb0
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007d52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	22ff      	movs	r2, #255	; 0xff
 8007d62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d78:	2182      	movs	r1, #130	; 0x82
 8007d7a:	4818      	ldr	r0, [pc, #96]	; (8007ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d7c:	f000 fd09 	bl	8008792 <USBD_GetEpDesc>
 8007d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d82:	2101      	movs	r1, #1
 8007d84:	4815      	ldr	r0, [pc, #84]	; (8007ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d86:	f000 fd04 	bl	8008792 <USBD_GetEpDesc>
 8007d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d8c:	2181      	movs	r1, #129	; 0x81
 8007d8e:	4813      	ldr	r0, [pc, #76]	; (8007ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d90:	f000 fcff 	bl	8008792 <USBD_GetEpDesc>
 8007d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2210      	movs	r2, #16
 8007da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d006      	beq.n	8007db6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db0:	711a      	strb	r2, [r3, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d006      	beq.n	8007dca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dc4:	711a      	strb	r2, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2243      	movs	r2, #67	; 0x43
 8007dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dd0:	4b02      	ldr	r3, [pc, #8]	; (8007ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200000cc 	.word	0x200000cc

08007de0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007de8:	2182      	movs	r1, #130	; 0x82
 8007dea:	4818      	ldr	r0, [pc, #96]	; (8007e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007dec:	f000 fcd1 	bl	8008792 <USBD_GetEpDesc>
 8007df0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007df2:	2101      	movs	r1, #1
 8007df4:	4815      	ldr	r0, [pc, #84]	; (8007e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007df6:	f000 fccc 	bl	8008792 <USBD_GetEpDesc>
 8007dfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007dfc:	2181      	movs	r1, #129	; 0x81
 8007dfe:	4813      	ldr	r0, [pc, #76]	; (8007e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e00:	f000 fcc7 	bl	8008792 <USBD_GetEpDesc>
 8007e04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d006      	beq.n	8007e26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	711a      	strb	r2, [r3, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f042 0202 	orr.w	r2, r2, #2
 8007e24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	711a      	strb	r2, [r3, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f042 0202 	orr.w	r2, r2, #2
 8007e38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2243      	movs	r2, #67	; 0x43
 8007e3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200000cc 	.word	0x200000cc

08007e50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e58:	2182      	movs	r1, #130	; 0x82
 8007e5a:	4818      	ldr	r0, [pc, #96]	; (8007ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e5c:	f000 fc99 	bl	8008792 <USBD_GetEpDesc>
 8007e60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e62:	2101      	movs	r1, #1
 8007e64:	4815      	ldr	r0, [pc, #84]	; (8007ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e66:	f000 fc94 	bl	8008792 <USBD_GetEpDesc>
 8007e6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e6c:	2181      	movs	r1, #129	; 0x81
 8007e6e:	4813      	ldr	r0, [pc, #76]	; (8007ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e70:	f000 fc8f 	bl	8008792 <USBD_GetEpDesc>
 8007e74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2210      	movs	r2, #16
 8007e80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d006      	beq.n	8007e96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e90:	711a      	strb	r2, [r3, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d006      	beq.n	8007eaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ea4:	711a      	strb	r2, [r3, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2243      	movs	r2, #67	; 0x43
 8007eae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007eb0:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200000cc 	.word	0x200000cc

08007ec0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	220a      	movs	r2, #10
 8007ecc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ece:	4b03      	ldr	r3, [pc, #12]	; (8007edc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	20000088 	.word	0x20000088

08007ee0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e009      	b.n	8007f08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	33b0      	adds	r3, #176	; 0xb0
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	32b0      	adds	r2, #176	; 0xb0
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e008      	b.n	8007f4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	32b0      	adds	r2, #176	; 0xb0
 8007f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e004      	b.n	8007f86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	32b0      	adds	r2, #176	; 0xb0
 8007fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007faa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	32b0      	adds	r2, #176	; 0xb0
 8007fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e018      	b.n	8007ff4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7c1b      	ldrb	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fca:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <USBD_CDC_ReceivePacket+0x68>)
 8007fcc:	7819      	ldrb	r1, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f002 fdff 	bl	800abdc <USBD_LL_PrepareReceive>
 8007fde:	e008      	b.n	8007ff2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <USBD_CDC_ReceivePacket+0x68>)
 8007fe2:	7819      	ldrb	r1, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fea:	2340      	movs	r3, #64	; 0x40
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f002 fdf5 	bl	800abdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20000110 	.word	0x20000110

08008000 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4613      	mov	r3, r2
 800800c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	e01f      	b.n	8008058 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	79fa      	ldrb	r2, [r7, #7]
 800804a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f002 fc6f 	bl	800a930 <USBD_LL_Init>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	e025      	b.n	80080c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	32ae      	adds	r2, #174	; 0xae
 800808a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00f      	beq.n	80080b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	32ae      	adds	r2, #174	; 0xae
 800809e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	f107 020e 	add.w	r2, r7, #14
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	4602      	mov	r2, r0
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f002 fc77 	bl	800a9c8 <USBD_LL_Start>
 80080da:	4603      	mov	r3, r0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	78fa      	ldrb	r2, [r7, #3]
 800811e:	4611      	mov	r1, r2
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	78fa      	ldrb	r2, [r7, #3]
 800814c:	4611      	mov	r1, r2
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	4618      	mov	r0, r3
 800817a:	f001 f908 	bl	800938e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800818c:	461a      	mov	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d01a      	beq.n	80081d8 <USBD_LL_SetupStage+0x72>
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d822      	bhi.n	80081ec <USBD_LL_SetupStage+0x86>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <USBD_LL_SetupStage+0x4a>
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d00a      	beq.n	80081c4 <USBD_LL_SetupStage+0x5e>
 80081ae:	e01d      	b.n	80081ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fb5f 	bl	800887c <USBD_StdDevReq>
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]
      break;
 80081c2:	e020      	b.n	8008206 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fbc7 	bl	8008960 <USBD_StdItfReq>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
      break;
 80081d6:	e016      	b.n	8008206 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc29 	bl	8008a38 <USBD_StdEPReq>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ea:	e00c      	b.n	8008206 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f002 fc44 	bl	800aa88 <USBD_LL_StallEP>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
      break;
 8008204:	bf00      	nop
  }

  return ret;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	460b      	mov	r3, r1
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d16e      	bne.n	8008306 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800822e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008236:	2b03      	cmp	r3, #3
 8008238:	f040 8098 	bne.w	800836c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d913      	bls.n	8008270 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	1ad2      	subs	r2, r2, r3
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	4293      	cmp	r3, r2
 8008260:	bf28      	it	cs
 8008262:	4613      	movcs	r3, r2
 8008264:	461a      	mov	r2, r3
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f001 f984 	bl	8009576 <USBD_CtlContinueRx>
 800826e:	e07d      	b.n	800836c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008276:	f003 031f 	and.w	r3, r3, #31
 800827a:	2b02      	cmp	r3, #2
 800827c:	d014      	beq.n	80082a8 <USBD_LL_DataOutStage+0x98>
 800827e:	2b02      	cmp	r3, #2
 8008280:	d81d      	bhi.n	80082be <USBD_LL_DataOutStage+0xae>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <USBD_LL_DataOutStage+0x7c>
 8008286:	2b01      	cmp	r3, #1
 8008288:	d003      	beq.n	8008292 <USBD_LL_DataOutStage+0x82>
 800828a:	e018      	b.n	80082be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	75bb      	strb	r3, [r7, #22]
            break;
 8008290:	e018      	b.n	80082c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008298:	b2db      	uxtb	r3, r3
 800829a:	4619      	mov	r1, r3
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fa5e 	bl	800875e <USBD_CoreFindIF>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75bb      	strb	r3, [r7, #22]
            break;
 80082a6:	e00d      	b.n	80082c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	4619      	mov	r1, r3
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fa60 	bl	8008778 <USBD_CoreFindEP>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75bb      	strb	r3, [r7, #22]
            break;
 80082bc:	e002      	b.n	80082c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	75bb      	strb	r3, [r7, #22]
            break;
 80082c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80082c4:	7dbb      	ldrb	r3, [r7, #22]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d119      	bne.n	80082fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d113      	bne.n	80082fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80082d6:	7dba      	ldrb	r2, [r7, #22]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	32ae      	adds	r2, #174	; 0xae
 80082dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80082e6:	7dba      	ldrb	r2, [r7, #22]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80082ee:	7dba      	ldrb	r2, [r7, #22]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	32ae      	adds	r2, #174	; 0xae
 80082f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f001 f94a 	bl	8009598 <USBD_CtlSendStatus>
 8008304:	e032      	b.n	800836c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830c:	b2db      	uxtb	r3, r3
 800830e:	4619      	mov	r1, r3
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fa31 	bl	8008778 <USBD_CoreFindEP>
 8008316:	4603      	mov	r3, r0
 8008318:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800831a:	7dbb      	ldrb	r3, [r7, #22]
 800831c:	2bff      	cmp	r3, #255	; 0xff
 800831e:	d025      	beq.n	800836c <USBD_LL_DataOutStage+0x15c>
 8008320:	7dbb      	ldrb	r3, [r7, #22]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d122      	bne.n	800836c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b03      	cmp	r3, #3
 8008330:	d117      	bne.n	8008362 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008332:	7dba      	ldrb	r2, [r7, #22]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	32ae      	adds	r2, #174	; 0xae
 8008338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00f      	beq.n	8008362 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008342:	7dba      	ldrb	r2, [r7, #22]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800834a:	7dba      	ldrb	r2, [r7, #22]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	32ae      	adds	r2, #174	; 0xae
 8008350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	7afa      	ldrb	r2, [r7, #11]
 8008358:	4611      	mov	r1, r2
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	4798      	blx	r3
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	e000      	b.n	800836e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	460b      	mov	r3, r1
 8008380:	607a      	str	r2, [r7, #4]
 8008382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d16f      	bne.n	800846a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3314      	adds	r3, #20
 800838e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008396:	2b02      	cmp	r3, #2
 8008398:	d15a      	bne.n	8008450 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d914      	bls.n	80083d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f001 f8ac 	bl	800951a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083c2:	2300      	movs	r3, #0
 80083c4:	2200      	movs	r2, #0
 80083c6:	2100      	movs	r1, #0
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f002 fc07 	bl	800abdc <USBD_LL_PrepareReceive>
 80083ce:	e03f      	b.n	8008450 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d11c      	bne.n	8008416 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d316      	bcc.n	8008416 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d20f      	bcs.n	8008416 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083f6:	2200      	movs	r2, #0
 80083f8:	2100      	movs	r1, #0
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f001 f88d 	bl	800951a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008408:	2300      	movs	r3, #0
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f002 fbe4 	bl	800abdc <USBD_LL_PrepareReceive>
 8008414:	e01c      	b.n	8008450 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b03      	cmp	r3, #3
 8008420:	d10f      	bne.n	8008442 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008442:	2180      	movs	r1, #128	; 0x80
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f002 fb1f 	bl	800aa88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f001 f8b7 	bl	80095be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d03a      	beq.n	80084d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f7ff fe42 	bl	80080e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008468:	e032      	b.n	80084d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f97f 	bl	8008778 <USBD_CoreFindEP>
 800847a:	4603      	mov	r3, r0
 800847c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	2bff      	cmp	r3, #255	; 0xff
 8008482:	d025      	beq.n	80084d0 <USBD_LL_DataInStage+0x15a>
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d122      	bne.n	80084d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b03      	cmp	r3, #3
 8008494:	d11c      	bne.n	80084d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008496:	7dfa      	ldrb	r2, [r7, #23]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	32ae      	adds	r2, #174	; 0xae
 800849c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d014      	beq.n	80084d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80084a6:	7dfa      	ldrb	r2, [r7, #23]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084ae:	7dfa      	ldrb	r2, [r7, #23]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	32ae      	adds	r2, #174	; 0xae
 80084b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	7afa      	ldrb	r2, [r7, #11]
 80084bc:	4611      	mov	r1, r2
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80084c6:	7dbb      	ldrb	r3, [r7, #22]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80084cc:	7dbb      	ldrb	r3, [r7, #22]
 80084ce:	e000      	b.n	80084d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d014      	beq.n	8008540 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00e      	beq.n	8008540 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6852      	ldr	r2, [r2, #4]
 800852e:	b2d2      	uxtb	r2, r2
 8008530:	4611      	mov	r1, r2
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800853c:	2303      	movs	r3, #3
 800853e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	2200      	movs	r2, #0
 8008544:	2100      	movs	r1, #0
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f002 fa59 	bl	800a9fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2240      	movs	r2, #64	; 0x40
 8008558:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800855c:	2340      	movs	r3, #64	; 0x40
 800855e:	2200      	movs	r2, #0
 8008560:	2180      	movs	r1, #128	; 0x80
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f002 fa4b 	bl	800a9fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2240      	movs	r2, #64	; 0x40
 8008572:	621a      	str	r2, [r3, #32]

  return ret;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2204      	movs	r2, #4
 80085b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d106      	bne.n	80085ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d110      	bne.n	8008630 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	32ae      	adds	r2, #174	; 0xae
 8008650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e01c      	b.n	8008696 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b03      	cmp	r3, #3
 8008666:	d115      	bne.n	8008694 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32ae      	adds	r2, #174	; 0xae
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	32ae      	adds	r2, #174	; 0xae
 8008686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	4611      	mov	r1, r2
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	32ae      	adds	r2, #174	; 0xae
 80086b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	e01c      	b.n	80086fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d115      	bne.n	80086f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32ae      	adds	r2, #174	; 0xae
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	32ae      	adds	r2, #174	; 0xae
 80086ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	78fa      	ldrb	r2, [r7, #3]
 80086f2:	4611      	mov	r1, r2
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00e      	beq.n	8008754 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6852      	ldr	r2, [r2, #4]
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	4611      	mov	r1, r2
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008750:	2303      	movs	r3, #3
 8008752:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800876a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008784:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d920      	bls.n	80087fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80087c2:	e013      	b.n	80087ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80087c4:	f107 030a 	add.w	r3, r7, #10
 80087c8:	4619      	mov	r1, r3
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f000 f81b 	bl	8008806 <USBD_GetNextDesc>
 80087d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d108      	bne.n	80087ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	789b      	ldrb	r3, [r3, #2]
 80087e2:	78fa      	ldrb	r2, [r7, #3]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d008      	beq.n	80087fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	885b      	ldrh	r3, [r3, #2]
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	897b      	ldrh	r3, [r7, #10]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d8e5      	bhi.n	80087c4 <USBD_GetEpDesc+0x32>
 80087f8:	e000      	b.n	80087fc <USBD_GetEpDesc+0x6a>
          break;
 80087fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80087fc:	693b      	ldr	r3, [r7, #16]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	881a      	ldrh	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	4413      	add	r3, r2
 8008820:	b29a      	uxth	r2, r3
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4413      	add	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008832:	68fb      	ldr	r3, [r7, #12]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	3301      	adds	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800885e:	8a3b      	ldrh	r3, [r7, #16]
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	b21a      	sxth	r2, r3
 8008864:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008868:	4313      	orrs	r3, r2
 800886a:	b21b      	sxth	r3, r3
 800886c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800886e:	89fb      	ldrh	r3, [r7, #14]
}
 8008870:	4618      	mov	r0, r3
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	d005      	beq.n	80088a2 <USBD_StdDevReq+0x26>
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	d857      	bhi.n	800894a <USBD_StdDevReq+0xce>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00f      	beq.n	80088be <USBD_StdDevReq+0x42>
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d153      	bne.n	800894a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	32ae      	adds	r2, #174	; 0xae
 80088ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
      break;
 80088bc:	e04a      	b.n	8008954 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	2b09      	cmp	r3, #9
 80088c4:	d83b      	bhi.n	800893e <USBD_StdDevReq+0xc2>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <USBD_StdDevReq+0x50>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008921 	.word	0x08008921
 80088d0:	08008935 	.word	0x08008935
 80088d4:	0800893f 	.word	0x0800893f
 80088d8:	0800892b 	.word	0x0800892b
 80088dc:	0800893f 	.word	0x0800893f
 80088e0:	080088ff 	.word	0x080088ff
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	0800893f 	.word	0x0800893f
 80088ec:	08008917 	.word	0x08008917
 80088f0:	08008909 	.word	0x08008909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa3c 	bl	8008d74 <USBD_GetDescriptor>
          break;
 80088fc:	e024      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fba1 	bl	8009048 <USBD_SetAddress>
          break;
 8008906:	e01f      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fbe0 	bl	80090d0 <USBD_SetConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]
          break;
 8008914:	e018      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fc83 	bl	8009224 <USBD_GetConfig>
          break;
 800891e:	e013      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fcb4 	bl	8009290 <USBD_GetStatus>
          break;
 8008928:	e00e      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fce3 	bl	80092f8 <USBD_SetFeature>
          break;
 8008932:	e009      	b.n	8008948 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fd07 	bl	800934a <USBD_ClrFeature>
          break;
 800893c:	e004      	b.n	8008948 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fd5e 	bl	8009402 <USBD_CtlError>
          break;
 8008946:	bf00      	nop
      }
      break;
 8008948:	e004      	b.n	8008954 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fd58 	bl	8009402 <USBD_CtlError>
      break;
 8008952:	bf00      	nop
  }

  return ret;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop

08008960 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008976:	2b40      	cmp	r3, #64	; 0x40
 8008978:	d005      	beq.n	8008986 <USBD_StdItfReq+0x26>
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d852      	bhi.n	8008a24 <USBD_StdItfReq+0xc4>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <USBD_StdItfReq+0x26>
 8008982:	2b20      	cmp	r3, #32
 8008984:	d14e      	bne.n	8008a24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898c:	b2db      	uxtb	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	2b02      	cmp	r3, #2
 8008992:	d840      	bhi.n	8008a16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	889b      	ldrh	r3, [r3, #4]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b01      	cmp	r3, #1
 800899c:	d836      	bhi.n	8008a0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fed9 	bl	800875e <USBD_CoreFindIF>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2bff      	cmp	r3, #255	; 0xff
 80089b4:	d01d      	beq.n	80089f2 <USBD_StdItfReq+0x92>
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11a      	bne.n	80089f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80089bc:	7bba      	ldrb	r2, [r7, #14]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	32ae      	adds	r2, #174	; 0xae
 80089c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00f      	beq.n	80089ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80089cc:	7bba      	ldrb	r2, [r7, #14]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089d4:	7bba      	ldrb	r2, [r7, #14]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32ae      	adds	r2, #174	; 0xae
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089ea:	e004      	b.n	80089f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80089ec:	2303      	movs	r3, #3
 80089ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089f0:	e001      	b.n	80089f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80089f2:	2303      	movs	r3, #3
 80089f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	88db      	ldrh	r3, [r3, #6]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d110      	bne.n	8008a20 <USBD_StdItfReq+0xc0>
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fdc7 	bl	8009598 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a0a:	e009      	b.n	8008a20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fcf7 	bl	8009402 <USBD_CtlError>
          break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fcf2 	bl	8009402 <USBD_CtlError>
          break;
 8008a1e:	e000      	b.n	8008a22 <USBD_StdItfReq+0xc2>
          break;
 8008a20:	bf00      	nop
      }
      break;
 8008a22:	e004      	b.n	8008a2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fceb 	bl	8009402 <USBD_CtlError>
      break;
 8008a2c:	bf00      	nop
  }

  return ret;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	889b      	ldrh	r3, [r3, #4]
 8008a4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	d007      	beq.n	8008a68 <USBD_StdEPReq+0x30>
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	f200 817f 	bhi.w	8008d5c <USBD_StdEPReq+0x324>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d02a      	beq.n	8008ab8 <USBD_StdEPReq+0x80>
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	f040 817a 	bne.w	8008d5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff fe83 	bl	8008778 <USBD_CoreFindEP>
 8008a72:	4603      	mov	r3, r0
 8008a74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a76:	7b7b      	ldrb	r3, [r7, #13]
 8008a78:	2bff      	cmp	r3, #255	; 0xff
 8008a7a:	f000 8174 	beq.w	8008d66 <USBD_StdEPReq+0x32e>
 8008a7e:	7b7b      	ldrb	r3, [r7, #13]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8170 	bne.w	8008d66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008a86:	7b7a      	ldrb	r2, [r7, #13]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008a8e:	7b7a      	ldrb	r2, [r7, #13]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	32ae      	adds	r2, #174	; 0xae
 8008a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8163 	beq.w	8008d66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008aa0:	7b7a      	ldrb	r2, [r7, #13]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	32ae      	adds	r2, #174	; 0xae
 8008aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ab6:	e156      	b.n	8008d66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d008      	beq.n	8008ad2 <USBD_StdEPReq+0x9a>
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	f300 8145 	bgt.w	8008d50 <USBD_StdEPReq+0x318>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 809b 	beq.w	8008c02 <USBD_StdEPReq+0x1ca>
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d03c      	beq.n	8008b4a <USBD_StdEPReq+0x112>
 8008ad0:	e13e      	b.n	8008d50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d002      	beq.n	8008ae4 <USBD_StdEPReq+0xac>
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d016      	beq.n	8008b10 <USBD_StdEPReq+0xd8>
 8008ae2:	e02c      	b.n	8008b3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00d      	beq.n	8008b06 <USBD_StdEPReq+0xce>
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b80      	cmp	r3, #128	; 0x80
 8008aee:	d00a      	beq.n	8008b06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 ffc7 	bl	800aa88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008afa:	2180      	movs	r1, #128	; 0x80
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 ffc3 	bl	800aa88 <USBD_LL_StallEP>
 8008b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b04:	e020      	b.n	8008b48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fc7a 	bl	8009402 <USBD_CtlError>
              break;
 8008b0e:	e01b      	b.n	8008b48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	885b      	ldrh	r3, [r3, #2]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10e      	bne.n	8008b36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <USBD_StdEPReq+0xfe>
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b80      	cmp	r3, #128	; 0x80
 8008b22:	d008      	beq.n	8008b36 <USBD_StdEPReq+0xfe>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	88db      	ldrh	r3, [r3, #6]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d104      	bne.n	8008b36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 ffa9 	bl	800aa88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fd2e 	bl	8009598 <USBD_CtlSendStatus>

              break;
 8008b3c:	e004      	b.n	8008b48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fc5e 	bl	8009402 <USBD_CtlError>
              break;
 8008b46:	bf00      	nop
          }
          break;
 8008b48:	e107      	b.n	8008d5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d002      	beq.n	8008b5c <USBD_StdEPReq+0x124>
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d016      	beq.n	8008b88 <USBD_StdEPReq+0x150>
 8008b5a:	e04b      	b.n	8008bf4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00d      	beq.n	8008b7e <USBD_StdEPReq+0x146>
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b80      	cmp	r3, #128	; 0x80
 8008b66:	d00a      	beq.n	8008b7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 ff8b 	bl	800aa88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 ff87 	bl	800aa88 <USBD_LL_StallEP>
 8008b7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b7c:	e040      	b.n	8008c00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fc3e 	bl	8009402 <USBD_CtlError>
              break;
 8008b86:	e03b      	b.n	8008c00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	885b      	ldrh	r3, [r3, #2]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d136      	bne.n	8008bfe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 ff91 	bl	800aac6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fcf7 	bl	8009598 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff fde2 	bl	8008778 <USBD_CoreFindEP>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bb8:	7b7b      	ldrb	r3, [r7, #13]
 8008bba:	2bff      	cmp	r3, #255	; 0xff
 8008bbc:	d01f      	beq.n	8008bfe <USBD_StdEPReq+0x1c6>
 8008bbe:	7b7b      	ldrb	r3, [r7, #13]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11c      	bne.n	8008bfe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008bc4:	7b7a      	ldrb	r2, [r7, #13]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008bcc:	7b7a      	ldrb	r2, [r7, #13]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	32ae      	adds	r2, #174	; 0xae
 8008bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d010      	beq.n	8008bfe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bdc:	7b7a      	ldrb	r2, [r7, #13]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	32ae      	adds	r2, #174	; 0xae
 8008be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	4798      	blx	r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008bf2:	e004      	b.n	8008bfe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fc03 	bl	8009402 <USBD_CtlError>
              break;
 8008bfc:	e000      	b.n	8008c00 <USBD_StdEPReq+0x1c8>
              break;
 8008bfe:	bf00      	nop
          }
          break;
 8008c00:	e0ab      	b.n	8008d5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d002      	beq.n	8008c14 <USBD_StdEPReq+0x1dc>
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d032      	beq.n	8008c78 <USBD_StdEPReq+0x240>
 8008c12:	e097      	b.n	8008d44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <USBD_StdEPReq+0x1f2>
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	2b80      	cmp	r3, #128	; 0x80
 8008c1e:	d004      	beq.n	8008c2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fbed 	bl	8009402 <USBD_CtlError>
                break;
 8008c28:	e091      	b.n	8008d4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da0b      	bge.n	8008c4a <USBD_StdEPReq+0x212>
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	3310      	adds	r3, #16
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	4413      	add	r3, r2
 8008c46:	3304      	adds	r3, #4
 8008c48:	e00b      	b.n	8008c62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	3304      	adds	r3, #4
 8008c62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fc37 	bl	80094e4 <USBD_CtlSendData>
              break;
 8008c76:	e06a      	b.n	8008d4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da11      	bge.n	8008ca4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	f003 020f 	and.w	r2, r3, #15
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	3324      	adds	r3, #36	; 0x24
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d117      	bne.n	8008cca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fbb0 	bl	8009402 <USBD_CtlError>
                  break;
 8008ca2:	e054      	b.n	8008d4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	f003 020f 	and.w	r2, r3, #15
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fb9d 	bl	8009402 <USBD_CtlError>
                  break;
 8008cc8:	e041      	b.n	8008d4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	da0b      	bge.n	8008cea <USBD_StdEPReq+0x2b2>
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	3310      	adds	r3, #16
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	e00b      	b.n	8008d02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	4413      	add	r3, r2
 8008d00:	3304      	adds	r3, #4
 8008d02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <USBD_StdEPReq+0x2d8>
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	d103      	bne.n	8008d18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e00e      	b.n	8008d36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 fef1 	bl	800ab04 <USBD_LL_IsStallEP>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e002      	b.n	8008d36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fbd1 	bl	80094e4 <USBD_CtlSendData>
              break;
 8008d42:	e004      	b.n	8008d4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fb5b 	bl	8009402 <USBD_CtlError>
              break;
 8008d4c:	bf00      	nop
          }
          break;
 8008d4e:	e004      	b.n	8008d5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fb55 	bl	8009402 <USBD_CtlError>
          break;
 8008d58:	bf00      	nop
      }
      break;
 8008d5a:	e005      	b.n	8008d68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fb4f 	bl	8009402 <USBD_CtlError>
      break;
 8008d64:	e000      	b.n	8008d68 <USBD_StdEPReq+0x330>
      break;
 8008d66:	bf00      	nop
  }

  return ret;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	0a1b      	lsrs	r3, r3, #8
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	2b06      	cmp	r3, #6
 8008d96:	f200 8128 	bhi.w	8008fea <USBD_GetDescriptor+0x276>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <USBD_GetDescriptor+0x2c>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008dbd 	.word	0x08008dbd
 8008da4:	08008dd5 	.word	0x08008dd5
 8008da8:	08008e15 	.word	0x08008e15
 8008dac:	08008feb 	.word	0x08008feb
 8008db0:	08008feb 	.word	0x08008feb
 8008db4:	08008f8b 	.word	0x08008f8b
 8008db8:	08008fb7 	.word	0x08008fb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7c12      	ldrb	r2, [r2, #16]
 8008dc8:	f107 0108 	add.w	r1, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
      break;
 8008dd2:	e112      	b.n	8008ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7c1b      	ldrb	r3, [r3, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10d      	bne.n	8008df8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f107 0208 	add.w	r2, r7, #8
 8008de8:	4610      	mov	r0, r2
 8008dea:	4798      	blx	r3
 8008dec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	2202      	movs	r2, #2
 8008df4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008df6:	e100      	b.n	8008ffa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	f107 0208 	add.w	r2, r7, #8
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
 8008e08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	2202      	movs	r2, #2
 8008e10:	701a      	strb	r2, [r3, #0]
      break;
 8008e12:	e0f2      	b.n	8008ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	885b      	ldrh	r3, [r3, #2]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	f200 80ac 	bhi.w	8008f78 <USBD_GetDescriptor+0x204>
 8008e20:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <USBD_GetDescriptor+0xb4>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e41 	.word	0x08008e41
 8008e2c:	08008e75 	.word	0x08008e75
 8008e30:	08008ea9 	.word	0x08008ea9
 8008e34:	08008edd 	.word	0x08008edd
 8008e38:	08008f11 	.word	0x08008f11
 8008e3c:	08008f45 	.word	0x08008f45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	7c12      	ldrb	r2, [r2, #16]
 8008e58:	f107 0108 	add.w	r1, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e62:	e091      	b.n	8008f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 facb 	bl	8009402 <USBD_CtlError>
            err++;
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	72fb      	strb	r3, [r7, #11]
          break;
 8008e72:	e089      	b.n	8008f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	7c12      	ldrb	r2, [r2, #16]
 8008e8c:	f107 0108 	add.w	r1, r7, #8
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
 8008e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e96:	e077      	b.n	8008f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fab1 	bl	8009402 <USBD_CtlError>
            err++;
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ea6:	e06f      	b.n	8008f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	7c12      	ldrb	r2, [r2, #16]
 8008ec0:	f107 0108 	add.w	r1, r7, #8
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eca:	e05d      	b.n	8008f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa97 	bl	8009402 <USBD_CtlError>
            err++;
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eda:	e055      	b.n	8008f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7c12      	ldrb	r2, [r2, #16]
 8008ef4:	f107 0108 	add.w	r1, r7, #8
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008efe:	e043      	b.n	8008f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa7d 	bl	8009402 <USBD_CtlError>
            err++;
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f0e:	e03b      	b.n	8008f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	f107 0108 	add.w	r1, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f32:	e029      	b.n	8008f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa63 	bl	8009402 <USBD_CtlError>
            err++;
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	72fb      	strb	r3, [r7, #11]
          break;
 8008f42:	e021      	b.n	8008f88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f66:	e00f      	b.n	8008f88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa49 	bl	8009402 <USBD_CtlError>
            err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
          break;
 8008f76:	e007      	b.n	8008f88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa41 	bl	8009402 <USBD_CtlError>
          err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008f86:	bf00      	nop
      }
      break;
 8008f88:	e037      	b.n	8008ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	7c1b      	ldrb	r3, [r3, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9a:	f107 0208 	add.w	r2, r7, #8
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	4798      	blx	r3
 8008fa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fa4:	e029      	b.n	8008ffa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fa2a 	bl	8009402 <USBD_CtlError>
        err++;
 8008fae:	7afb      	ldrb	r3, [r7, #11]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb4:	e021      	b.n	8008ffa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7c1b      	ldrb	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10d      	bne.n	8008fda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc6:	f107 0208 	add.w	r2, r7, #8
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4798      	blx	r3
 8008fce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	2207      	movs	r2, #7
 8008fd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fd8:	e00f      	b.n	8008ffa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fa10 	bl	8009402 <USBD_CtlError>
        err++;
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe8:	e007      	b.n	8008ffa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa08 	bl	8009402 <USBD_CtlError>
      err++;
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff8:	bf00      	nop
  }

  if (err != 0U)
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d11e      	bne.n	800903e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	88db      	ldrh	r3, [r3, #6]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d016      	beq.n	8009036 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009008:	893b      	ldrh	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00e      	beq.n	800902c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	88da      	ldrh	r2, [r3, #6]
 8009012:	893b      	ldrh	r3, [r7, #8]
 8009014:	4293      	cmp	r3, r2
 8009016:	bf28      	it	cs
 8009018:	4613      	movcs	r3, r2
 800901a:	b29b      	uxth	r3, r3
 800901c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800901e:	893b      	ldrh	r3, [r7, #8]
 8009020:	461a      	mov	r2, r3
 8009022:	68f9      	ldr	r1, [r7, #12]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fa5d 	bl	80094e4 <USBD_CtlSendData>
 800902a:	e009      	b.n	8009040 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f9e7 	bl	8009402 <USBD_CtlError>
 8009034:	e004      	b.n	8009040 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 faae 	bl	8009598 <USBD_CtlSendStatus>
 800903c:	e000      	b.n	8009040 <USBD_GetDescriptor+0x2cc>
    return;
 800903e:	bf00      	nop
  }
}
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop

08009048 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	889b      	ldrh	r3, [r3, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d131      	bne.n	80090be <USBD_SetAddress+0x76>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	88db      	ldrh	r3, [r3, #6]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d12d      	bne.n	80090be <USBD_SetAddress+0x76>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	2b7f      	cmp	r3, #127	; 0x7f
 8009068:	d829      	bhi.n	80090be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	885b      	ldrh	r3, [r3, #2]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009074:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b03      	cmp	r3, #3
 8009080:	d104      	bne.n	800908c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f9bc 	bl	8009402 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908a:	e01d      	b.n	80090c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7bfa      	ldrb	r2, [r7, #15]
 8009090:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 fd5f 	bl	800ab5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa7a 	bl	8009598 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b2:	e009      	b.n	80090c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090bc:	e004      	b.n	80090c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f99e 	bl	8009402 <USBD_CtlError>
  }
}
 80090c6:	bf00      	nop
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	4b4e      	ldr	r3, [pc, #312]	; (8009220 <USBD_SetConfig+0x150>)
 80090e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090e8:	4b4d      	ldr	r3, [pc, #308]	; (8009220 <USBD_SetConfig+0x150>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d905      	bls.n	80090fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f985 	bl	8009402 <USBD_CtlError>
    return USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e08c      	b.n	8009216 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d002      	beq.n	800910e <USBD_SetConfig+0x3e>
 8009108:	2b03      	cmp	r3, #3
 800910a:	d029      	beq.n	8009160 <USBD_SetConfig+0x90>
 800910c:	e075      	b.n	80091fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800910e:	4b44      	ldr	r3, [pc, #272]	; (8009220 <USBD_SetConfig+0x150>)
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d020      	beq.n	8009158 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009116:	4b42      	ldr	r3, [pc, #264]	; (8009220 <USBD_SetConfig+0x150>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009120:	4b3f      	ldr	r3, [pc, #252]	; (8009220 <USBD_SetConfig+0x150>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fe ffe7 	bl	80080fa <USBD_SetClassConfig>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d008      	beq.n	8009148 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f962 	bl	8009402 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2202      	movs	r2, #2
 8009142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009146:	e065      	b.n	8009214 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fa25 	bl	8009598 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2203      	movs	r2, #3
 8009152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009156:	e05d      	b.n	8009214 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fa1d 	bl	8009598 <USBD_CtlSendStatus>
      break;
 800915e:	e059      	b.n	8009214 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009160:	4b2f      	ldr	r3, [pc, #188]	; (8009220 <USBD_SetConfig+0x150>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d112      	bne.n	800918e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009170:	4b2b      	ldr	r3, [pc, #172]	; (8009220 <USBD_SetConfig+0x150>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800917a:	4b29      	ldr	r3, [pc, #164]	; (8009220 <USBD_SetConfig+0x150>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7fe ffd6 	bl	8008132 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa06 	bl	8009598 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800918c:	e042      	b.n	8009214 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800918e:	4b24      	ldr	r3, [pc, #144]	; (8009220 <USBD_SetConfig+0x150>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d02a      	beq.n	80091f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7fe ffc4 	bl	8008132 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091aa:	4b1d      	ldr	r3, [pc, #116]	; (8009220 <USBD_SetConfig+0x150>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091b4:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <USBD_SetConfig+0x150>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7fe ff9d 	bl	80080fa <USBD_SetClassConfig>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00f      	beq.n	80091ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f918 	bl	8009402 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7fe ffa9 	bl	8008132 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091e8:	e014      	b.n	8009214 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9d4 	bl	8009598 <USBD_CtlSendStatus>
      break;
 80091f0:	e010      	b.n	8009214 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f9d0 	bl	8009598 <USBD_CtlSendStatus>
      break;
 80091f8:	e00c      	b.n	8009214 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f900 	bl	8009402 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009202:	4b07      	ldr	r3, [pc, #28]	; (8009220 <USBD_SetConfig+0x150>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7fe ff92 	bl	8008132 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800920e:	2303      	movs	r3, #3
 8009210:	73fb      	strb	r3, [r7, #15]
      break;
 8009212:	bf00      	nop
  }

  return ret;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	2000046c 	.word	0x2000046c

08009224 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	88db      	ldrh	r3, [r3, #6]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d004      	beq.n	8009240 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f8e2 	bl	8009402 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800923e:	e023      	b.n	8009288 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b02      	cmp	r3, #2
 800924a:	dc02      	bgt.n	8009252 <USBD_GetConfig+0x2e>
 800924c:	2b00      	cmp	r3, #0
 800924e:	dc03      	bgt.n	8009258 <USBD_GetConfig+0x34>
 8009250:	e015      	b.n	800927e <USBD_GetConfig+0x5a>
 8009252:	2b03      	cmp	r3, #3
 8009254:	d00b      	beq.n	800926e <USBD_GetConfig+0x4a>
 8009256:	e012      	b.n	800927e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3308      	adds	r3, #8
 8009262:	2201      	movs	r2, #1
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f93c 	bl	80094e4 <USBD_CtlSendData>
        break;
 800926c:	e00c      	b.n	8009288 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3304      	adds	r3, #4
 8009272:	2201      	movs	r2, #1
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f934 	bl	80094e4 <USBD_CtlSendData>
        break;
 800927c:	e004      	b.n	8009288 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f8be 	bl	8009402 <USBD_CtlError>
        break;
 8009286:	bf00      	nop
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	3b01      	subs	r3, #1
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d81e      	bhi.n	80092e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	88db      	ldrh	r3, [r3, #6]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d004      	beq.n	80092ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f8a5 	bl	8009402 <USBD_CtlError>
        break;
 80092b8:	e01a      	b.n	80092f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f043 0202 	orr.w	r2, r3, #2
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	330c      	adds	r3, #12
 80092da:	2202      	movs	r2, #2
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f900 	bl	80094e4 <USBD_CtlSendData>
      break;
 80092e4:	e004      	b.n	80092f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f88a 	bl	8009402 <USBD_CtlError>
      break;
 80092ee:	bf00      	nop
  }
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	885b      	ldrh	r3, [r3, #2]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d107      	bne.n	800931a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f940 	bl	8009598 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009318:	e013      	b.n	8009342 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d10b      	bne.n	800933a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	889b      	ldrh	r3, [r3, #4]
 8009326:	0a1b      	lsrs	r3, r3, #8
 8009328:	b29b      	uxth	r3, r3
 800932a:	b2da      	uxtb	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f930 	bl	8009598 <USBD_CtlSendStatus>
}
 8009338:	e003      	b.n	8009342 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f860 	bl	8009402 <USBD_CtlError>
}
 8009342:	bf00      	nop
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b082      	sub	sp, #8
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935a:	b2db      	uxtb	r3, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	2b02      	cmp	r3, #2
 8009360:	d80b      	bhi.n	800937a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	885b      	ldrh	r3, [r3, #2]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d10c      	bne.n	8009384 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f910 	bl	8009598 <USBD_CtlSendStatus>
      }
      break;
 8009378:	e004      	b.n	8009384 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f840 	bl	8009402 <USBD_CtlError>
      break;
 8009382:	e000      	b.n	8009386 <USBD_ClrFeature+0x3c>
      break;
 8009384:	bf00      	nop
  }
}
 8009386:	bf00      	nop
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	781a      	ldrb	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3301      	adds	r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	781a      	ldrb	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3301      	adds	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff fa41 	bl	8008840 <SWAPBYTE>
 80093be:	4603      	mov	r3, r0
 80093c0:	461a      	mov	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff fa34 	bl	8008840 <SWAPBYTE>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff fa27 	bl	8008840 <SWAPBYTE>
 80093f2:	4603      	mov	r3, r0
 80093f4:	461a      	mov	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	80da      	strh	r2, [r3, #6]
}
 80093fa:	bf00      	nop
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800940c:	2180      	movs	r1, #128	; 0x80
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 fb3a 	bl	800aa88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009414:	2100      	movs	r1, #0
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 fb36 	bl	800aa88 <USBD_LL_StallEP>
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d036      	beq.n	80094a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800943e:	6938      	ldr	r0, [r7, #16]
 8009440:	f000 f836 	bl	80094b0 <USBD_GetLen>
 8009444:	4603      	mov	r3, r0
 8009446:	3301      	adds	r3, #1
 8009448:	b29b      	uxth	r3, r3
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	4413      	add	r3, r2
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	7812      	ldrb	r2, [r2, #0]
 800945c:	701a      	strb	r2, [r3, #0]
  idx++;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	3301      	adds	r3, #1
 8009462:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	4413      	add	r3, r2
 800946a:	2203      	movs	r2, #3
 800946c:	701a      	strb	r2, [r3, #0]
  idx++;
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	3301      	adds	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009474:	e013      	b.n	800949e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	4413      	add	r3, r2
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	3301      	adds	r3, #1
 8009486:	613b      	str	r3, [r7, #16]
    idx++;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	3301      	adds	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	4413      	add	r3, r2
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
    idx++;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	3301      	adds	r3, #1
 800949c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e7      	bne.n	8009476 <USBD_GetString+0x52>
 80094a6:	e000      	b.n	80094aa <USBD_GetString+0x86>
    return;
 80094a8:	bf00      	nop
  }
}
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094c0:	e005      	b.n	80094ce <USBD_GetLen+0x1e>
  {
    len++;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	3301      	adds	r3, #1
 80094c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	3301      	adds	r3, #1
 80094cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1f5      	bne.n	80094c2 <USBD_GetLen+0x12>
  }

  return len;
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	2100      	movs	r1, #0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 fb45 	bl	800ab9a <USBD_LL_Transmit>

  return USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	2100      	movs	r1, #0
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f001 fb34 	bl	800ab9a <USBD_LL_Transmit>

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2203      	movs	r2, #3
 800954c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f001 fb38 	bl	800abdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	60f8      	str	r0, [r7, #12]
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	2100      	movs	r1, #0
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f001 fb27 	bl	800abdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2204      	movs	r2, #4
 80095a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095a8:	2300      	movs	r3, #0
 80095aa:	2200      	movs	r2, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f001 faf3 	bl	800ab9a <USBD_LL_Transmit>

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2205      	movs	r2, #5
 80095ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095ce:	2300      	movs	r3, #0
 80095d0:	2200      	movs	r2, #0
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fb01 	bl	800abdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80095f2:	2301      	movs	r3, #1
 80095f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80095fa:	4b1f      	ldr	r3, [pc, #124]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 80095fc:	7a5b      	ldrb	r3, [r3, #9]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d131      	bne.n	8009668 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009604:	4b1c      	ldr	r3, [pc, #112]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 8009606:	7a5b      	ldrb	r3, [r3, #9]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	461a      	mov	r2, r3
 800960c:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 800960e:	2100      	movs	r1, #0
 8009610:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009612:	4b19      	ldr	r3, [pc, #100]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 8009614:	7a5b      	ldrb	r3, [r3, #9]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	4a17      	ldr	r2, [pc, #92]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 8009624:	7a5b      	ldrb	r3, [r3, #9]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	461a      	mov	r2, r3
 800962a:	4b13      	ldr	r3, [pc, #76]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 800962c:	4413      	add	r3, r2
 800962e:	79fa      	ldrb	r2, [r7, #7]
 8009630:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009632:	4b11      	ldr	r3, [pc, #68]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 8009634:	7a5b      	ldrb	r3, [r3, #9]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	b2d1      	uxtb	r1, r2
 800963c:	4a0e      	ldr	r2, [pc, #56]	; (8009678 <FATFS_LinkDriverEx+0x94>)
 800963e:	7251      	strb	r1, [r2, #9]
 8009640:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009642:	7dbb      	ldrb	r3, [r7, #22]
 8009644:	3330      	adds	r3, #48	; 0x30
 8009646:	b2da      	uxtb	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	3301      	adds	r3, #1
 8009650:	223a      	movs	r2, #58	; 0x3a
 8009652:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	3302      	adds	r3, #2
 8009658:	222f      	movs	r2, #47	; 0x2f
 800965a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	3303      	adds	r3, #3
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009668:	7dfb      	ldrb	r3, [r7, #23]
}
 800966a:	4618      	mov	r0, r3
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000470 	.word	0x20000470

0800967c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009686:	2200      	movs	r2, #0
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff ffaa 	bl	80095e4 <FATFS_LinkDriverEx>
 8009690:	4603      	mov	r3, r0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2203      	movs	r2, #3
 80096a6:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2203      	movs	r2, #3
 80096b2:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2203      	movs	r2, #3
 80096b8:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2203      	movs	r2, #3
 80096be:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2203      	movs	r2, #3
 80096c4:	715a      	strb	r2, [r3, #5]
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b08a      	sub	sp, #40	; 0x28
 80096d6:	af04      	add	r7, sp, #16
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	460b      	mov	r3, r1
 80096dc:	607a      	str	r2, [r7, #4]
 80096de:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	8af9      	ldrh	r1, [r7, #22]
 80096f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80096f6:	9302      	str	r3, [sp, #8]
 80096f8:	2302      	movs	r3, #2
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	f107 0314 	add.w	r3, r7, #20
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	2301      	movs	r3, #1
 8009704:	f7f9 fac2 	bl	8002c8c <HAL_I2C_Mem_Read>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10b      	bne.n	8009726 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800970e:	7d7b      	ldrb	r3, [r7, #21]
 8009710:	021b      	lsls	r3, r3, #8
 8009712:	b21a      	sxth	r2, r3
 8009714:	7d3b      	ldrb	r3, [r7, #20]
 8009716:	b21b      	sxth	r3, r3
 8009718:	4313      	orrs	r3, r2
 800971a:	b21b      	sxth	r3, r3
 800971c:	b29a      	uxth	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	801a      	strh	r2, [r3, #0]
		return true;
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <read_register16+0x56>
	} else
		return false;
 8009726:	2300      	movs	r3, #0

}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8009730:	b590      	push	{r4, r7, lr}
 8009732:	b08b      	sub	sp, #44	; 0x2c
 8009734:	af04      	add	r7, sp, #16
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	607a      	str	r2, [r7, #4]
 800973a:	461a      	mov	r2, r3
 800973c:	460b      	mov	r3, r1
 800973e:	72fb      	strb	r3, [r7, #11]
 8009740:	4613      	mov	r3, r2
 8009742:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	b29a      	uxth	r2, r3
 8009754:	7abb      	ldrb	r3, [r7, #10]
 8009756:	b29b      	uxth	r3, r3
 8009758:	8af9      	ldrh	r1, [r7, #22]
 800975a:	f241 3488 	movw	r4, #5000	; 0x1388
 800975e:	9402      	str	r4, [sp, #8]
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	2301      	movs	r3, #1
 8009768:	f7f9 fa90 	bl	8002c8c <HAL_I2C_Mem_Read>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <read_data+0x46>
		return 0;
 8009772:	2300      	movs	r3, #0
 8009774:	e000      	b.n	8009778 <read_data+0x48>
	else
		return 1;
 8009776:	2301      	movs	r3, #1

}
 8009778:	4618      	mov	r0, r3
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	bd90      	pop	{r4, r7, pc}

08009780 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	461a      	mov	r2, r3
 800978c:	2188      	movs	r1, #136	; 0x88
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff ff9f 	bl	80096d2 <read_register16>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06f      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3302      	adds	r3, #2
 800979e:	461a      	mov	r2, r3
 80097a0:	218a      	movs	r1, #138	; 0x8a
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff ff95 	bl	80096d2 <read_register16>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d065      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3304      	adds	r3, #4
 80097b2:	461a      	mov	r2, r3
 80097b4:	218c      	movs	r1, #140	; 0x8c
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff ff8b 	bl	80096d2 <read_register16>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d05b      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3306      	adds	r3, #6
 80097c6:	461a      	mov	r2, r3
 80097c8:	218e      	movs	r1, #142	; 0x8e
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff ff81 	bl	80096d2 <read_register16>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d051      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3308      	adds	r3, #8
 80097da:	461a      	mov	r2, r3
 80097dc:	2190      	movs	r1, #144	; 0x90
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7ff ff77 	bl	80096d2 <read_register16>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d047      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	330a      	adds	r3, #10
 80097ee:	461a      	mov	r2, r3
 80097f0:	2192      	movs	r1, #146	; 0x92
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ff6d 	bl	80096d2 <read_register16>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d03d      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	330c      	adds	r3, #12
 8009802:	461a      	mov	r2, r3
 8009804:	2194      	movs	r1, #148	; 0x94
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff ff63 	bl	80096d2 <read_register16>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d033      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	330e      	adds	r3, #14
 8009816:	461a      	mov	r2, r3
 8009818:	2196      	movs	r1, #150	; 0x96
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff ff59 	bl	80096d2 <read_register16>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d029      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3310      	adds	r3, #16
 800982a:	461a      	mov	r2, r3
 800982c:	2198      	movs	r1, #152	; 0x98
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff ff4f 	bl	80096d2 <read_register16>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01f      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3312      	adds	r3, #18
 800983e:	461a      	mov	r2, r3
 8009840:	219a      	movs	r1, #154	; 0x9a
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff ff45 	bl	80096d2 <read_register16>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d015      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	3314      	adds	r3, #20
 8009852:	461a      	mov	r2, r3
 8009854:	219c      	movs	r1, #156	; 0x9c
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ff3b 	bl	80096d2 <read_register16>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8009866:	461a      	mov	r2, r3
 8009868:	219e      	movs	r1, #158	; 0x9e
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff ff31 	bl	80096d2 <read_register16>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <read_calibration_data+0xfa>

		return true;
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <read_calibration_data+0xfc>
	}

	return false;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f103 0218 	add.w	r2, r3, #24
 8009892:	2301      	movs	r3, #1
 8009894:	21a1      	movs	r1, #161	; 0xa1
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff ff4a 	bl	8009730 <read_data>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d14b      	bne.n	800993a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	331a      	adds	r3, #26
 80098a6:	461a      	mov	r2, r3
 80098a8:	21e1      	movs	r1, #225	; 0xe1
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f7ff ff11 	bl	80096d2 <read_register16>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d041      	beq.n	800993a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f103 021c 	add.w	r2, r3, #28
 80098bc:	2301      	movs	r3, #1
 80098be:	21e3      	movs	r1, #227	; 0xe3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ff35 	bl	8009730 <read_data>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d136      	bne.n	800993a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80098cc:	f107 030e 	add.w	r3, r7, #14
 80098d0:	461a      	mov	r2, r3
 80098d2:	21e4      	movs	r1, #228	; 0xe4
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff fefc 	bl	80096d2 <read_register16>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d02c      	beq.n	800993a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	461a      	mov	r2, r3
 80098e6:	21e5      	movs	r1, #229	; 0xe5
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff fef2 	bl	80096d2 <read_register16>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d022      	beq.n	800993a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80098fa:	2301      	movs	r3, #1
 80098fc:	21e7      	movs	r1, #231	; 0xe7
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ff16 	bl	8009730 <read_data>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d117      	bne.n	800993a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800990a:	89fb      	ldrh	r3, [r7, #14]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	b21b      	sxth	r3, r3
 8009910:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8009914:	b21a      	sxth	r2, r3
 8009916:	89fb      	ldrh	r3, [r7, #14]
 8009918:	121b      	asrs	r3, r3, #8
 800991a:	b21b      	sxth	r3, r3
 800991c:	f003 030f 	and.w	r3, r3, #15
 8009920:	b21b      	sxth	r3, r3
 8009922:	4313      	orrs	r3, r2
 8009924:	b21a      	sxth	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800992a:	89bb      	ldrh	r3, [r7, #12]
 800992c:	091b      	lsrs	r3, r3, #4
 800992e:	b29b      	uxth	r3, r3
 8009930:	b21a      	sxth	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	841a      	strh	r2, [r3, #32]

		return true;
 8009936:	2301      	movs	r3, #1
 8009938:	e000      	b.n	800993c <read_hum_calibration_data+0xb8>
	}

	return false;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af04      	add	r7, sp, #16
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
 8009950:	4613      	mov	r3, r2
 8009952:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	b29a      	uxth	r2, r3
 8009964:	89f9      	ldrh	r1, [r7, #14]
 8009966:	f242 7310 	movw	r3, #10000	; 0x2710
 800996a:	9302      	str	r3, [sp, #8]
 800996c:	2301      	movs	r3, #1
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	1cbb      	adds	r3, r7, #2
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	2301      	movs	r3, #1
 8009976:	f7f9 f88f 	bl	8002a98 <HAL_I2C_Mem_Write>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <write_register8+0x40>
		return false;
 8009980:	2300      	movs	r3, #0
 8009982:	e000      	b.n	8009986 <write_register8+0x42>
	else
		return true;
 8009984:	2301      	movs	r3, #1
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800999c:	2b76      	cmp	r3, #118	; 0x76
 800999e:	d005      	beq.n	80099ac <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80099a4:	2b77      	cmp	r3, #119	; 0x77
 80099a6:	d001      	beq.n	80099ac <bmp280_init+0x1e>

		return false;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e099      	b.n	8009ae0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80099b2:	2301      	movs	r3, #1
 80099b4:	21d0      	movs	r1, #208	; 0xd0
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7ff feba 	bl	8009730 <read_data>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <bmp280_init+0x38>
		return false;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e08c      	b.n	8009ae0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80099cc:	2b58      	cmp	r3, #88	; 0x58
 80099ce:	d006      	beq.n	80099de <bmp280_init+0x50>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80099d6:	2b60      	cmp	r3, #96	; 0x60
 80099d8:	d001      	beq.n	80099de <bmp280_init+0x50>

		return false;
 80099da:	2300      	movs	r3, #0
 80099dc:	e080      	b.n	8009ae0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80099de:	22b6      	movs	r2, #182	; 0xb6
 80099e0:	21e0      	movs	r1, #224	; 0xe0
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff ffae 	bl	8009944 <write_register8>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <bmp280_init+0x64>
		return false;
 80099ee:	2300      	movs	r3, #0
 80099f0:	e076      	b.n	8009ae0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80099f2:	f107 020c 	add.w	r2, r7, #12
 80099f6:	2301      	movs	r3, #1
 80099f8:	21f3      	movs	r1, #243	; 0xf3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff fe98 	bl	8009730 <read_data>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f5      	bne.n	80099f2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8009a06:	7b3b      	ldrb	r3, [r7, #12]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1f0      	bne.n	80099f2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff feb5 	bl	8009780 <read_calibration_data>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f083 0301 	eor.w	r3, r3, #1
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d100      	bne.n	8009a24 <bmp280_init+0x96>
 8009a22:	e001      	b.n	8009a28 <bmp280_init+0x9a>
		return false;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e05b      	b.n	8009ae0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009a2e:	2b60      	cmp	r3, #96	; 0x60
 8009a30:	d10a      	bne.n	8009a48 <bmp280_init+0xba>
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff ff26 	bl	8009884 <read_hum_calibration_data>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f083 0301 	eor.w	r3, r3, #1
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <bmp280_init+0xba>
		return false;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e04b      	b.n	8009ae0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	795b      	ldrb	r3, [r3, #5]
 8009a4c:	015b      	lsls	r3, r3, #5
 8009a4e:	b25a      	sxtb	r2, r3
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	b25b      	sxtb	r3, r3
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	b25b      	sxtb	r3, r3
 8009a5c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	461a      	mov	r2, r3
 8009a62:	21f5      	movs	r1, #245	; 0xf5
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff ff6d 	bl	8009944 <write_register8>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <bmp280_init+0xe6>
		return false;
 8009a70:	2300      	movs	r3, #0
 8009a72:	e035      	b.n	8009ae0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d102      	bne.n	8009a82 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	78db      	ldrb	r3, [r3, #3]
 8009a86:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8009a88:	b25a      	sxtb	r2, r3
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	789b      	ldrb	r3, [r3, #2]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	b25b      	sxtb	r3, r3
 8009a92:	4313      	orrs	r3, r2
 8009a94:	b25a      	sxtb	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b25b      	sxtb	r3, r3
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8009aa0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009aa8:	2b60      	cmp	r3, #96	; 0x60
 8009aaa:	d10d      	bne.n	8009ac8 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	791b      	ldrb	r3, [r3, #4]
 8009ab0:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8009ab2:	7b7b      	ldrb	r3, [r7, #13]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	21f2      	movs	r1, #242	; 0xf2
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ff43 	bl	8009944 <write_register8>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <bmp280_init+0x13a>
			return false;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e00b      	b.n	8009ae0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	461a      	mov	r2, r3
 8009acc:	21f4      	movs	r1, #244	; 0xf4
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff ff38 	bl	8009944 <write_register8>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <bmp280_init+0x150>
		return false;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e000      	b.n	8009ae0 <bmp280_init+0x152>
	}

	return true;
 8009ade:	2301      	movs	r3, #1
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	10da      	asrs	r2, r3, #3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8009b0a:	12db      	asrs	r3, r3, #11
 8009b0c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	111b      	asrs	r3, r3, #4
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	8812      	ldrh	r2, [r2, #0]
 8009b16:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	1112      	asrs	r2, r2, #4
 8009b1c:	68f9      	ldr	r1, [r7, #12]
 8009b1e:	8809      	ldrh	r1, [r1, #0]
 8009b20:	1a52      	subs	r2, r2, r1
 8009b22:	fb02 f303 	mul.w	r3, r2, r3
 8009b26:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009b2e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8009b32:	139b      	asrs	r3, r3, #14
 8009b34:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	441a      	add	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	3380      	adds	r3, #128	; 0x80
 8009b4c:	121b      	asrs	r3, r3, #8
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8009b5a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b5e:	b0cc      	sub	sp, #304	; 0x130
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8009b66:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8009b6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8009b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b72:	17da      	asrs	r2, r3, #31
 8009b74:	461c      	mov	r4, r3
 8009b76:	4615      	mov	r5, r2
 8009b78:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8009b7c:	f145 3bff 	adc.w	fp, r5, #4294967295
 8009b80:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8009b84:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b8c:	fb03 f102 	mul.w	r1, r3, r2
 8009b90:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b98:	fb02 f303 	mul.w	r3, r2, r3
 8009b9c:	18ca      	adds	r2, r1, r3
 8009b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ba2:	fba3 8903 	umull	r8, r9, r3, r3
 8009ba6:	eb02 0309 	add.w	r3, r2, r9
 8009baa:	4699      	mov	r9, r3
 8009bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009bb4:	b21b      	sxth	r3, r3
 8009bb6:	17da      	asrs	r2, r3, #31
 8009bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009bc0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	fb03 f209 	mul.w	r2, r3, r9
 8009bca:	460b      	mov	r3, r1
 8009bcc:	fb08 f303 	mul.w	r3, r8, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	fba8 1202 	umull	r1, r2, r8, r2
 8009bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009bdc:	460a      	mov	r2, r1
 8009bde:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009be2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009be6:	4413      	add	r3, r2
 8009be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bec:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8009bf0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8009bf4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009c00:	b21b      	sxth	r3, r3
 8009c02:	17da      	asrs	r2, r3, #31
 8009c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c08:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8009c0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c10:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8009c14:	462a      	mov	r2, r5
 8009c16:	fb02 f203 	mul.w	r2, r2, r3
 8009c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c1e:	4621      	mov	r1, r4
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	441a      	add	r2, r3
 8009c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	fba3 1301 	umull	r1, r3, r3, r1
 8009c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c34:	460b      	mov	r3, r1
 8009c36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3e:	18d3      	adds	r3, r2, r3
 8009c40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c44:	f04f 0000 	mov.w	r0, #0
 8009c48:	f04f 0100 	mov.w	r1, #0
 8009c4c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8009c50:	462b      	mov	r3, r5
 8009c52:	0459      	lsls	r1, r3, #17
 8009c54:	4623      	mov	r3, r4
 8009c56:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8009c5a:	4623      	mov	r3, r4
 8009c5c:	0458      	lsls	r0, r3, #17
 8009c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009c62:	1814      	adds	r4, r2, r0
 8009c64:	643c      	str	r4, [r7, #64]	; 0x40
 8009c66:	414b      	adcs	r3, r1
 8009c68:	647b      	str	r3, [r7, #68]	; 0x44
 8009c6a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8009c6e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c76:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009c7a:	b21b      	sxth	r3, r3
 8009c7c:	17da      	asrs	r2, r3, #31
 8009c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c82:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c86:	f04f 0000 	mov.w	r0, #0
 8009c8a:	f04f 0100 	mov.w	r1, #0
 8009c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c92:	00d9      	lsls	r1, r3, #3
 8009c94:	2000      	movs	r0, #0
 8009c96:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009c9a:	1814      	adds	r4, r2, r0
 8009c9c:	63bc      	str	r4, [r7, #56]	; 0x38
 8009c9e:	414b      	adcs	r3, r1
 8009ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8009ca6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8009caa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cb2:	fb03 f102 	mul.w	r1, r3, r2
 8009cb6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009cba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cbe:	fb02 f303 	mul.w	r3, r2, r3
 8009cc2:	18ca      	adds	r2, r1, r3
 8009cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cc8:	fba3 1303 	umull	r1, r3, r3, r3
 8009ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cda:	18d3      	adds	r3, r2, r3
 8009cdc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009ce8:	b21b      	sxth	r3, r3
 8009cea:	17da      	asrs	r2, r3, #31
 8009cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009cf0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009cf4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009cfe:	4642      	mov	r2, r8
 8009d00:	fb02 f203 	mul.w	r2, r2, r3
 8009d04:	464b      	mov	r3, r9
 8009d06:	4621      	mov	r1, r4
 8009d08:	fb01 f303 	mul.w	r3, r1, r3
 8009d0c:	4413      	add	r3, r2
 8009d0e:	4622      	mov	r2, r4
 8009d10:	4641      	mov	r1, r8
 8009d12:	fba2 1201 	umull	r1, r2, r2, r1
 8009d16:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009d1a:	460a      	mov	r2, r1
 8009d1c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009d20:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009d24:	4413      	add	r3, r2
 8009d26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d2a:	f04f 0000 	mov.w	r0, #0
 8009d2e:	f04f 0100 	mov.w	r1, #0
 8009d32:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8009d36:	4623      	mov	r3, r4
 8009d38:	0a18      	lsrs	r0, r3, #8
 8009d3a:	462b      	mov	r3, r5
 8009d3c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009d40:	462b      	mov	r3, r5
 8009d42:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d4c:	b21b      	sxth	r3, r3
 8009d4e:	17da      	asrs	r2, r3, #31
 8009d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d5c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8009d60:	464a      	mov	r2, r9
 8009d62:	fb02 f203 	mul.w	r2, r2, r3
 8009d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d6a:	4644      	mov	r4, r8
 8009d6c:	fb04 f303 	mul.w	r3, r4, r3
 8009d70:	441a      	add	r2, r3
 8009d72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d76:	4644      	mov	r4, r8
 8009d78:	fba3 4304 	umull	r4, r3, r3, r4
 8009d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d80:	4623      	mov	r3, r4
 8009d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009d8a:	18d3      	adds	r3, r2, r3
 8009d8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d90:	f04f 0200 	mov.w	r2, #0
 8009d94:	f04f 0300 	mov.w	r3, #0
 8009d98:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8009d9c:	464c      	mov	r4, r9
 8009d9e:	0323      	lsls	r3, r4, #12
 8009da0:	4644      	mov	r4, r8
 8009da2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8009da6:	4644      	mov	r4, r8
 8009da8:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8009daa:	1884      	adds	r4, r0, r2
 8009dac:	633c      	str	r4, [r7, #48]	; 0x30
 8009dae:	eb41 0303 	adc.w	r3, r1, r3
 8009db2:	637b      	str	r3, [r7, #52]	; 0x34
 8009db4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009db8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8009dbc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8009dc0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8009dc4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8009dc8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd0:	88db      	ldrh	r3, [r3, #6]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009dda:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009de2:	462b      	mov	r3, r5
 8009de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009de8:	4642      	mov	r2, r8
 8009dea:	fb02 f203 	mul.w	r2, r2, r3
 8009dee:	464b      	mov	r3, r9
 8009df0:	4621      	mov	r1, r4
 8009df2:	fb01 f303 	mul.w	r3, r1, r3
 8009df6:	4413      	add	r3, r2
 8009df8:	4622      	mov	r2, r4
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	fba2 1201 	umull	r1, r2, r2, r1
 8009e00:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009e04:	460a      	mov	r2, r1
 8009e06:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8009e0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e0e:	4413      	add	r3, r2
 8009e10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8009e20:	4629      	mov	r1, r5
 8009e22:	104a      	asrs	r2, r1, #1
 8009e24:	4629      	mov	r1, r5
 8009e26:	17cb      	asrs	r3, r1, #31
 8009e28:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8009e2c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8009e30:	4313      	orrs	r3, r2
 8009e32:	d101      	bne.n	8009e38 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8009e34:	2300      	movs	r3, #0
 8009e36:	e148      	b.n	800a0ca <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8009e38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e3c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8009e40:	17da      	asrs	r2, r3, #31
 8009e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e46:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009e4a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8009e4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e52:	105b      	asrs	r3, r3, #1
 8009e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e5c:	07db      	lsls	r3, r3, #31
 8009e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e62:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009e66:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	1a89      	subs	r1, r1, r2
 8009e6e:	67b9      	str	r1, [r7, #120]	; 0x78
 8009e70:	4629      	mov	r1, r5
 8009e72:	eb61 0303 	sbc.w	r3, r1, r3
 8009e76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e78:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	462b      	mov	r3, r5
 8009e80:	1891      	adds	r1, r2, r2
 8009e82:	6239      	str	r1, [r7, #32]
 8009e84:	415b      	adcs	r3, r3
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
 8009e88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	1851      	adds	r1, r2, r1
 8009e90:	61b9      	str	r1, [r7, #24]
 8009e92:	4629      	mov	r1, r5
 8009e94:	414b      	adcs	r3, r1
 8009e96:	61fb      	str	r3, [r7, #28]
 8009e98:	f04f 0200 	mov.w	r2, #0
 8009e9c:	f04f 0300 	mov.w	r3, #0
 8009ea0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	018b      	lsls	r3, r1, #6
 8009ea8:	4641      	mov	r1, r8
 8009eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009eae:	4641      	mov	r1, r8
 8009eb0:	018a      	lsls	r2, r1, #6
 8009eb2:	4641      	mov	r1, r8
 8009eb4:	1889      	adds	r1, r1, r2
 8009eb6:	6139      	str	r1, [r7, #16]
 8009eb8:	4649      	mov	r1, r9
 8009eba:	eb43 0101 	adc.w	r1, r3, r1
 8009ebe:	6179      	str	r1, [r7, #20]
 8009ec0:	f04f 0200 	mov.w	r2, #0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8009ecc:	4649      	mov	r1, r9
 8009ece:	008b      	lsls	r3, r1, #2
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ed6:	4641      	mov	r1, r8
 8009ed8:	008a      	lsls	r2, r1, #2
 8009eda:	4610      	mov	r0, r2
 8009edc:	4619      	mov	r1, r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	189b      	adds	r3, r3, r2
 8009ee4:	60bb      	str	r3, [r7, #8]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	462a      	mov	r2, r5
 8009eea:	eb42 0303 	adc.w	r3, r2, r3
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	f04f 0200 	mov.w	r2, #0
 8009ef4:	f04f 0300 	mov.w	r3, #0
 8009ef8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8009efc:	4649      	mov	r1, r9
 8009efe:	008b      	lsls	r3, r1, #2
 8009f00:	4641      	mov	r1, r8
 8009f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f06:	4641      	mov	r1, r8
 8009f08:	008a      	lsls	r2, r1, #2
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4622      	mov	r2, r4
 8009f12:	189b      	adds	r3, r3, r2
 8009f14:	673b      	str	r3, [r7, #112]	; 0x70
 8009f16:	462b      	mov	r3, r5
 8009f18:	460a      	mov	r2, r1
 8009f1a:	eb42 0303 	adc.w	r3, r2, r3
 8009f1e:	677b      	str	r3, [r7, #116]	; 0x74
 8009f20:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8009f24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009f28:	f7f6 fe96 	bl	8000c58 <__aeabi_ldivmod>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8009f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f38:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009f3c:	b21b      	sxth	r3, r3
 8009f3e:	17da      	asrs	r2, r3, #31
 8009f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f44:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8009f48:	f04f 0000 	mov.w	r0, #0
 8009f4c:	f04f 0100 	mov.w	r1, #0
 8009f50:	0b50      	lsrs	r0, r2, #13
 8009f52:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009f56:	1359      	asrs	r1, r3, #13
 8009f58:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8009f5c:	462b      	mov	r3, r5
 8009f5e:	fb00 f203 	mul.w	r2, r0, r3
 8009f62:	4623      	mov	r3, r4
 8009f64:	fb03 f301 	mul.w	r3, r3, r1
 8009f68:	4413      	add	r3, r2
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	fba2 1200 	umull	r1, r2, r2, r0
 8009f70:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f74:	460a      	mov	r2, r1
 8009f76:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8009f7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f7e:	4413      	add	r3, r2
 8009f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f84:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8009f88:	f04f 0000 	mov.w	r0, #0
 8009f8c:	f04f 0100 	mov.w	r1, #0
 8009f90:	0b50      	lsrs	r0, r2, #13
 8009f92:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009f96:	1359      	asrs	r1, r3, #13
 8009f98:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8009f9c:	462b      	mov	r3, r5
 8009f9e:	fb00 f203 	mul.w	r2, r0, r3
 8009fa2:	4623      	mov	r3, r4
 8009fa4:	fb03 f301 	mul.w	r3, r3, r1
 8009fa8:	4413      	add	r3, r2
 8009faa:	4622      	mov	r2, r4
 8009fac:	fba2 1200 	umull	r1, r2, r2, r0
 8009fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009fb4:	460a      	mov	r2, r1
 8009fb6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8009fba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	0e4a      	lsrs	r2, r1, #25
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8009fda:	4629      	mov	r1, r5
 8009fdc:	164b      	asrs	r3, r1, #25
 8009fde:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8009fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009fea:	b21b      	sxth	r3, r3
 8009fec:	17da      	asrs	r2, r3, #31
 8009fee:	663b      	str	r3, [r7, #96]	; 0x60
 8009ff0:	667a      	str	r2, [r7, #100]	; 0x64
 8009ff2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ff6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	fb02 f203 	mul.w	r2, r2, r3
 800a000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a004:	4621      	mov	r1, r4
 800a006:	fb01 f303 	mul.w	r3, r1, r3
 800a00a:	4413      	add	r3, r2
 800a00c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800a010:	4621      	mov	r1, r4
 800a012:	fba2 1201 	umull	r1, r2, r2, r1
 800a016:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800a01a:	460a      	mov	r2, r1
 800a01c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800a020:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a024:	4413      	add	r3, r2
 800a026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800a036:	4621      	mov	r1, r4
 800a038:	0cca      	lsrs	r2, r1, #19
 800a03a:	4629      	mov	r1, r5
 800a03c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800a040:	4629      	mov	r1, r5
 800a042:	14cb      	asrs	r3, r1, #19
 800a044:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800a048:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800a04c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800a050:	1884      	adds	r4, r0, r2
 800a052:	65bc      	str	r4, [r7, #88]	; 0x58
 800a054:	eb41 0303 	adc.w	r3, r1, r3
 800a058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a05a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800a05e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800a062:	4621      	mov	r1, r4
 800a064:	1889      	adds	r1, r1, r2
 800a066:	6539      	str	r1, [r7, #80]	; 0x50
 800a068:	4629      	mov	r1, r5
 800a06a:	eb43 0101 	adc.w	r1, r3, r1
 800a06e:	6579      	str	r1, [r7, #84]	; 0x54
 800a070:	f04f 0000 	mov.w	r0, #0
 800a074:	f04f 0100 	mov.w	r1, #0
 800a078:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800a07c:	4623      	mov	r3, r4
 800a07e:	0a18      	lsrs	r0, r3, #8
 800a080:	462b      	mov	r3, r5
 800a082:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800a086:	462b      	mov	r3, r5
 800a088:	1219      	asrs	r1, r3, #8
 800a08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a08e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a092:	b21b      	sxth	r3, r3
 800a094:	17da      	asrs	r2, r3, #31
 800a096:	64bb      	str	r3, [r7, #72]	; 0x48
 800a098:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a09a:	f04f 0200 	mov.w	r2, #0
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800a0a6:	464c      	mov	r4, r9
 800a0a8:	0123      	lsls	r3, r4, #4
 800a0aa:	4644      	mov	r4, r8
 800a0ac:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800a0b0:	4644      	mov	r4, r8
 800a0b2:	0122      	lsls	r2, r4, #4
 800a0b4:	1884      	adds	r4, r0, r2
 800a0b6:	603c      	str	r4, [r7, #0]
 800a0b8:	eb41 0303 	adc.w	r3, r1, r3
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a0c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800a0c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a0d6 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800a0d6:	b480      	push	{r7}
 800a0d8:	b087      	sub	sp, #28
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800a0e8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	039a      	lsls	r2, r3, #14
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800a0f4:	051b      	lsls	r3, r3, #20
 800a0f6:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800a0fe:	4619      	mov	r1, r3
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	fb01 f303 	mul.w	r3, r1, r3
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a10c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800a114:	4611      	mov	r1, r2
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	fb01 f202 	mul.w	r2, r1, r2
 800a11c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800a11e:	68f9      	ldr	r1, [r7, #12]
 800a120:	7f09      	ldrb	r1, [r1, #28]
 800a122:	4608      	mov	r0, r1
 800a124:	6979      	ldr	r1, [r7, #20]
 800a126:	fb00 f101 	mul.w	r1, r0, r1
 800a12a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800a12c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800a130:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800a134:	1292      	asrs	r2, r2, #10
 800a136:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800a13a:	68f9      	ldr	r1, [r7, #12]
 800a13c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800a140:	fb01 f202 	mul.w	r2, r1, r2
 800a144:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800a148:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
 800a14e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	13db      	asrs	r3, r3, #15
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	13d2      	asrs	r2, r2, #15
 800a158:	fb02 f303 	mul.w	r3, r2, r3
 800a15c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	7e12      	ldrb	r2, [r2, #24]
 800a162:	fb02 f303 	mul.w	r3, r2, r3
 800a166:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a174:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800a17c:	bfa8      	it	ge
 800a17e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800a182:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	131b      	asrs	r3, r3, #12
}
 800a188:	4618      	mov	r0, r3
 800a18a:	371c      	adds	r7, #28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a1a8:	2b60      	cmp	r3, #96	; 0x60
 800a1aa:	d007      	beq.n	800a1bc <bmp280_read_fixed+0x28>
		if (humidity)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <bmp280_read_fixed+0x32>
 800a1c2:	2308      	movs	r3, #8
 800a1c4:	e000      	b.n	800a1c8 <bmp280_read_fixed+0x34>
 800a1c6:	2306      	movs	r3, #6
 800a1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	f107 0218 	add.w	r2, r7, #24
 800a1d2:	21f7      	movs	r1, #247	; 0xf7
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff faab 	bl	8009730 <read_data>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <bmp280_read_fixed+0x50>
		return false;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e038      	b.n	800a256 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800a1e4:	7e3b      	ldrb	r3, [r7, #24]
 800a1e6:	031a      	lsls	r2, r3, #12
 800a1e8:	7e7b      	ldrb	r3, [r7, #25]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	7eba      	ldrb	r2, [r7, #26]
 800a1f0:	0912      	lsrs	r2, r2, #4
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800a1f8:	7efb      	ldrb	r3, [r7, #27]
 800a1fa:	031a      	lsls	r2, r3, #12
 800a1fc:	7f3b      	ldrb	r3, [r7, #28]
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	4313      	orrs	r3, r2
 800a202:	7f7a      	ldrb	r2, [r7, #29]
 800a204:	0912      	lsrs	r2, r2, #4
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	4313      	orrs	r3, r2
 800a20a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	461a      	mov	r2, r3
 800a212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff fc67 	bl	8009ae8 <compensate_temperature>
 800a21a:	4602      	mov	r2, r0
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	461a      	mov	r2, r3
 800a224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff fc97 	bl	8009b5a <compensate_pressure>
 800a22c:	4602      	mov	r2, r0
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00d      	beq.n	800a254 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800a238:	7fbb      	ldrb	r3, [r7, #30]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	7ffa      	ldrb	r2, [r7, #31]
 800a23e:	4313      	orrs	r3, r2
 800a240:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	461a      	mov	r2, r3
 800a246:	6a39      	ldr	r1, [r7, #32]
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff ff44 	bl	800a0d6 <compensate_humidity>
 800a24e:	4602      	mov	r2, r0
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	601a      	str	r2, [r3, #0]
	}

	return true;
 800a254:	2301      	movs	r3, #1
}
 800a256:	4618      	mov	r0, r3
 800a258:	3730      	adds	r7, #48	; 0x30
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <bmp280_read_float+0x1a>
 800a274:	f107 0314 	add.w	r3, r7, #20
 800a278:	e000      	b.n	800a27c <bmp280_read_float+0x1c>
 800a27a:	2300      	movs	r3, #0
 800a27c:	f107 0218 	add.w	r2, r7, #24
 800a280:	f107 011c 	add.w	r1, r7, #28
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f7ff ff85 	bl	800a194 <bmp280_read_fixed>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d028      	beq.n	800a2e2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a29a:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a2ec <bmp280_read_float+0x8c>
 800a29e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	ee07 3a90 	vmov	s15, r3
 800a2ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2b2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800a2f0 <bmp280_read_float+0x90>
 800a2b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00b      	beq.n	800a2de <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	ee07 3a90 	vmov	s15, r3
 800a2cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2d0:	eddf 6a08 	vldr	s13, [pc, #32]	; 800a2f4 <bmp280_read_float+0x94>
 800a2d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <bmp280_read_float+0x84>
	}

	return false;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3720      	adds	r7, #32
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	42c80000 	.word	0x42c80000
 800a2f0:	43800000 	.word	0x43800000
 800a2f4:	44800000 	.word	0x44800000

0800a2f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4912      	ldr	r1, [pc, #72]	; (800a348 <MX_USB_DEVICE_Init+0x50>)
 800a300:	4812      	ldr	r0, [pc, #72]	; (800a34c <MX_USB_DEVICE_Init+0x54>)
 800a302:	f7fd fe7d 	bl	8008000 <USBD_Init>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a30c:	f7f7 fd46 	bl	8001d9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a310:	490f      	ldr	r1, [pc, #60]	; (800a350 <MX_USB_DEVICE_Init+0x58>)
 800a312:	480e      	ldr	r0, [pc, #56]	; (800a34c <MX_USB_DEVICE_Init+0x54>)
 800a314:	f7fd fea4 	bl	8008060 <USBD_RegisterClass>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a31e:	f7f7 fd3d 	bl	8001d9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a322:	490c      	ldr	r1, [pc, #48]	; (800a354 <MX_USB_DEVICE_Init+0x5c>)
 800a324:	4809      	ldr	r0, [pc, #36]	; (800a34c <MX_USB_DEVICE_Init+0x54>)
 800a326:	f7fd fddb 	bl	8007ee0 <USBD_CDC_RegisterInterface>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a330:	f7f7 fd34 	bl	8001d9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <MX_USB_DEVICE_Init+0x54>)
 800a336:	f7fd fec9 	bl	80080cc <USBD_Start>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a340:	f7f7 fd2c 	bl	8001d9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a344:	bf00      	nop
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20000128 	.word	0x20000128
 800a34c:	2000047c 	.word	0x2000047c
 800a350:	20000094 	.word	0x20000094
 800a354:	20000114 	.word	0x20000114

0800a358 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a35c:	2200      	movs	r2, #0
 800a35e:	4905      	ldr	r1, [pc, #20]	; (800a374 <CDC_Init_FS+0x1c>)
 800a360:	4805      	ldr	r0, [pc, #20]	; (800a378 <CDC_Init_FS+0x20>)
 800a362:	f7fd fdd7 	bl	8007f14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a366:	4905      	ldr	r1, [pc, #20]	; (800a37c <CDC_Init_FS+0x24>)
 800a368:	4803      	ldr	r0, [pc, #12]	; (800a378 <CDC_Init_FS+0x20>)
 800a36a:	f7fd fdf5 	bl	8007f58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a36e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a370:	4618      	mov	r0, r3
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20000f58 	.word	0x20000f58
 800a378:	2000047c 	.word	0x2000047c
 800a37c:	20000758 	.word	0x20000758

0800a380 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a384:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a386:	4618      	mov	r0, r3
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
 800a39c:	4613      	mov	r3, r2
 800a39e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	2b23      	cmp	r3, #35	; 0x23
 800a3a4:	d84a      	bhi.n	800a43c <CDC_Control_FS+0xac>
 800a3a6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <CDC_Control_FS+0x1c>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a43d 	.word	0x0800a43d
 800a3b0:	0800a43d 	.word	0x0800a43d
 800a3b4:	0800a43d 	.word	0x0800a43d
 800a3b8:	0800a43d 	.word	0x0800a43d
 800a3bc:	0800a43d 	.word	0x0800a43d
 800a3c0:	0800a43d 	.word	0x0800a43d
 800a3c4:	0800a43d 	.word	0x0800a43d
 800a3c8:	0800a43d 	.word	0x0800a43d
 800a3cc:	0800a43d 	.word	0x0800a43d
 800a3d0:	0800a43d 	.word	0x0800a43d
 800a3d4:	0800a43d 	.word	0x0800a43d
 800a3d8:	0800a43d 	.word	0x0800a43d
 800a3dc:	0800a43d 	.word	0x0800a43d
 800a3e0:	0800a43d 	.word	0x0800a43d
 800a3e4:	0800a43d 	.word	0x0800a43d
 800a3e8:	0800a43d 	.word	0x0800a43d
 800a3ec:	0800a43d 	.word	0x0800a43d
 800a3f0:	0800a43d 	.word	0x0800a43d
 800a3f4:	0800a43d 	.word	0x0800a43d
 800a3f8:	0800a43d 	.word	0x0800a43d
 800a3fc:	0800a43d 	.word	0x0800a43d
 800a400:	0800a43d 	.word	0x0800a43d
 800a404:	0800a43d 	.word	0x0800a43d
 800a408:	0800a43d 	.word	0x0800a43d
 800a40c:	0800a43d 	.word	0x0800a43d
 800a410:	0800a43d 	.word	0x0800a43d
 800a414:	0800a43d 	.word	0x0800a43d
 800a418:	0800a43d 	.word	0x0800a43d
 800a41c:	0800a43d 	.word	0x0800a43d
 800a420:	0800a43d 	.word	0x0800a43d
 800a424:	0800a43d 	.word	0x0800a43d
 800a428:	0800a43d 	.word	0x0800a43d
 800a42c:	0800a43d 	.word	0x0800a43d
 800a430:	0800a43d 	.word	0x0800a43d
 800a434:	0800a43d 	.word	0x0800a43d
 800a438:	0800a43d 	.word	0x0800a43d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a43c:	bf00      	nop
  }

  return (USBD_OK);
 800a43e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	4805      	ldr	r0, [pc, #20]	; (800a470 <CDC_Receive_FS+0x24>)
 800a45a:	f7fd fd7d 	bl	8007f58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a45e:	4804      	ldr	r0, [pc, #16]	; (800a470 <CDC_Receive_FS+0x24>)
 800a460:	f7fd fd98 	bl	8007f94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a464:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	2000047c 	.word	0x2000047c

0800a474 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a486:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
	...

0800a498 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	6039      	str	r1, [r7, #0]
 800a4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2212      	movs	r2, #18
 800a4a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4aa:	4b03      	ldr	r3, [pc, #12]	; (800a4b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	20000144 	.word	0x20000144

0800a4bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	6039      	str	r1, [r7, #0]
 800a4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4ce:	4b03      	ldr	r3, [pc, #12]	; (800a4dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20000158 	.word	0x20000158

0800a4e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d105      	bne.n	800a4fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4907      	ldr	r1, [pc, #28]	; (800a514 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4f6:	4808      	ldr	r0, [pc, #32]	; (800a518 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4f8:	f7fe ff94 	bl	8009424 <USBD_GetString>
 800a4fc:	e004      	b.n	800a508 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	4904      	ldr	r1, [pc, #16]	; (800a514 <USBD_FS_ProductStrDescriptor+0x34>)
 800a502:	4805      	ldr	r0, [pc, #20]	; (800a518 <USBD_FS_ProductStrDescriptor+0x38>)
 800a504:	f7fe ff8e 	bl	8009424 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a508:	4b02      	ldr	r3, [pc, #8]	; (800a514 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20001758 	.word	0x20001758
 800a518:	0800df64 	.word	0x0800df64

0800a51c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	4904      	ldr	r1, [pc, #16]	; (800a53c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a52c:	4804      	ldr	r0, [pc, #16]	; (800a540 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a52e:	f7fe ff79 	bl	8009424 <USBD_GetString>
  return USBD_StrDesc;
 800a532:	4b02      	ldr	r3, [pc, #8]	; (800a53c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a534:	4618      	mov	r0, r3
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20001758 	.word	0x20001758
 800a540:	0800df7c 	.word	0x0800df7c

0800a544 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	221a      	movs	r2, #26
 800a554:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a556:	f000 f843 	bl	800a5e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a55a:	4b02      	ldr	r3, [pc, #8]	; (800a564 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	2000015c 	.word	0x2000015c

0800a568 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	6039      	str	r1, [r7, #0]
 800a572:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d105      	bne.n	800a586 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	4907      	ldr	r1, [pc, #28]	; (800a59c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a57e:	4808      	ldr	r0, [pc, #32]	; (800a5a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a580:	f7fe ff50 	bl	8009424 <USBD_GetString>
 800a584:	e004      	b.n	800a590 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	4904      	ldr	r1, [pc, #16]	; (800a59c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a58a:	4805      	ldr	r0, [pc, #20]	; (800a5a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a58c:	f7fe ff4a 	bl	8009424 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a590:	4b02      	ldr	r3, [pc, #8]	; (800a59c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	20001758 	.word	0x20001758
 800a5a0:	0800df90 	.word	0x0800df90

0800a5a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	6039      	str	r1, [r7, #0]
 800a5ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	4907      	ldr	r1, [pc, #28]	; (800a5d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5ba:	4808      	ldr	r0, [pc, #32]	; (800a5dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5bc:	f7fe ff32 	bl	8009424 <USBD_GetString>
 800a5c0:	e004      	b.n	800a5cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	4904      	ldr	r1, [pc, #16]	; (800a5d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5c6:	4805      	ldr	r0, [pc, #20]	; (800a5dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5c8:	f7fe ff2c 	bl	8009424 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20001758 	.word	0x20001758
 800a5dc:	0800df9c 	.word	0x0800df9c

0800a5e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	; (800a624 <Get_SerialNum+0x44>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5ec:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <Get_SerialNum+0x48>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5f2:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <Get_SerialNum+0x4c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a606:	2208      	movs	r2, #8
 800a608:	4909      	ldr	r1, [pc, #36]	; (800a630 <Get_SerialNum+0x50>)
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 f814 	bl	800a638 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a610:	2204      	movs	r2, #4
 800a612:	4908      	ldr	r1, [pc, #32]	; (800a634 <Get_SerialNum+0x54>)
 800a614:	68b8      	ldr	r0, [r7, #8]
 800a616:	f000 f80f 	bl	800a638 <IntToUnicode>
  }
}
 800a61a:	bf00      	nop
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	1fff7a10 	.word	0x1fff7a10
 800a628:	1fff7a14 	.word	0x1fff7a14
 800a62c:	1fff7a18 	.word	0x1fff7a18
 800a630:	2000015e 	.word	0x2000015e
 800a634:	2000016e 	.word	0x2000016e

0800a638 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	4613      	mov	r3, r2
 800a644:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a64a:	2300      	movs	r3, #0
 800a64c:	75fb      	strb	r3, [r7, #23]
 800a64e:	e027      	b.n	800a6a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	0f1b      	lsrs	r3, r3, #28
 800a654:	2b09      	cmp	r3, #9
 800a656:	d80b      	bhi.n	800a670 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	0f1b      	lsrs	r3, r3, #28
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4619      	mov	r1, r3
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	440b      	add	r3, r1
 800a668:	3230      	adds	r2, #48	; 0x30
 800a66a:	b2d2      	uxtb	r2, r2
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	e00a      	b.n	800a686 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	0f1b      	lsrs	r3, r3, #28
 800a674:	b2da      	uxtb	r2, r3
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4619      	mov	r1, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	440b      	add	r3, r1
 800a680:	3237      	adds	r2, #55	; 0x37
 800a682:	b2d2      	uxtb	r2, r2
 800a684:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	011b      	lsls	r3, r3, #4
 800a68a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a68c:	7dfb      	ldrb	r3, [r7, #23]
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	3301      	adds	r3, #1
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	4413      	add	r3, r2
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
 800a69c:	3301      	adds	r3, #1
 800a69e:	75fb      	strb	r3, [r7, #23]
 800a6a0:	7dfa      	ldrb	r2, [r7, #23]
 800a6a2:	79fb      	ldrb	r3, [r7, #7]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d3d3      	bcc.n	800a650 <IntToUnicode+0x18>
  }
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08a      	sub	sp, #40	; 0x28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6c0:	f107 0314 	add.w	r3, r7, #20
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	605a      	str	r2, [r3, #4]
 800a6ca:	609a      	str	r2, [r3, #8]
 800a6cc:	60da      	str	r2, [r3, #12]
 800a6ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6d8:	d13a      	bne.n	800a750 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6da:	2300      	movs	r3, #0
 800a6dc:	613b      	str	r3, [r7, #16]
 800a6de:	4b1e      	ldr	r3, [pc, #120]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e2:	4a1d      	ldr	r2, [pc, #116]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a6e4:	f043 0301 	orr.w	r3, r3, #1
 800a6e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ea:	4b1b      	ldr	r3, [pc, #108]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	613b      	str	r3, [r7, #16]
 800a6f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a6f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a6fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a700:	2300      	movs	r3, #0
 800a702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a704:	2303      	movs	r3, #3
 800a706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a708:	230a      	movs	r3, #10
 800a70a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a70c:	f107 0314 	add.w	r3, r7, #20
 800a710:	4619      	mov	r1, r3
 800a712:	4812      	ldr	r0, [pc, #72]	; (800a75c <HAL_PCD_MspInit+0xa4>)
 800a714:	f7f7 fede 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a718:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71c:	4a0e      	ldr	r2, [pc, #56]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a722:	6353      	str	r3, [r2, #52]	; 0x34
 800a724:	2300      	movs	r3, #0
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72c:	4a0a      	ldr	r2, [pc, #40]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a72e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a732:	6453      	str	r3, [r2, #68]	; 0x44
 800a734:	4b08      	ldr	r3, [pc, #32]	; (800a758 <HAL_PCD_MspInit+0xa0>)
 800a736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	2043      	movs	r0, #67	; 0x43
 800a746:	f7f7 fe8e 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a74a:	2043      	movs	r0, #67	; 0x43
 800a74c:	f7f7 fea7 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a750:	bf00      	nop
 800a752:	3728      	adds	r7, #40	; 0x28
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	40023800 	.word	0x40023800
 800a75c:	40020000 	.word	0x40020000

0800a760 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a774:	4619      	mov	r1, r3
 800a776:	4610      	mov	r0, r2
 800a778:	f7fd fcf5 	bl	8008166 <USBD_LL_SetupStage>
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	f7fd fd2f 	bl	8008210 <USBD_LL_DataOutStage>
}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b082      	sub	sp, #8
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a7cc:	78fa      	ldrb	r2, [r7, #3]
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	440b      	add	r3, r1
 800a7da:	334c      	adds	r3, #76	; 0x4c
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	f7fd fdc8 	bl	8008376 <USBD_LL_DataInStage>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fd fefc 	bl	80085fa <USBD_LL_SOF>
}
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a812:	2301      	movs	r3, #1
 800a814:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d001      	beq.n	800a822 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a81e:	f7f7 fabd 	bl	8001d9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a828:	7bfa      	ldrb	r2, [r7, #15]
 800a82a:	4611      	mov	r1, r2
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fd fea6 	bl	800857e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fd fe4e 	bl	80084da <USBD_LL_Reset>
}
 800a83e:	bf00      	nop
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd fea1 	bl	800859e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6812      	ldr	r2, [r2, #0]
 800a86a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a86e:	f043 0301 	orr.w	r3, r3, #1
 800a872:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a87c:	4b04      	ldr	r3, [pc, #16]	; (800a890 <HAL_PCD_SuspendCallback+0x48>)
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	4a03      	ldr	r2, [pc, #12]	; (800a890 <HAL_PCD_SuspendCallback+0x48>)
 800a882:	f043 0306 	orr.w	r3, r3, #6
 800a886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a888:	bf00      	nop
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	e000ed00 	.word	0xe000ed00

0800a894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd fe91 	bl	80085ca <USBD_LL_Resume>
}
 800a8a8:	bf00      	nop
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fd fee9 	bl	800869e <USBD_LL_IsoOUTIncomplete>
}
 800a8cc:	bf00      	nop
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fd fea5 	bl	800863a <USBD_LL_IsoINIncomplete>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a906:	4618      	mov	r0, r3
 800a908:	f7fd fefb 	bl	8008702 <USBD_LL_DevConnected>
}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a922:	4618      	mov	r0, r3
 800a924:	f7fd fef8 	bl	8008718 <USBD_LL_DevDisconnected>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d13c      	bne.n	800a9ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a940:	4a20      	ldr	r2, [pc, #128]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a1e      	ldr	r2, [pc, #120]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a94c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a950:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a958:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a95a:	2204      	movs	r2, #4
 800a95c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a95e:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a960:	2202      	movs	r2, #2
 800a962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a964:	4b17      	ldr	r3, [pc, #92]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a966:	2200      	movs	r2, #0
 800a968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a96a:	4b16      	ldr	r3, [pc, #88]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a96c:	2202      	movs	r2, #2
 800a96e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a970:	4b14      	ldr	r3, [pc, #80]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a972:	2200      	movs	r2, #0
 800a974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a978:	2200      	movs	r2, #0
 800a97a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a97c:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a97e:	2200      	movs	r2, #0
 800a980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a982:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a984:	2200      	movs	r2, #0
 800a986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a988:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a98e:	480d      	ldr	r0, [pc, #52]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a990:	f7f8 fefd 	bl	800378e <HAL_PCD_Init>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a99a:	f7f7 f9ff 	bl	8001d9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a99e:	2180      	movs	r1, #128	; 0x80
 800a9a0:	4808      	ldr	r0, [pc, #32]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a9a2:	f7fa f954 	bl	8004c4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a9a6:	2240      	movs	r2, #64	; 0x40
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	4806      	ldr	r0, [pc, #24]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a9ac:	f7fa f908 	bl	8004bc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a9b0:	2280      	movs	r2, #128	; 0x80
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	4803      	ldr	r0, [pc, #12]	; (800a9c4 <USBD_LL_Init+0x94>)
 800a9b6:	f7fa f903 	bl	8004bc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20001958 	.word	0x20001958

0800a9c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7f8 fff2 	bl	80039c8 <HAL_PCD_Start>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f942 	bl	800ac74 <USBD_Get_USB_Status>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	4608      	mov	r0, r1
 800aa08:	4611      	mov	r1, r2
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	70fb      	strb	r3, [r7, #3]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70bb      	strb	r3, [r7, #2]
 800aa14:	4613      	mov	r3, r2
 800aa16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa26:	78bb      	ldrb	r3, [r7, #2]
 800aa28:	883a      	ldrh	r2, [r7, #0]
 800aa2a:	78f9      	ldrb	r1, [r7, #3]
 800aa2c:	f7f9 fcc3 	bl	80043b6 <HAL_PCD_EP_Open>
 800aa30:	4603      	mov	r3, r0
 800aa32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 f91c 	bl	800ac74 <USBD_Get_USB_Status>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa64:	78fa      	ldrb	r2, [r7, #3]
 800aa66:	4611      	mov	r1, r2
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7f9 fd0c 	bl	8004486 <HAL_PCD_EP_Close>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 f8fd 	bl	800ac74 <USBD_Get_USB_Status>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aaa2:	78fa      	ldrb	r2, [r7, #3]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f9 fde4 	bl	8004674 <HAL_PCD_EP_SetStall>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 f8de 	bl	800ac74 <USBD_Get_USB_Status>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	460b      	mov	r3, r1
 800aad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aae0:	78fa      	ldrb	r2, [r7, #3]
 800aae2:	4611      	mov	r1, r2
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7f9 fe29 	bl	800473c <HAL_PCD_EP_ClrStall>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f8bf 	bl	800ac74 <USBD_Get_USB_Status>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da0b      	bge.n	800ab38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab26:	68f9      	ldr	r1, [r7, #12]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	00db      	lsls	r3, r3, #3
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	440b      	add	r3, r1
 800ab32:	333e      	adds	r3, #62	; 0x3e
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	e00b      	b.n	800ab50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab3e:	68f9      	ldr	r1, [r7, #12]
 800ab40:	4613      	mov	r3, r2
 800ab42:	00db      	lsls	r3, r3, #3
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ab4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7f9 fbf6 	bl	800436c <HAL_PCD_SetAddress>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f874 	bl	800ac74 <USBD_Get_USB_Status>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b086      	sub	sp, #24
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
 800aba6:	460b      	mov	r3, r1
 800aba8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abb8:	7af9      	ldrb	r1, [r7, #11]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	f7f9 fd0f 	bl	80045e0 <HAL_PCD_EP_Transmit>
 800abc2:	4603      	mov	r3, r0
 800abc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 f853 	bl	800ac74 <USBD_Get_USB_Status>
 800abce:	4603      	mov	r3, r0
 800abd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	607a      	str	r2, [r7, #4]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	460b      	mov	r3, r1
 800abea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abfa:	7af9      	ldrb	r1, [r7, #11]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	f7f9 fc8b 	bl	800451a <HAL_PCD_EP_Receive>
 800ac04:	4603      	mov	r3, r0
 800ac06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 f832 	bl	800ac74 <USBD_Get_USB_Status>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac14:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b082      	sub	sp, #8
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	460b      	mov	r3, r1
 800ac28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac30:	78fa      	ldrb	r2, [r7, #3]
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7f9 fcbb 	bl	80045b0 <HAL_PCD_EP_GetRxCount>
 800ac3a:	4603      	mov	r3, r0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac4c:	4b03      	ldr	r3, [pc, #12]	; (800ac5c <USBD_static_malloc+0x18>)
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	20001e64 	.word	0x20001e64

0800ac60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]

}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d817      	bhi.n	800acb8 <USBD_Get_USB_Status+0x44>
 800ac88:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <USBD_Get_USB_Status+0x1c>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800aca1 	.word	0x0800aca1
 800ac94:	0800aca7 	.word	0x0800aca7
 800ac98:	0800acad 	.word	0x0800acad
 800ac9c:	0800acb3 	.word	0x0800acb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aca0:	2300      	movs	r3, #0
 800aca2:	73fb      	strb	r3, [r7, #15]
    break;
 800aca4:	e00b      	b.n	800acbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aca6:	2303      	movs	r3, #3
 800aca8:	73fb      	strb	r3, [r7, #15]
    break;
 800acaa:	e008      	b.n	800acbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800acac:	2301      	movs	r3, #1
 800acae:	73fb      	strb	r3, [r7, #15]
    break;
 800acb0:	e005      	b.n	800acbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acb2:	2303      	movs	r3, #3
 800acb4:	73fb      	strb	r3, [r7, #15]
    break;
 800acb6:	e002      	b.n	800acbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acb8:	2303      	movs	r3, #3
 800acba:	73fb      	strb	r3, [r7, #15]
    break;
 800acbc:	bf00      	nop
  }
  return usb_status;
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <__errno>:
 800accc:	4b01      	ldr	r3, [pc, #4]	; (800acd4 <__errno+0x8>)
 800acce:	6818      	ldr	r0, [r3, #0]
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20000178 	.word	0x20000178

0800acd8 <__libc_init_array>:
 800acd8:	b570      	push	{r4, r5, r6, lr}
 800acda:	4d0d      	ldr	r5, [pc, #52]	; (800ad10 <__libc_init_array+0x38>)
 800acdc:	4c0d      	ldr	r4, [pc, #52]	; (800ad14 <__libc_init_array+0x3c>)
 800acde:	1b64      	subs	r4, r4, r5
 800ace0:	10a4      	asrs	r4, r4, #2
 800ace2:	2600      	movs	r6, #0
 800ace4:	42a6      	cmp	r6, r4
 800ace6:	d109      	bne.n	800acfc <__libc_init_array+0x24>
 800ace8:	4d0b      	ldr	r5, [pc, #44]	; (800ad18 <__libc_init_array+0x40>)
 800acea:	4c0c      	ldr	r4, [pc, #48]	; (800ad1c <__libc_init_array+0x44>)
 800acec:	f003 f908 	bl	800df00 <_init>
 800acf0:	1b64      	subs	r4, r4, r5
 800acf2:	10a4      	asrs	r4, r4, #2
 800acf4:	2600      	movs	r6, #0
 800acf6:	42a6      	cmp	r6, r4
 800acf8:	d105      	bne.n	800ad06 <__libc_init_array+0x2e>
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad00:	4798      	blx	r3
 800ad02:	3601      	adds	r6, #1
 800ad04:	e7ee      	b.n	800ace4 <__libc_init_array+0xc>
 800ad06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad0a:	4798      	blx	r3
 800ad0c:	3601      	adds	r6, #1
 800ad0e:	e7f2      	b.n	800acf6 <__libc_init_array+0x1e>
 800ad10:	0800e3a4 	.word	0x0800e3a4
 800ad14:	0800e3a4 	.word	0x0800e3a4
 800ad18:	0800e3a4 	.word	0x0800e3a4
 800ad1c:	0800e3a8 	.word	0x0800e3a8

0800ad20 <memset>:
 800ad20:	4402      	add	r2, r0
 800ad22:	4603      	mov	r3, r0
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d100      	bne.n	800ad2a <memset+0xa>
 800ad28:	4770      	bx	lr
 800ad2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad2e:	e7f9      	b.n	800ad24 <memset+0x4>

0800ad30 <__cvt>:
 800ad30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad34:	ec55 4b10 	vmov	r4, r5, d0
 800ad38:	2d00      	cmp	r5, #0
 800ad3a:	460e      	mov	r6, r1
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	462b      	mov	r3, r5
 800ad40:	bfbb      	ittet	lt
 800ad42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad46:	461d      	movlt	r5, r3
 800ad48:	2300      	movge	r3, #0
 800ad4a:	232d      	movlt	r3, #45	; 0x2d
 800ad4c:	700b      	strb	r3, [r1, #0]
 800ad4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad54:	4691      	mov	r9, r2
 800ad56:	f023 0820 	bic.w	r8, r3, #32
 800ad5a:	bfbc      	itt	lt
 800ad5c:	4622      	movlt	r2, r4
 800ad5e:	4614      	movlt	r4, r2
 800ad60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad64:	d005      	beq.n	800ad72 <__cvt+0x42>
 800ad66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad6a:	d100      	bne.n	800ad6e <__cvt+0x3e>
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	2102      	movs	r1, #2
 800ad70:	e000      	b.n	800ad74 <__cvt+0x44>
 800ad72:	2103      	movs	r1, #3
 800ad74:	ab03      	add	r3, sp, #12
 800ad76:	9301      	str	r3, [sp, #4]
 800ad78:	ab02      	add	r3, sp, #8
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	ec45 4b10 	vmov	d0, r4, r5
 800ad80:	4653      	mov	r3, sl
 800ad82:	4632      	mov	r2, r6
 800ad84:	f000 fcec 	bl	800b760 <_dtoa_r>
 800ad88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	d102      	bne.n	800ad96 <__cvt+0x66>
 800ad90:	f019 0f01 	tst.w	r9, #1
 800ad94:	d022      	beq.n	800addc <__cvt+0xac>
 800ad96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad9a:	eb07 0906 	add.w	r9, r7, r6
 800ad9e:	d110      	bne.n	800adc2 <__cvt+0x92>
 800ada0:	783b      	ldrb	r3, [r7, #0]
 800ada2:	2b30      	cmp	r3, #48	; 0x30
 800ada4:	d10a      	bne.n	800adbc <__cvt+0x8c>
 800ada6:	2200      	movs	r2, #0
 800ada8:	2300      	movs	r3, #0
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 800adb2:	b918      	cbnz	r0, 800adbc <__cvt+0x8c>
 800adb4:	f1c6 0601 	rsb	r6, r6, #1
 800adb8:	f8ca 6000 	str.w	r6, [sl]
 800adbc:	f8da 3000 	ldr.w	r3, [sl]
 800adc0:	4499      	add	r9, r3
 800adc2:	2200      	movs	r2, #0
 800adc4:	2300      	movs	r3, #0
 800adc6:	4620      	mov	r0, r4
 800adc8:	4629      	mov	r1, r5
 800adca:	f7f5 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 800adce:	b108      	cbz	r0, 800add4 <__cvt+0xa4>
 800add0:	f8cd 900c 	str.w	r9, [sp, #12]
 800add4:	2230      	movs	r2, #48	; 0x30
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	454b      	cmp	r3, r9
 800adda:	d307      	bcc.n	800adec <__cvt+0xbc>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ade0:	1bdb      	subs	r3, r3, r7
 800ade2:	4638      	mov	r0, r7
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	b004      	add	sp, #16
 800ade8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adec:	1c59      	adds	r1, r3, #1
 800adee:	9103      	str	r1, [sp, #12]
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	e7f0      	b.n	800add6 <__cvt+0xa6>

0800adf4 <__exponent>:
 800adf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adf6:	4603      	mov	r3, r0
 800adf8:	2900      	cmp	r1, #0
 800adfa:	bfb8      	it	lt
 800adfc:	4249      	neglt	r1, r1
 800adfe:	f803 2b02 	strb.w	r2, [r3], #2
 800ae02:	bfb4      	ite	lt
 800ae04:	222d      	movlt	r2, #45	; 0x2d
 800ae06:	222b      	movge	r2, #43	; 0x2b
 800ae08:	2909      	cmp	r1, #9
 800ae0a:	7042      	strb	r2, [r0, #1]
 800ae0c:	dd2a      	ble.n	800ae64 <__exponent+0x70>
 800ae0e:	f10d 0407 	add.w	r4, sp, #7
 800ae12:	46a4      	mov	ip, r4
 800ae14:	270a      	movs	r7, #10
 800ae16:	46a6      	mov	lr, r4
 800ae18:	460a      	mov	r2, r1
 800ae1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae1e:	fb07 1516 	mls	r5, r7, r6, r1
 800ae22:	3530      	adds	r5, #48	; 0x30
 800ae24:	2a63      	cmp	r2, #99	; 0x63
 800ae26:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae2e:	4631      	mov	r1, r6
 800ae30:	dcf1      	bgt.n	800ae16 <__exponent+0x22>
 800ae32:	3130      	adds	r1, #48	; 0x30
 800ae34:	f1ae 0502 	sub.w	r5, lr, #2
 800ae38:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae3c:	1c44      	adds	r4, r0, #1
 800ae3e:	4629      	mov	r1, r5
 800ae40:	4561      	cmp	r1, ip
 800ae42:	d30a      	bcc.n	800ae5a <__exponent+0x66>
 800ae44:	f10d 0209 	add.w	r2, sp, #9
 800ae48:	eba2 020e 	sub.w	r2, r2, lr
 800ae4c:	4565      	cmp	r5, ip
 800ae4e:	bf88      	it	hi
 800ae50:	2200      	movhi	r2, #0
 800ae52:	4413      	add	r3, r2
 800ae54:	1a18      	subs	r0, r3, r0
 800ae56:	b003      	add	sp, #12
 800ae58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae62:	e7ed      	b.n	800ae40 <__exponent+0x4c>
 800ae64:	2330      	movs	r3, #48	; 0x30
 800ae66:	3130      	adds	r1, #48	; 0x30
 800ae68:	7083      	strb	r3, [r0, #2]
 800ae6a:	70c1      	strb	r1, [r0, #3]
 800ae6c:	1d03      	adds	r3, r0, #4
 800ae6e:	e7f1      	b.n	800ae54 <__exponent+0x60>

0800ae70 <_printf_float>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	ed2d 8b02 	vpush	{d8}
 800ae78:	b08d      	sub	sp, #52	; 0x34
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae80:	4616      	mov	r6, r2
 800ae82:	461f      	mov	r7, r3
 800ae84:	4605      	mov	r5, r0
 800ae86:	f001 fa59 	bl	800c33c <_localeconv_r>
 800ae8a:	f8d0 a000 	ldr.w	sl, [r0]
 800ae8e:	4650      	mov	r0, sl
 800ae90:	f7f5 f9a6 	bl	80001e0 <strlen>
 800ae94:	2300      	movs	r3, #0
 800ae96:	930a      	str	r3, [sp, #40]	; 0x28
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	9305      	str	r3, [sp, #20]
 800ae9c:	f8d8 3000 	ldr.w	r3, [r8]
 800aea0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aea4:	3307      	adds	r3, #7
 800aea6:	f023 0307 	bic.w	r3, r3, #7
 800aeaa:	f103 0208 	add.w	r2, r3, #8
 800aeae:	f8c8 2000 	str.w	r2, [r8]
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aeba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aebe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aec2:	9307      	str	r3, [sp, #28]
 800aec4:	f8cd 8018 	str.w	r8, [sp, #24]
 800aec8:	ee08 0a10 	vmov	s16, r0
 800aecc:	4b9f      	ldr	r3, [pc, #636]	; (800b14c <_printf_float+0x2dc>)
 800aece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aed2:	f04f 32ff 	mov.w	r2, #4294967295
 800aed6:	f7f5 fe31 	bl	8000b3c <__aeabi_dcmpun>
 800aeda:	bb88      	cbnz	r0, 800af40 <_printf_float+0xd0>
 800aedc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aee0:	4b9a      	ldr	r3, [pc, #616]	; (800b14c <_printf_float+0x2dc>)
 800aee2:	f04f 32ff 	mov.w	r2, #4294967295
 800aee6:	f7f5 fe0b 	bl	8000b00 <__aeabi_dcmple>
 800aeea:	bb48      	cbnz	r0, 800af40 <_printf_float+0xd0>
 800aeec:	2200      	movs	r2, #0
 800aeee:	2300      	movs	r3, #0
 800aef0:	4640      	mov	r0, r8
 800aef2:	4649      	mov	r1, r9
 800aef4:	f7f5 fdfa 	bl	8000aec <__aeabi_dcmplt>
 800aef8:	b110      	cbz	r0, 800af00 <_printf_float+0x90>
 800aefa:	232d      	movs	r3, #45	; 0x2d
 800aefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af00:	4b93      	ldr	r3, [pc, #588]	; (800b150 <_printf_float+0x2e0>)
 800af02:	4894      	ldr	r0, [pc, #592]	; (800b154 <_printf_float+0x2e4>)
 800af04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af08:	bf94      	ite	ls
 800af0a:	4698      	movls	r8, r3
 800af0c:	4680      	movhi	r8, r0
 800af0e:	2303      	movs	r3, #3
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	9b05      	ldr	r3, [sp, #20]
 800af14:	f023 0204 	bic.w	r2, r3, #4
 800af18:	6022      	str	r2, [r4, #0]
 800af1a:	f04f 0900 	mov.w	r9, #0
 800af1e:	9700      	str	r7, [sp, #0]
 800af20:	4633      	mov	r3, r6
 800af22:	aa0b      	add	r2, sp, #44	; 0x2c
 800af24:	4621      	mov	r1, r4
 800af26:	4628      	mov	r0, r5
 800af28:	f000 f9d8 	bl	800b2dc <_printf_common>
 800af2c:	3001      	adds	r0, #1
 800af2e:	f040 8090 	bne.w	800b052 <_printf_float+0x1e2>
 800af32:	f04f 30ff 	mov.w	r0, #4294967295
 800af36:	b00d      	add	sp, #52	; 0x34
 800af38:	ecbd 8b02 	vpop	{d8}
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	4642      	mov	r2, r8
 800af42:	464b      	mov	r3, r9
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	f7f5 fdf8 	bl	8000b3c <__aeabi_dcmpun>
 800af4c:	b140      	cbz	r0, 800af60 <_printf_float+0xf0>
 800af4e:	464b      	mov	r3, r9
 800af50:	2b00      	cmp	r3, #0
 800af52:	bfbc      	itt	lt
 800af54:	232d      	movlt	r3, #45	; 0x2d
 800af56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af5a:	487f      	ldr	r0, [pc, #508]	; (800b158 <_printf_float+0x2e8>)
 800af5c:	4b7f      	ldr	r3, [pc, #508]	; (800b15c <_printf_float+0x2ec>)
 800af5e:	e7d1      	b.n	800af04 <_printf_float+0x94>
 800af60:	6863      	ldr	r3, [r4, #4]
 800af62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af66:	9206      	str	r2, [sp, #24]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	d13f      	bne.n	800afec <_printf_float+0x17c>
 800af6c:	2306      	movs	r3, #6
 800af6e:	6063      	str	r3, [r4, #4]
 800af70:	9b05      	ldr	r3, [sp, #20]
 800af72:	6861      	ldr	r1, [r4, #4]
 800af74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af78:	2300      	movs	r3, #0
 800af7a:	9303      	str	r3, [sp, #12]
 800af7c:	ab0a      	add	r3, sp, #40	; 0x28
 800af7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af82:	ab09      	add	r3, sp, #36	; 0x24
 800af84:	ec49 8b10 	vmov	d0, r8, r9
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af90:	4628      	mov	r0, r5
 800af92:	f7ff fecd 	bl	800ad30 <__cvt>
 800af96:	9b06      	ldr	r3, [sp, #24]
 800af98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af9a:	2b47      	cmp	r3, #71	; 0x47
 800af9c:	4680      	mov	r8, r0
 800af9e:	d108      	bne.n	800afb2 <_printf_float+0x142>
 800afa0:	1cc8      	adds	r0, r1, #3
 800afa2:	db02      	blt.n	800afaa <_printf_float+0x13a>
 800afa4:	6863      	ldr	r3, [r4, #4]
 800afa6:	4299      	cmp	r1, r3
 800afa8:	dd41      	ble.n	800b02e <_printf_float+0x1be>
 800afaa:	f1ab 0b02 	sub.w	fp, fp, #2
 800afae:	fa5f fb8b 	uxtb.w	fp, fp
 800afb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afb6:	d820      	bhi.n	800affa <_printf_float+0x18a>
 800afb8:	3901      	subs	r1, #1
 800afba:	465a      	mov	r2, fp
 800afbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800afc0:	9109      	str	r1, [sp, #36]	; 0x24
 800afc2:	f7ff ff17 	bl	800adf4 <__exponent>
 800afc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc8:	1813      	adds	r3, r2, r0
 800afca:	2a01      	cmp	r2, #1
 800afcc:	4681      	mov	r9, r0
 800afce:	6123      	str	r3, [r4, #16]
 800afd0:	dc02      	bgt.n	800afd8 <_printf_float+0x168>
 800afd2:	6822      	ldr	r2, [r4, #0]
 800afd4:	07d2      	lsls	r2, r2, #31
 800afd6:	d501      	bpl.n	800afdc <_printf_float+0x16c>
 800afd8:	3301      	adds	r3, #1
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d09c      	beq.n	800af1e <_printf_float+0xae>
 800afe4:	232d      	movs	r3, #45	; 0x2d
 800afe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afea:	e798      	b.n	800af1e <_printf_float+0xae>
 800afec:	9a06      	ldr	r2, [sp, #24]
 800afee:	2a47      	cmp	r2, #71	; 0x47
 800aff0:	d1be      	bne.n	800af70 <_printf_float+0x100>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1bc      	bne.n	800af70 <_printf_float+0x100>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e7b9      	b.n	800af6e <_printf_float+0xfe>
 800affa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800affe:	d118      	bne.n	800b032 <_printf_float+0x1c2>
 800b000:	2900      	cmp	r1, #0
 800b002:	6863      	ldr	r3, [r4, #4]
 800b004:	dd0b      	ble.n	800b01e <_printf_float+0x1ae>
 800b006:	6121      	str	r1, [r4, #16]
 800b008:	b913      	cbnz	r3, 800b010 <_printf_float+0x1a0>
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	07d0      	lsls	r0, r2, #31
 800b00e:	d502      	bpl.n	800b016 <_printf_float+0x1a6>
 800b010:	3301      	adds	r3, #1
 800b012:	440b      	add	r3, r1
 800b014:	6123      	str	r3, [r4, #16]
 800b016:	65a1      	str	r1, [r4, #88]	; 0x58
 800b018:	f04f 0900 	mov.w	r9, #0
 800b01c:	e7de      	b.n	800afdc <_printf_float+0x16c>
 800b01e:	b913      	cbnz	r3, 800b026 <_printf_float+0x1b6>
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	07d2      	lsls	r2, r2, #31
 800b024:	d501      	bpl.n	800b02a <_printf_float+0x1ba>
 800b026:	3302      	adds	r3, #2
 800b028:	e7f4      	b.n	800b014 <_printf_float+0x1a4>
 800b02a:	2301      	movs	r3, #1
 800b02c:	e7f2      	b.n	800b014 <_printf_float+0x1a4>
 800b02e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b034:	4299      	cmp	r1, r3
 800b036:	db05      	blt.n	800b044 <_printf_float+0x1d4>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	6121      	str	r1, [r4, #16]
 800b03c:	07d8      	lsls	r0, r3, #31
 800b03e:	d5ea      	bpl.n	800b016 <_printf_float+0x1a6>
 800b040:	1c4b      	adds	r3, r1, #1
 800b042:	e7e7      	b.n	800b014 <_printf_float+0x1a4>
 800b044:	2900      	cmp	r1, #0
 800b046:	bfd4      	ite	le
 800b048:	f1c1 0202 	rsble	r2, r1, #2
 800b04c:	2201      	movgt	r2, #1
 800b04e:	4413      	add	r3, r2
 800b050:	e7e0      	b.n	800b014 <_printf_float+0x1a4>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	055a      	lsls	r2, r3, #21
 800b056:	d407      	bmi.n	800b068 <_printf_float+0x1f8>
 800b058:	6923      	ldr	r3, [r4, #16]
 800b05a:	4642      	mov	r2, r8
 800b05c:	4631      	mov	r1, r6
 800b05e:	4628      	mov	r0, r5
 800b060:	47b8      	blx	r7
 800b062:	3001      	adds	r0, #1
 800b064:	d12c      	bne.n	800b0c0 <_printf_float+0x250>
 800b066:	e764      	b.n	800af32 <_printf_float+0xc2>
 800b068:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b06c:	f240 80e0 	bls.w	800b230 <_printf_float+0x3c0>
 800b070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b074:	2200      	movs	r2, #0
 800b076:	2300      	movs	r3, #0
 800b078:	f7f5 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d034      	beq.n	800b0ea <_printf_float+0x27a>
 800b080:	4a37      	ldr	r2, [pc, #220]	; (800b160 <_printf_float+0x2f0>)
 800b082:	2301      	movs	r3, #1
 800b084:	4631      	mov	r1, r6
 800b086:	4628      	mov	r0, r5
 800b088:	47b8      	blx	r7
 800b08a:	3001      	adds	r0, #1
 800b08c:	f43f af51 	beq.w	800af32 <_printf_float+0xc2>
 800b090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b094:	429a      	cmp	r2, r3
 800b096:	db02      	blt.n	800b09e <_printf_float+0x22e>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	07d8      	lsls	r0, r3, #31
 800b09c:	d510      	bpl.n	800b0c0 <_printf_float+0x250>
 800b09e:	ee18 3a10 	vmov	r3, s16
 800b0a2:	4652      	mov	r2, sl
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b8      	blx	r7
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f43f af41 	beq.w	800af32 <_printf_float+0xc2>
 800b0b0:	f04f 0800 	mov.w	r8, #0
 800b0b4:	f104 091a 	add.w	r9, r4, #26
 800b0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	4543      	cmp	r3, r8
 800b0be:	dc09      	bgt.n	800b0d4 <_printf_float+0x264>
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	079b      	lsls	r3, r3, #30
 800b0c4:	f100 8105 	bmi.w	800b2d2 <_printf_float+0x462>
 800b0c8:	68e0      	ldr	r0, [r4, #12]
 800b0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0cc:	4298      	cmp	r0, r3
 800b0ce:	bfb8      	it	lt
 800b0d0:	4618      	movlt	r0, r3
 800b0d2:	e730      	b.n	800af36 <_printf_float+0xc6>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	464a      	mov	r2, r9
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4628      	mov	r0, r5
 800b0dc:	47b8      	blx	r7
 800b0de:	3001      	adds	r0, #1
 800b0e0:	f43f af27 	beq.w	800af32 <_printf_float+0xc2>
 800b0e4:	f108 0801 	add.w	r8, r8, #1
 800b0e8:	e7e6      	b.n	800b0b8 <_printf_float+0x248>
 800b0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dc39      	bgt.n	800b164 <_printf_float+0x2f4>
 800b0f0:	4a1b      	ldr	r2, [pc, #108]	; (800b160 <_printf_float+0x2f0>)
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	f43f af19 	beq.w	800af32 <_printf_float+0xc2>
 800b100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b104:	4313      	orrs	r3, r2
 800b106:	d102      	bne.n	800b10e <_printf_float+0x29e>
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	07d9      	lsls	r1, r3, #31
 800b10c:	d5d8      	bpl.n	800b0c0 <_printf_float+0x250>
 800b10e:	ee18 3a10 	vmov	r3, s16
 800b112:	4652      	mov	r2, sl
 800b114:	4631      	mov	r1, r6
 800b116:	4628      	mov	r0, r5
 800b118:	47b8      	blx	r7
 800b11a:	3001      	adds	r0, #1
 800b11c:	f43f af09 	beq.w	800af32 <_printf_float+0xc2>
 800b120:	f04f 0900 	mov.w	r9, #0
 800b124:	f104 0a1a 	add.w	sl, r4, #26
 800b128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12a:	425b      	negs	r3, r3
 800b12c:	454b      	cmp	r3, r9
 800b12e:	dc01      	bgt.n	800b134 <_printf_float+0x2c4>
 800b130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b132:	e792      	b.n	800b05a <_printf_float+0x1ea>
 800b134:	2301      	movs	r3, #1
 800b136:	4652      	mov	r2, sl
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f aef7 	beq.w	800af32 <_printf_float+0xc2>
 800b144:	f109 0901 	add.w	r9, r9, #1
 800b148:	e7ee      	b.n	800b128 <_printf_float+0x2b8>
 800b14a:	bf00      	nop
 800b14c:	7fefffff 	.word	0x7fefffff
 800b150:	0800dfc8 	.word	0x0800dfc8
 800b154:	0800dfcc 	.word	0x0800dfcc
 800b158:	0800dfd4 	.word	0x0800dfd4
 800b15c:	0800dfd0 	.word	0x0800dfd0
 800b160:	0800dfd8 	.word	0x0800dfd8
 800b164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b168:	429a      	cmp	r2, r3
 800b16a:	bfa8      	it	ge
 800b16c:	461a      	movge	r2, r3
 800b16e:	2a00      	cmp	r2, #0
 800b170:	4691      	mov	r9, r2
 800b172:	dc37      	bgt.n	800b1e4 <_printf_float+0x374>
 800b174:	f04f 0b00 	mov.w	fp, #0
 800b178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b17c:	f104 021a 	add.w	r2, r4, #26
 800b180:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b182:	9305      	str	r3, [sp, #20]
 800b184:	eba3 0309 	sub.w	r3, r3, r9
 800b188:	455b      	cmp	r3, fp
 800b18a:	dc33      	bgt.n	800b1f4 <_printf_float+0x384>
 800b18c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b190:	429a      	cmp	r2, r3
 800b192:	db3b      	blt.n	800b20c <_printf_float+0x39c>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	07da      	lsls	r2, r3, #31
 800b198:	d438      	bmi.n	800b20c <_printf_float+0x39c>
 800b19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19c:	9a05      	ldr	r2, [sp, #20]
 800b19e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1a0:	1a9a      	subs	r2, r3, r2
 800b1a2:	eba3 0901 	sub.w	r9, r3, r1
 800b1a6:	4591      	cmp	r9, r2
 800b1a8:	bfa8      	it	ge
 800b1aa:	4691      	movge	r9, r2
 800b1ac:	f1b9 0f00 	cmp.w	r9, #0
 800b1b0:	dc35      	bgt.n	800b21e <_printf_float+0x3ae>
 800b1b2:	f04f 0800 	mov.w	r8, #0
 800b1b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ba:	f104 0a1a 	add.w	sl, r4, #26
 800b1be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c2:	1a9b      	subs	r3, r3, r2
 800b1c4:	eba3 0309 	sub.w	r3, r3, r9
 800b1c8:	4543      	cmp	r3, r8
 800b1ca:	f77f af79 	ble.w	800b0c0 <_printf_float+0x250>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f aeaa 	beq.w	800af32 <_printf_float+0xc2>
 800b1de:	f108 0801 	add.w	r8, r8, #1
 800b1e2:	e7ec      	b.n	800b1be <_printf_float+0x34e>
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	47b8      	blx	r7
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	d1c0      	bne.n	800b174 <_printf_float+0x304>
 800b1f2:	e69e      	b.n	800af32 <_printf_float+0xc2>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	9205      	str	r2, [sp, #20]
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	f43f ae97 	beq.w	800af32 <_printf_float+0xc2>
 800b204:	9a05      	ldr	r2, [sp, #20]
 800b206:	f10b 0b01 	add.w	fp, fp, #1
 800b20a:	e7b9      	b.n	800b180 <_printf_float+0x310>
 800b20c:	ee18 3a10 	vmov	r3, s16
 800b210:	4652      	mov	r2, sl
 800b212:	4631      	mov	r1, r6
 800b214:	4628      	mov	r0, r5
 800b216:	47b8      	blx	r7
 800b218:	3001      	adds	r0, #1
 800b21a:	d1be      	bne.n	800b19a <_printf_float+0x32a>
 800b21c:	e689      	b.n	800af32 <_printf_float+0xc2>
 800b21e:	9a05      	ldr	r2, [sp, #20]
 800b220:	464b      	mov	r3, r9
 800b222:	4442      	add	r2, r8
 800b224:	4631      	mov	r1, r6
 800b226:	4628      	mov	r0, r5
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	d1c1      	bne.n	800b1b2 <_printf_float+0x342>
 800b22e:	e680      	b.n	800af32 <_printf_float+0xc2>
 800b230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b232:	2a01      	cmp	r2, #1
 800b234:	dc01      	bgt.n	800b23a <_printf_float+0x3ca>
 800b236:	07db      	lsls	r3, r3, #31
 800b238:	d538      	bpl.n	800b2ac <_printf_float+0x43c>
 800b23a:	2301      	movs	r3, #1
 800b23c:	4642      	mov	r2, r8
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	f43f ae74 	beq.w	800af32 <_printf_float+0xc2>
 800b24a:	ee18 3a10 	vmov	r3, s16
 800b24e:	4652      	mov	r2, sl
 800b250:	4631      	mov	r1, r6
 800b252:	4628      	mov	r0, r5
 800b254:	47b8      	blx	r7
 800b256:	3001      	adds	r0, #1
 800b258:	f43f ae6b 	beq.w	800af32 <_printf_float+0xc2>
 800b25c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b260:	2200      	movs	r2, #0
 800b262:	2300      	movs	r3, #0
 800b264:	f7f5 fc38 	bl	8000ad8 <__aeabi_dcmpeq>
 800b268:	b9d8      	cbnz	r0, 800b2a2 <_printf_float+0x432>
 800b26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b26c:	f108 0201 	add.w	r2, r8, #1
 800b270:	3b01      	subs	r3, #1
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	d10e      	bne.n	800b29a <_printf_float+0x42a>
 800b27c:	e659      	b.n	800af32 <_printf_float+0xc2>
 800b27e:	2301      	movs	r3, #1
 800b280:	4652      	mov	r2, sl
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f ae52 	beq.w	800af32 <_printf_float+0xc2>
 800b28e:	f108 0801 	add.w	r8, r8, #1
 800b292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b294:	3b01      	subs	r3, #1
 800b296:	4543      	cmp	r3, r8
 800b298:	dcf1      	bgt.n	800b27e <_printf_float+0x40e>
 800b29a:	464b      	mov	r3, r9
 800b29c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2a0:	e6dc      	b.n	800b05c <_printf_float+0x1ec>
 800b2a2:	f04f 0800 	mov.w	r8, #0
 800b2a6:	f104 0a1a 	add.w	sl, r4, #26
 800b2aa:	e7f2      	b.n	800b292 <_printf_float+0x422>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	4642      	mov	r2, r8
 800b2b0:	e7df      	b.n	800b272 <_printf_float+0x402>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	464a      	mov	r2, r9
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	47b8      	blx	r7
 800b2bc:	3001      	adds	r0, #1
 800b2be:	f43f ae38 	beq.w	800af32 <_printf_float+0xc2>
 800b2c2:	f108 0801 	add.w	r8, r8, #1
 800b2c6:	68e3      	ldr	r3, [r4, #12]
 800b2c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2ca:	1a5b      	subs	r3, r3, r1
 800b2cc:	4543      	cmp	r3, r8
 800b2ce:	dcf0      	bgt.n	800b2b2 <_printf_float+0x442>
 800b2d0:	e6fa      	b.n	800b0c8 <_printf_float+0x258>
 800b2d2:	f04f 0800 	mov.w	r8, #0
 800b2d6:	f104 0919 	add.w	r9, r4, #25
 800b2da:	e7f4      	b.n	800b2c6 <_printf_float+0x456>

0800b2dc <_printf_common>:
 800b2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e0:	4616      	mov	r6, r2
 800b2e2:	4699      	mov	r9, r3
 800b2e4:	688a      	ldr	r2, [r1, #8]
 800b2e6:	690b      	ldr	r3, [r1, #16]
 800b2e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bfb8      	it	lt
 800b2f0:	4613      	movlt	r3, r2
 800b2f2:	6033      	str	r3, [r6, #0]
 800b2f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	b10a      	cbz	r2, 800b302 <_printf_common+0x26>
 800b2fe:	3301      	adds	r3, #1
 800b300:	6033      	str	r3, [r6, #0]
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	0699      	lsls	r1, r3, #26
 800b306:	bf42      	ittt	mi
 800b308:	6833      	ldrmi	r3, [r6, #0]
 800b30a:	3302      	addmi	r3, #2
 800b30c:	6033      	strmi	r3, [r6, #0]
 800b30e:	6825      	ldr	r5, [r4, #0]
 800b310:	f015 0506 	ands.w	r5, r5, #6
 800b314:	d106      	bne.n	800b324 <_printf_common+0x48>
 800b316:	f104 0a19 	add.w	sl, r4, #25
 800b31a:	68e3      	ldr	r3, [r4, #12]
 800b31c:	6832      	ldr	r2, [r6, #0]
 800b31e:	1a9b      	subs	r3, r3, r2
 800b320:	42ab      	cmp	r3, r5
 800b322:	dc26      	bgt.n	800b372 <_printf_common+0x96>
 800b324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b328:	1e13      	subs	r3, r2, #0
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	bf18      	it	ne
 800b32e:	2301      	movne	r3, #1
 800b330:	0692      	lsls	r2, r2, #26
 800b332:	d42b      	bmi.n	800b38c <_printf_common+0xb0>
 800b334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b338:	4649      	mov	r1, r9
 800b33a:	4638      	mov	r0, r7
 800b33c:	47c0      	blx	r8
 800b33e:	3001      	adds	r0, #1
 800b340:	d01e      	beq.n	800b380 <_printf_common+0xa4>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	68e5      	ldr	r5, [r4, #12]
 800b346:	6832      	ldr	r2, [r6, #0]
 800b348:	f003 0306 	and.w	r3, r3, #6
 800b34c:	2b04      	cmp	r3, #4
 800b34e:	bf08      	it	eq
 800b350:	1aad      	subeq	r5, r5, r2
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	6922      	ldr	r2, [r4, #16]
 800b356:	bf0c      	ite	eq
 800b358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b35c:	2500      	movne	r5, #0
 800b35e:	4293      	cmp	r3, r2
 800b360:	bfc4      	itt	gt
 800b362:	1a9b      	subgt	r3, r3, r2
 800b364:	18ed      	addgt	r5, r5, r3
 800b366:	2600      	movs	r6, #0
 800b368:	341a      	adds	r4, #26
 800b36a:	42b5      	cmp	r5, r6
 800b36c:	d11a      	bne.n	800b3a4 <_printf_common+0xc8>
 800b36e:	2000      	movs	r0, #0
 800b370:	e008      	b.n	800b384 <_printf_common+0xa8>
 800b372:	2301      	movs	r3, #1
 800b374:	4652      	mov	r2, sl
 800b376:	4649      	mov	r1, r9
 800b378:	4638      	mov	r0, r7
 800b37a:	47c0      	blx	r8
 800b37c:	3001      	adds	r0, #1
 800b37e:	d103      	bne.n	800b388 <_printf_common+0xac>
 800b380:	f04f 30ff 	mov.w	r0, #4294967295
 800b384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b388:	3501      	adds	r5, #1
 800b38a:	e7c6      	b.n	800b31a <_printf_common+0x3e>
 800b38c:	18e1      	adds	r1, r4, r3
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	2030      	movs	r0, #48	; 0x30
 800b392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b396:	4422      	add	r2, r4
 800b398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b39c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3a0:	3302      	adds	r3, #2
 800b3a2:	e7c7      	b.n	800b334 <_printf_common+0x58>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	47c0      	blx	r8
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	d0e6      	beq.n	800b380 <_printf_common+0xa4>
 800b3b2:	3601      	adds	r6, #1
 800b3b4:	e7d9      	b.n	800b36a <_printf_common+0x8e>
	...

0800b3b8 <_printf_i>:
 800b3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3bc:	7e0f      	ldrb	r7, [r1, #24]
 800b3be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3c0:	2f78      	cmp	r7, #120	; 0x78
 800b3c2:	4691      	mov	r9, r2
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	469a      	mov	sl, r3
 800b3ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3ce:	d807      	bhi.n	800b3e0 <_printf_i+0x28>
 800b3d0:	2f62      	cmp	r7, #98	; 0x62
 800b3d2:	d80a      	bhi.n	800b3ea <_printf_i+0x32>
 800b3d4:	2f00      	cmp	r7, #0
 800b3d6:	f000 80d8 	beq.w	800b58a <_printf_i+0x1d2>
 800b3da:	2f58      	cmp	r7, #88	; 0x58
 800b3dc:	f000 80a3 	beq.w	800b526 <_printf_i+0x16e>
 800b3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3e8:	e03a      	b.n	800b460 <_printf_i+0xa8>
 800b3ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3ee:	2b15      	cmp	r3, #21
 800b3f0:	d8f6      	bhi.n	800b3e0 <_printf_i+0x28>
 800b3f2:	a101      	add	r1, pc, #4	; (adr r1, 800b3f8 <_printf_i+0x40>)
 800b3f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3f8:	0800b451 	.word	0x0800b451
 800b3fc:	0800b465 	.word	0x0800b465
 800b400:	0800b3e1 	.word	0x0800b3e1
 800b404:	0800b3e1 	.word	0x0800b3e1
 800b408:	0800b3e1 	.word	0x0800b3e1
 800b40c:	0800b3e1 	.word	0x0800b3e1
 800b410:	0800b465 	.word	0x0800b465
 800b414:	0800b3e1 	.word	0x0800b3e1
 800b418:	0800b3e1 	.word	0x0800b3e1
 800b41c:	0800b3e1 	.word	0x0800b3e1
 800b420:	0800b3e1 	.word	0x0800b3e1
 800b424:	0800b571 	.word	0x0800b571
 800b428:	0800b495 	.word	0x0800b495
 800b42c:	0800b553 	.word	0x0800b553
 800b430:	0800b3e1 	.word	0x0800b3e1
 800b434:	0800b3e1 	.word	0x0800b3e1
 800b438:	0800b593 	.word	0x0800b593
 800b43c:	0800b3e1 	.word	0x0800b3e1
 800b440:	0800b495 	.word	0x0800b495
 800b444:	0800b3e1 	.word	0x0800b3e1
 800b448:	0800b3e1 	.word	0x0800b3e1
 800b44c:	0800b55b 	.word	0x0800b55b
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	1d1a      	adds	r2, r3, #4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	602a      	str	r2, [r5, #0]
 800b458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b45c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b460:	2301      	movs	r3, #1
 800b462:	e0a3      	b.n	800b5ac <_printf_i+0x1f4>
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	6829      	ldr	r1, [r5, #0]
 800b468:	0606      	lsls	r6, r0, #24
 800b46a:	f101 0304 	add.w	r3, r1, #4
 800b46e:	d50a      	bpl.n	800b486 <_printf_i+0xce>
 800b470:	680e      	ldr	r6, [r1, #0]
 800b472:	602b      	str	r3, [r5, #0]
 800b474:	2e00      	cmp	r6, #0
 800b476:	da03      	bge.n	800b480 <_printf_i+0xc8>
 800b478:	232d      	movs	r3, #45	; 0x2d
 800b47a:	4276      	negs	r6, r6
 800b47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b480:	485e      	ldr	r0, [pc, #376]	; (800b5fc <_printf_i+0x244>)
 800b482:	230a      	movs	r3, #10
 800b484:	e019      	b.n	800b4ba <_printf_i+0x102>
 800b486:	680e      	ldr	r6, [r1, #0]
 800b488:	602b      	str	r3, [r5, #0]
 800b48a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b48e:	bf18      	it	ne
 800b490:	b236      	sxthne	r6, r6
 800b492:	e7ef      	b.n	800b474 <_printf_i+0xbc>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	1d19      	adds	r1, r3, #4
 800b49a:	6029      	str	r1, [r5, #0]
 800b49c:	0601      	lsls	r1, r0, #24
 800b49e:	d501      	bpl.n	800b4a4 <_printf_i+0xec>
 800b4a0:	681e      	ldr	r6, [r3, #0]
 800b4a2:	e002      	b.n	800b4aa <_printf_i+0xf2>
 800b4a4:	0646      	lsls	r6, r0, #25
 800b4a6:	d5fb      	bpl.n	800b4a0 <_printf_i+0xe8>
 800b4a8:	881e      	ldrh	r6, [r3, #0]
 800b4aa:	4854      	ldr	r0, [pc, #336]	; (800b5fc <_printf_i+0x244>)
 800b4ac:	2f6f      	cmp	r7, #111	; 0x6f
 800b4ae:	bf0c      	ite	eq
 800b4b0:	2308      	moveq	r3, #8
 800b4b2:	230a      	movne	r3, #10
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4ba:	6865      	ldr	r5, [r4, #4]
 800b4bc:	60a5      	str	r5, [r4, #8]
 800b4be:	2d00      	cmp	r5, #0
 800b4c0:	bfa2      	ittt	ge
 800b4c2:	6821      	ldrge	r1, [r4, #0]
 800b4c4:	f021 0104 	bicge.w	r1, r1, #4
 800b4c8:	6021      	strge	r1, [r4, #0]
 800b4ca:	b90e      	cbnz	r6, 800b4d0 <_printf_i+0x118>
 800b4cc:	2d00      	cmp	r5, #0
 800b4ce:	d04d      	beq.n	800b56c <_printf_i+0x1b4>
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b4d6:	fb03 6711 	mls	r7, r3, r1, r6
 800b4da:	5dc7      	ldrb	r7, [r0, r7]
 800b4dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b4e0:	4637      	mov	r7, r6
 800b4e2:	42bb      	cmp	r3, r7
 800b4e4:	460e      	mov	r6, r1
 800b4e6:	d9f4      	bls.n	800b4d2 <_printf_i+0x11a>
 800b4e8:	2b08      	cmp	r3, #8
 800b4ea:	d10b      	bne.n	800b504 <_printf_i+0x14c>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	07de      	lsls	r6, r3, #31
 800b4f0:	d508      	bpl.n	800b504 <_printf_i+0x14c>
 800b4f2:	6923      	ldr	r3, [r4, #16]
 800b4f4:	6861      	ldr	r1, [r4, #4]
 800b4f6:	4299      	cmp	r1, r3
 800b4f8:	bfde      	ittt	le
 800b4fa:	2330      	movle	r3, #48	; 0x30
 800b4fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b500:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b504:	1b52      	subs	r2, r2, r5
 800b506:	6122      	str	r2, [r4, #16]
 800b508:	f8cd a000 	str.w	sl, [sp]
 800b50c:	464b      	mov	r3, r9
 800b50e:	aa03      	add	r2, sp, #12
 800b510:	4621      	mov	r1, r4
 800b512:	4640      	mov	r0, r8
 800b514:	f7ff fee2 	bl	800b2dc <_printf_common>
 800b518:	3001      	adds	r0, #1
 800b51a:	d14c      	bne.n	800b5b6 <_printf_i+0x1fe>
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	b004      	add	sp, #16
 800b522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b526:	4835      	ldr	r0, [pc, #212]	; (800b5fc <_printf_i+0x244>)
 800b528:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b52c:	6829      	ldr	r1, [r5, #0]
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	f851 6b04 	ldr.w	r6, [r1], #4
 800b534:	6029      	str	r1, [r5, #0]
 800b536:	061d      	lsls	r5, r3, #24
 800b538:	d514      	bpl.n	800b564 <_printf_i+0x1ac>
 800b53a:	07df      	lsls	r7, r3, #31
 800b53c:	bf44      	itt	mi
 800b53e:	f043 0320 	orrmi.w	r3, r3, #32
 800b542:	6023      	strmi	r3, [r4, #0]
 800b544:	b91e      	cbnz	r6, 800b54e <_printf_i+0x196>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	f023 0320 	bic.w	r3, r3, #32
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	2310      	movs	r3, #16
 800b550:	e7b0      	b.n	800b4b4 <_printf_i+0xfc>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	f043 0320 	orr.w	r3, r3, #32
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	2378      	movs	r3, #120	; 0x78
 800b55c:	4828      	ldr	r0, [pc, #160]	; (800b600 <_printf_i+0x248>)
 800b55e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b562:	e7e3      	b.n	800b52c <_printf_i+0x174>
 800b564:	0659      	lsls	r1, r3, #25
 800b566:	bf48      	it	mi
 800b568:	b2b6      	uxthmi	r6, r6
 800b56a:	e7e6      	b.n	800b53a <_printf_i+0x182>
 800b56c:	4615      	mov	r5, r2
 800b56e:	e7bb      	b.n	800b4e8 <_printf_i+0x130>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	6826      	ldr	r6, [r4, #0]
 800b574:	6961      	ldr	r1, [r4, #20]
 800b576:	1d18      	adds	r0, r3, #4
 800b578:	6028      	str	r0, [r5, #0]
 800b57a:	0635      	lsls	r5, r6, #24
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	d501      	bpl.n	800b584 <_printf_i+0x1cc>
 800b580:	6019      	str	r1, [r3, #0]
 800b582:	e002      	b.n	800b58a <_printf_i+0x1d2>
 800b584:	0670      	lsls	r0, r6, #25
 800b586:	d5fb      	bpl.n	800b580 <_printf_i+0x1c8>
 800b588:	8019      	strh	r1, [r3, #0]
 800b58a:	2300      	movs	r3, #0
 800b58c:	6123      	str	r3, [r4, #16]
 800b58e:	4615      	mov	r5, r2
 800b590:	e7ba      	b.n	800b508 <_printf_i+0x150>
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	1d1a      	adds	r2, r3, #4
 800b596:	602a      	str	r2, [r5, #0]
 800b598:	681d      	ldr	r5, [r3, #0]
 800b59a:	6862      	ldr	r2, [r4, #4]
 800b59c:	2100      	movs	r1, #0
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f7f4 fe26 	bl	80001f0 <memchr>
 800b5a4:	b108      	cbz	r0, 800b5aa <_printf_i+0x1f2>
 800b5a6:	1b40      	subs	r0, r0, r5
 800b5a8:	6060      	str	r0, [r4, #4]
 800b5aa:	6863      	ldr	r3, [r4, #4]
 800b5ac:	6123      	str	r3, [r4, #16]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5b4:	e7a8      	b.n	800b508 <_printf_i+0x150>
 800b5b6:	6923      	ldr	r3, [r4, #16]
 800b5b8:	462a      	mov	r2, r5
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	4640      	mov	r0, r8
 800b5be:	47d0      	blx	sl
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	d0ab      	beq.n	800b51c <_printf_i+0x164>
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	079b      	lsls	r3, r3, #30
 800b5c8:	d413      	bmi.n	800b5f2 <_printf_i+0x23a>
 800b5ca:	68e0      	ldr	r0, [r4, #12]
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	4298      	cmp	r0, r3
 800b5d0:	bfb8      	it	lt
 800b5d2:	4618      	movlt	r0, r3
 800b5d4:	e7a4      	b.n	800b520 <_printf_i+0x168>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4632      	mov	r2, r6
 800b5da:	4649      	mov	r1, r9
 800b5dc:	4640      	mov	r0, r8
 800b5de:	47d0      	blx	sl
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d09b      	beq.n	800b51c <_printf_i+0x164>
 800b5e4:	3501      	adds	r5, #1
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	9903      	ldr	r1, [sp, #12]
 800b5ea:	1a5b      	subs	r3, r3, r1
 800b5ec:	42ab      	cmp	r3, r5
 800b5ee:	dcf2      	bgt.n	800b5d6 <_printf_i+0x21e>
 800b5f0:	e7eb      	b.n	800b5ca <_printf_i+0x212>
 800b5f2:	2500      	movs	r5, #0
 800b5f4:	f104 0619 	add.w	r6, r4, #25
 800b5f8:	e7f5      	b.n	800b5e6 <_printf_i+0x22e>
 800b5fa:	bf00      	nop
 800b5fc:	0800dfda 	.word	0x0800dfda
 800b600:	0800dfeb 	.word	0x0800dfeb

0800b604 <siprintf>:
 800b604:	b40e      	push	{r1, r2, r3}
 800b606:	b500      	push	{lr}
 800b608:	b09c      	sub	sp, #112	; 0x70
 800b60a:	ab1d      	add	r3, sp, #116	; 0x74
 800b60c:	9002      	str	r0, [sp, #8]
 800b60e:	9006      	str	r0, [sp, #24]
 800b610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b614:	4809      	ldr	r0, [pc, #36]	; (800b63c <siprintf+0x38>)
 800b616:	9107      	str	r1, [sp, #28]
 800b618:	9104      	str	r1, [sp, #16]
 800b61a:	4909      	ldr	r1, [pc, #36]	; (800b640 <siprintf+0x3c>)
 800b61c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b620:	9105      	str	r1, [sp, #20]
 800b622:	6800      	ldr	r0, [r0, #0]
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	a902      	add	r1, sp, #8
 800b628:	f001 fb78 	bl	800cd1c <_svfiprintf_r>
 800b62c:	9b02      	ldr	r3, [sp, #8]
 800b62e:	2200      	movs	r2, #0
 800b630:	701a      	strb	r2, [r3, #0]
 800b632:	b01c      	add	sp, #112	; 0x70
 800b634:	f85d eb04 	ldr.w	lr, [sp], #4
 800b638:	b003      	add	sp, #12
 800b63a:	4770      	bx	lr
 800b63c:	20000178 	.word	0x20000178
 800b640:	ffff0208 	.word	0xffff0208

0800b644 <quorem>:
 800b644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	6903      	ldr	r3, [r0, #16]
 800b64a:	690c      	ldr	r4, [r1, #16]
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	4607      	mov	r7, r0
 800b650:	f2c0 8081 	blt.w	800b756 <quorem+0x112>
 800b654:	3c01      	subs	r4, #1
 800b656:	f101 0814 	add.w	r8, r1, #20
 800b65a:	f100 0514 	add.w	r5, r0, #20
 800b65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b662:	9301      	str	r3, [sp, #4]
 800b664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b66c:	3301      	adds	r3, #1
 800b66e:	429a      	cmp	r2, r3
 800b670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b678:	fbb2 f6f3 	udiv	r6, r2, r3
 800b67c:	d331      	bcc.n	800b6e2 <quorem+0x9e>
 800b67e:	f04f 0e00 	mov.w	lr, #0
 800b682:	4640      	mov	r0, r8
 800b684:	46ac      	mov	ip, r5
 800b686:	46f2      	mov	sl, lr
 800b688:	f850 2b04 	ldr.w	r2, [r0], #4
 800b68c:	b293      	uxth	r3, r2
 800b68e:	fb06 e303 	mla	r3, r6, r3, lr
 800b692:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b696:	b29b      	uxth	r3, r3
 800b698:	ebaa 0303 	sub.w	r3, sl, r3
 800b69c:	f8dc a000 	ldr.w	sl, [ip]
 800b6a0:	0c12      	lsrs	r2, r2, #16
 800b6a2:	fa13 f38a 	uxtah	r3, r3, sl
 800b6a6:	fb06 e202 	mla	r2, r6, r2, lr
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	9b00      	ldr	r3, [sp, #0]
 800b6ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6b2:	b292      	uxth	r2, r2
 800b6b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6c0:	4581      	cmp	r9, r0
 800b6c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6c6:	f84c 3b04 	str.w	r3, [ip], #4
 800b6ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6ce:	d2db      	bcs.n	800b688 <quorem+0x44>
 800b6d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6d4:	b92b      	cbnz	r3, 800b6e2 <quorem+0x9e>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	3b04      	subs	r3, #4
 800b6da:	429d      	cmp	r5, r3
 800b6dc:	461a      	mov	r2, r3
 800b6de:	d32e      	bcc.n	800b73e <quorem+0xfa>
 800b6e0:	613c      	str	r4, [r7, #16]
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	f001 f8c6 	bl	800c874 <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	db24      	blt.n	800b736 <quorem+0xf2>
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f04f 0c00 	mov.w	ip, #0
 800b6f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6f8:	f8d0 e000 	ldr.w	lr, [r0]
 800b6fc:	b293      	uxth	r3, r2
 800b6fe:	ebac 0303 	sub.w	r3, ip, r3
 800b702:	0c12      	lsrs	r2, r2, #16
 800b704:	fa13 f38e 	uxtah	r3, r3, lr
 800b708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b70c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b710:	b29b      	uxth	r3, r3
 800b712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b716:	45c1      	cmp	r9, r8
 800b718:	f840 3b04 	str.w	r3, [r0], #4
 800b71c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b720:	d2e8      	bcs.n	800b6f4 <quorem+0xb0>
 800b722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b72a:	b922      	cbnz	r2, 800b736 <quorem+0xf2>
 800b72c:	3b04      	subs	r3, #4
 800b72e:	429d      	cmp	r5, r3
 800b730:	461a      	mov	r2, r3
 800b732:	d30a      	bcc.n	800b74a <quorem+0x106>
 800b734:	613c      	str	r4, [r7, #16]
 800b736:	4630      	mov	r0, r6
 800b738:	b003      	add	sp, #12
 800b73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73e:	6812      	ldr	r2, [r2, #0]
 800b740:	3b04      	subs	r3, #4
 800b742:	2a00      	cmp	r2, #0
 800b744:	d1cc      	bne.n	800b6e0 <quorem+0x9c>
 800b746:	3c01      	subs	r4, #1
 800b748:	e7c7      	b.n	800b6da <quorem+0x96>
 800b74a:	6812      	ldr	r2, [r2, #0]
 800b74c:	3b04      	subs	r3, #4
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d1f0      	bne.n	800b734 <quorem+0xf0>
 800b752:	3c01      	subs	r4, #1
 800b754:	e7eb      	b.n	800b72e <quorem+0xea>
 800b756:	2000      	movs	r0, #0
 800b758:	e7ee      	b.n	800b738 <quorem+0xf4>
 800b75a:	0000      	movs	r0, r0
 800b75c:	0000      	movs	r0, r0
	...

0800b760 <_dtoa_r>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	ed2d 8b04 	vpush	{d8-d9}
 800b768:	ec57 6b10 	vmov	r6, r7, d0
 800b76c:	b093      	sub	sp, #76	; 0x4c
 800b76e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b774:	9106      	str	r1, [sp, #24]
 800b776:	ee10 aa10 	vmov	sl, s0
 800b77a:	4604      	mov	r4, r0
 800b77c:	9209      	str	r2, [sp, #36]	; 0x24
 800b77e:	930c      	str	r3, [sp, #48]	; 0x30
 800b780:	46bb      	mov	fp, r7
 800b782:	b975      	cbnz	r5, 800b7a2 <_dtoa_r+0x42>
 800b784:	2010      	movs	r0, #16
 800b786:	f000 fddd 	bl	800c344 <malloc>
 800b78a:	4602      	mov	r2, r0
 800b78c:	6260      	str	r0, [r4, #36]	; 0x24
 800b78e:	b920      	cbnz	r0, 800b79a <_dtoa_r+0x3a>
 800b790:	4ba7      	ldr	r3, [pc, #668]	; (800ba30 <_dtoa_r+0x2d0>)
 800b792:	21ea      	movs	r1, #234	; 0xea
 800b794:	48a7      	ldr	r0, [pc, #668]	; (800ba34 <_dtoa_r+0x2d4>)
 800b796:	f001 fbd1 	bl	800cf3c <__assert_func>
 800b79a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b79e:	6005      	str	r5, [r0, #0]
 800b7a0:	60c5      	str	r5, [r0, #12]
 800b7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7a4:	6819      	ldr	r1, [r3, #0]
 800b7a6:	b151      	cbz	r1, 800b7be <_dtoa_r+0x5e>
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	604a      	str	r2, [r1, #4]
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4093      	lsls	r3, r2
 800b7b0:	608b      	str	r3, [r1, #8]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fe1c 	bl	800c3f0 <_Bfree>
 800b7b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	1e3b      	subs	r3, r7, #0
 800b7c0:	bfaa      	itet	ge
 800b7c2:	2300      	movge	r3, #0
 800b7c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b7c8:	f8c8 3000 	strge.w	r3, [r8]
 800b7cc:	4b9a      	ldr	r3, [pc, #616]	; (800ba38 <_dtoa_r+0x2d8>)
 800b7ce:	bfbc      	itt	lt
 800b7d0:	2201      	movlt	r2, #1
 800b7d2:	f8c8 2000 	strlt.w	r2, [r8]
 800b7d6:	ea33 030b 	bics.w	r3, r3, fp
 800b7da:	d11b      	bne.n	800b814 <_dtoa_r+0xb4>
 800b7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7e8:	4333      	orrs	r3, r6
 800b7ea:	f000 8592 	beq.w	800c312 <_dtoa_r+0xbb2>
 800b7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f0:	b963      	cbnz	r3, 800b80c <_dtoa_r+0xac>
 800b7f2:	4b92      	ldr	r3, [pc, #584]	; (800ba3c <_dtoa_r+0x2dc>)
 800b7f4:	e022      	b.n	800b83c <_dtoa_r+0xdc>
 800b7f6:	4b92      	ldr	r3, [pc, #584]	; (800ba40 <_dtoa_r+0x2e0>)
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	9801      	ldr	r0, [sp, #4]
 800b802:	b013      	add	sp, #76	; 0x4c
 800b804:	ecbd 8b04 	vpop	{d8-d9}
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	4b8b      	ldr	r3, [pc, #556]	; (800ba3c <_dtoa_r+0x2dc>)
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	3303      	adds	r3, #3
 800b812:	e7f3      	b.n	800b7fc <_dtoa_r+0x9c>
 800b814:	2200      	movs	r2, #0
 800b816:	2300      	movs	r3, #0
 800b818:	4650      	mov	r0, sl
 800b81a:	4659      	mov	r1, fp
 800b81c:	f7f5 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b820:	ec4b ab19 	vmov	d9, sl, fp
 800b824:	4680      	mov	r8, r0
 800b826:	b158      	cbz	r0, 800b840 <_dtoa_r+0xe0>
 800b828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b82a:	2301      	movs	r3, #1
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 856b 	beq.w	800c30c <_dtoa_r+0xbac>
 800b836:	4883      	ldr	r0, [pc, #524]	; (800ba44 <_dtoa_r+0x2e4>)
 800b838:	6018      	str	r0, [r3, #0]
 800b83a:	1e43      	subs	r3, r0, #1
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	e7df      	b.n	800b800 <_dtoa_r+0xa0>
 800b840:	ec4b ab10 	vmov	d0, sl, fp
 800b844:	aa10      	add	r2, sp, #64	; 0x40
 800b846:	a911      	add	r1, sp, #68	; 0x44
 800b848:	4620      	mov	r0, r4
 800b84a:	f001 f8b9 	bl	800c9c0 <__d2b>
 800b84e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b852:	ee08 0a10 	vmov	s16, r0
 800b856:	2d00      	cmp	r5, #0
 800b858:	f000 8084 	beq.w	800b964 <_dtoa_r+0x204>
 800b85c:	ee19 3a90 	vmov	r3, s19
 800b860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b864:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b868:	4656      	mov	r6, sl
 800b86a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b872:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b876:	4b74      	ldr	r3, [pc, #464]	; (800ba48 <_dtoa_r+0x2e8>)
 800b878:	2200      	movs	r2, #0
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fd0b 	bl	8000298 <__aeabi_dsub>
 800b882:	a365      	add	r3, pc, #404	; (adr r3, 800ba18 <_dtoa_r+0x2b8>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 febe 	bl	8000608 <__aeabi_dmul>
 800b88c:	a364      	add	r3, pc, #400	; (adr r3, 800ba20 <_dtoa_r+0x2c0>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f7f4 fd03 	bl	800029c <__adddf3>
 800b896:	4606      	mov	r6, r0
 800b898:	4628      	mov	r0, r5
 800b89a:	460f      	mov	r7, r1
 800b89c:	f7f4 fe4a 	bl	8000534 <__aeabi_i2d>
 800b8a0:	a361      	add	r3, pc, #388	; (adr r3, 800ba28 <_dtoa_r+0x2c8>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f7f4 feaf 	bl	8000608 <__aeabi_dmul>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7f4 fcf3 	bl	800029c <__adddf3>
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	f7f5 f955 	bl	8000b68 <__aeabi_d2iz>
 800b8be:	2200      	movs	r2, #0
 800b8c0:	9000      	str	r0, [sp, #0]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f5 f910 	bl	8000aec <__aeabi_dcmplt>
 800b8cc:	b150      	cbz	r0, 800b8e4 <_dtoa_r+0x184>
 800b8ce:	9800      	ldr	r0, [sp, #0]
 800b8d0:	f7f4 fe30 	bl	8000534 <__aeabi_i2d>
 800b8d4:	4632      	mov	r2, r6
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	f7f5 f8fe 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8dc:	b910      	cbnz	r0, 800b8e4 <_dtoa_r+0x184>
 800b8de:	9b00      	ldr	r3, [sp, #0]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	9b00      	ldr	r3, [sp, #0]
 800b8e6:	2b16      	cmp	r3, #22
 800b8e8:	d85a      	bhi.n	800b9a0 <_dtoa_r+0x240>
 800b8ea:	9a00      	ldr	r2, [sp, #0]
 800b8ec:	4b57      	ldr	r3, [pc, #348]	; (800ba4c <_dtoa_r+0x2ec>)
 800b8ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	ec51 0b19 	vmov	r0, r1, d9
 800b8fa:	f7f5 f8f7 	bl	8000aec <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d050      	beq.n	800b9a4 <_dtoa_r+0x244>
 800b902:	9b00      	ldr	r3, [sp, #0]
 800b904:	3b01      	subs	r3, #1
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	2300      	movs	r3, #0
 800b90a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b90e:	1b5d      	subs	r5, r3, r5
 800b910:	1e6b      	subs	r3, r5, #1
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	bf45      	ittet	mi
 800b916:	f1c5 0301 	rsbmi	r3, r5, #1
 800b91a:	9304      	strmi	r3, [sp, #16]
 800b91c:	2300      	movpl	r3, #0
 800b91e:	2300      	movmi	r3, #0
 800b920:	bf4c      	ite	mi
 800b922:	9305      	strmi	r3, [sp, #20]
 800b924:	9304      	strpl	r3, [sp, #16]
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	db3d      	blt.n	800b9a8 <_dtoa_r+0x248>
 800b92c:	9b05      	ldr	r3, [sp, #20]
 800b92e:	9a00      	ldr	r2, [sp, #0]
 800b930:	920a      	str	r2, [sp, #40]	; 0x28
 800b932:	4413      	add	r3, r2
 800b934:	9305      	str	r3, [sp, #20]
 800b936:	2300      	movs	r3, #0
 800b938:	9307      	str	r3, [sp, #28]
 800b93a:	9b06      	ldr	r3, [sp, #24]
 800b93c:	2b09      	cmp	r3, #9
 800b93e:	f200 8089 	bhi.w	800ba54 <_dtoa_r+0x2f4>
 800b942:	2b05      	cmp	r3, #5
 800b944:	bfc4      	itt	gt
 800b946:	3b04      	subgt	r3, #4
 800b948:	9306      	strgt	r3, [sp, #24]
 800b94a:	9b06      	ldr	r3, [sp, #24]
 800b94c:	f1a3 0302 	sub.w	r3, r3, #2
 800b950:	bfcc      	ite	gt
 800b952:	2500      	movgt	r5, #0
 800b954:	2501      	movle	r5, #1
 800b956:	2b03      	cmp	r3, #3
 800b958:	f200 8087 	bhi.w	800ba6a <_dtoa_r+0x30a>
 800b95c:	e8df f003 	tbb	[pc, r3]
 800b960:	59383a2d 	.word	0x59383a2d
 800b964:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b968:	441d      	add	r5, r3
 800b96a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b96e:	2b20      	cmp	r3, #32
 800b970:	bfc1      	itttt	gt
 800b972:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b976:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b97a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b97e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b982:	bfda      	itte	le
 800b984:	f1c3 0320 	rsble	r3, r3, #32
 800b988:	fa06 f003 	lslle.w	r0, r6, r3
 800b98c:	4318      	orrgt	r0, r3
 800b98e:	f7f4 fdc1 	bl	8000514 <__aeabi_ui2d>
 800b992:	2301      	movs	r3, #1
 800b994:	4606      	mov	r6, r0
 800b996:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b99a:	3d01      	subs	r5, #1
 800b99c:	930e      	str	r3, [sp, #56]	; 0x38
 800b99e:	e76a      	b.n	800b876 <_dtoa_r+0x116>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e7b2      	b.n	800b90a <_dtoa_r+0x1aa>
 800b9a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9a6:	e7b1      	b.n	800b90c <_dtoa_r+0x1ac>
 800b9a8:	9b04      	ldr	r3, [sp, #16]
 800b9aa:	9a00      	ldr	r2, [sp, #0]
 800b9ac:	1a9b      	subs	r3, r3, r2
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	4253      	negs	r3, r2
 800b9b2:	9307      	str	r3, [sp, #28]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9b8:	e7bf      	b.n	800b93a <_dtoa_r+0x1da>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	9308      	str	r3, [sp, #32]
 800b9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dc55      	bgt.n	800ba70 <_dtoa_r+0x310>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ce:	e00c      	b.n	800b9ea <_dtoa_r+0x28a>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e7f3      	b.n	800b9bc <_dtoa_r+0x25c>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d8:	9308      	str	r3, [sp, #32]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	4413      	add	r3, r2
 800b9de:	9302      	str	r3, [sp, #8]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	bfb8      	it	lt
 800b9e8:	2301      	movlt	r3, #1
 800b9ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	6042      	str	r2, [r0, #4]
 800b9f0:	2204      	movs	r2, #4
 800b9f2:	f102 0614 	add.w	r6, r2, #20
 800b9f6:	429e      	cmp	r6, r3
 800b9f8:	6841      	ldr	r1, [r0, #4]
 800b9fa:	d93d      	bls.n	800ba78 <_dtoa_r+0x318>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 fcb7 	bl	800c370 <_Balloc>
 800ba02:	9001      	str	r0, [sp, #4]
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d13b      	bne.n	800ba80 <_dtoa_r+0x320>
 800ba08:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <_dtoa_r+0x2f0>)
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba10:	e6c0      	b.n	800b794 <_dtoa_r+0x34>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e7df      	b.n	800b9d6 <_dtoa_r+0x276>
 800ba16:	bf00      	nop
 800ba18:	636f4361 	.word	0x636f4361
 800ba1c:	3fd287a7 	.word	0x3fd287a7
 800ba20:	8b60c8b3 	.word	0x8b60c8b3
 800ba24:	3fc68a28 	.word	0x3fc68a28
 800ba28:	509f79fb 	.word	0x509f79fb
 800ba2c:	3fd34413 	.word	0x3fd34413
 800ba30:	0800e009 	.word	0x0800e009
 800ba34:	0800e020 	.word	0x0800e020
 800ba38:	7ff00000 	.word	0x7ff00000
 800ba3c:	0800e005 	.word	0x0800e005
 800ba40:	0800dffc 	.word	0x0800dffc
 800ba44:	0800dfd9 	.word	0x0800dfd9
 800ba48:	3ff80000 	.word	0x3ff80000
 800ba4c:	0800e110 	.word	0x0800e110
 800ba50:	0800e07b 	.word	0x0800e07b
 800ba54:	2501      	movs	r5, #1
 800ba56:	2300      	movs	r3, #0
 800ba58:	9306      	str	r3, [sp, #24]
 800ba5a:	9508      	str	r5, [sp, #32]
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba64:	2200      	movs	r2, #0
 800ba66:	2312      	movs	r3, #18
 800ba68:	e7b0      	b.n	800b9cc <_dtoa_r+0x26c>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	9308      	str	r3, [sp, #32]
 800ba6e:	e7f5      	b.n	800ba5c <_dtoa_r+0x2fc>
 800ba70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba76:	e7b8      	b.n	800b9ea <_dtoa_r+0x28a>
 800ba78:	3101      	adds	r1, #1
 800ba7a:	6041      	str	r1, [r0, #4]
 800ba7c:	0052      	lsls	r2, r2, #1
 800ba7e:	e7b8      	b.n	800b9f2 <_dtoa_r+0x292>
 800ba80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba82:	9a01      	ldr	r2, [sp, #4]
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	2b0e      	cmp	r3, #14
 800ba8a:	f200 809d 	bhi.w	800bbc8 <_dtoa_r+0x468>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	f000 809a 	beq.w	800bbc8 <_dtoa_r+0x468>
 800ba94:	9b00      	ldr	r3, [sp, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dd32      	ble.n	800bb00 <_dtoa_r+0x3a0>
 800ba9a:	4ab7      	ldr	r2, [pc, #732]	; (800bd78 <_dtoa_r+0x618>)
 800ba9c:	f003 030f 	and.w	r3, r3, #15
 800baa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baa8:	9b00      	ldr	r3, [sp, #0]
 800baaa:	05d8      	lsls	r0, r3, #23
 800baac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bab0:	d516      	bpl.n	800bae0 <_dtoa_r+0x380>
 800bab2:	4bb2      	ldr	r3, [pc, #712]	; (800bd7c <_dtoa_r+0x61c>)
 800bab4:	ec51 0b19 	vmov	r0, r1, d9
 800bab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800babc:	f7f4 fece 	bl	800085c <__aeabi_ddiv>
 800bac0:	f007 070f 	and.w	r7, r7, #15
 800bac4:	4682      	mov	sl, r0
 800bac6:	468b      	mov	fp, r1
 800bac8:	2503      	movs	r5, #3
 800baca:	4eac      	ldr	r6, [pc, #688]	; (800bd7c <_dtoa_r+0x61c>)
 800bacc:	b957      	cbnz	r7, 800bae4 <_dtoa_r+0x384>
 800bace:	4642      	mov	r2, r8
 800bad0:	464b      	mov	r3, r9
 800bad2:	4650      	mov	r0, sl
 800bad4:	4659      	mov	r1, fp
 800bad6:	f7f4 fec1 	bl	800085c <__aeabi_ddiv>
 800bada:	4682      	mov	sl, r0
 800badc:	468b      	mov	fp, r1
 800bade:	e028      	b.n	800bb32 <_dtoa_r+0x3d2>
 800bae0:	2502      	movs	r5, #2
 800bae2:	e7f2      	b.n	800baca <_dtoa_r+0x36a>
 800bae4:	07f9      	lsls	r1, r7, #31
 800bae6:	d508      	bpl.n	800bafa <_dtoa_r+0x39a>
 800bae8:	4640      	mov	r0, r8
 800baea:	4649      	mov	r1, r9
 800baec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800baf0:	f7f4 fd8a 	bl	8000608 <__aeabi_dmul>
 800baf4:	3501      	adds	r5, #1
 800baf6:	4680      	mov	r8, r0
 800baf8:	4689      	mov	r9, r1
 800bafa:	107f      	asrs	r7, r7, #1
 800bafc:	3608      	adds	r6, #8
 800bafe:	e7e5      	b.n	800bacc <_dtoa_r+0x36c>
 800bb00:	f000 809b 	beq.w	800bc3a <_dtoa_r+0x4da>
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	4f9d      	ldr	r7, [pc, #628]	; (800bd7c <_dtoa_r+0x61c>)
 800bb08:	425e      	negs	r6, r3
 800bb0a:	4b9b      	ldr	r3, [pc, #620]	; (800bd78 <_dtoa_r+0x618>)
 800bb0c:	f006 020f 	and.w	r2, r6, #15
 800bb10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	ec51 0b19 	vmov	r0, r1, d9
 800bb1c:	f7f4 fd74 	bl	8000608 <__aeabi_dmul>
 800bb20:	1136      	asrs	r6, r6, #4
 800bb22:	4682      	mov	sl, r0
 800bb24:	468b      	mov	fp, r1
 800bb26:	2300      	movs	r3, #0
 800bb28:	2502      	movs	r5, #2
 800bb2a:	2e00      	cmp	r6, #0
 800bb2c:	d17a      	bne.n	800bc24 <_dtoa_r+0x4c4>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1d3      	bne.n	800bada <_dtoa_r+0x37a>
 800bb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 8082 	beq.w	800bc3e <_dtoa_r+0x4de>
 800bb3a:	4b91      	ldr	r3, [pc, #580]	; (800bd80 <_dtoa_r+0x620>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4650      	mov	r0, sl
 800bb40:	4659      	mov	r1, fp
 800bb42:	f7f4 ffd3 	bl	8000aec <__aeabi_dcmplt>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d079      	beq.n	800bc3e <_dtoa_r+0x4de>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d076      	beq.n	800bc3e <_dtoa_r+0x4de>
 800bb50:	9b02      	ldr	r3, [sp, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dd36      	ble.n	800bbc4 <_dtoa_r+0x464>
 800bb56:	9b00      	ldr	r3, [sp, #0]
 800bb58:	4650      	mov	r0, sl
 800bb5a:	4659      	mov	r1, fp
 800bb5c:	1e5f      	subs	r7, r3, #1
 800bb5e:	2200      	movs	r2, #0
 800bb60:	4b88      	ldr	r3, [pc, #544]	; (800bd84 <_dtoa_r+0x624>)
 800bb62:	f7f4 fd51 	bl	8000608 <__aeabi_dmul>
 800bb66:	9e02      	ldr	r6, [sp, #8]
 800bb68:	4682      	mov	sl, r0
 800bb6a:	468b      	mov	fp, r1
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7f4 fce0 	bl	8000534 <__aeabi_i2d>
 800bb74:	4652      	mov	r2, sl
 800bb76:	465b      	mov	r3, fp
 800bb78:	f7f4 fd46 	bl	8000608 <__aeabi_dmul>
 800bb7c:	4b82      	ldr	r3, [pc, #520]	; (800bd88 <_dtoa_r+0x628>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f7f4 fb8c 	bl	800029c <__adddf3>
 800bb84:	46d0      	mov	r8, sl
 800bb86:	46d9      	mov	r9, fp
 800bb88:	4682      	mov	sl, r0
 800bb8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	d158      	bne.n	800bc44 <_dtoa_r+0x4e4>
 800bb92:	4b7e      	ldr	r3, [pc, #504]	; (800bd8c <_dtoa_r+0x62c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 fb7d 	bl	8000298 <__aeabi_dsub>
 800bb9e:	4652      	mov	r2, sl
 800bba0:	465b      	mov	r3, fp
 800bba2:	4680      	mov	r8, r0
 800bba4:	4689      	mov	r9, r1
 800bba6:	f7f4 ffbf 	bl	8000b28 <__aeabi_dcmpgt>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f040 8295 	bne.w	800c0da <_dtoa_r+0x97a>
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 ff97 	bl	8000aec <__aeabi_dcmplt>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f040 8289 	bne.w	800c0d6 <_dtoa_r+0x976>
 800bbc4:	ec5b ab19 	vmov	sl, fp, d9
 800bbc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f2c0 8148 	blt.w	800be60 <_dtoa_r+0x700>
 800bbd0:	9a00      	ldr	r2, [sp, #0]
 800bbd2:	2a0e      	cmp	r2, #14
 800bbd4:	f300 8144 	bgt.w	800be60 <_dtoa_r+0x700>
 800bbd8:	4b67      	ldr	r3, [pc, #412]	; (800bd78 <_dtoa_r+0x618>)
 800bbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f280 80d5 	bge.w	800bd94 <_dtoa_r+0x634>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f300 80d1 	bgt.w	800bd94 <_dtoa_r+0x634>
 800bbf2:	f040 826f 	bne.w	800c0d4 <_dtoa_r+0x974>
 800bbf6:	4b65      	ldr	r3, [pc, #404]	; (800bd8c <_dtoa_r+0x62c>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	f7f4 fd03 	bl	8000608 <__aeabi_dmul>
 800bc02:	4652      	mov	r2, sl
 800bc04:	465b      	mov	r3, fp
 800bc06:	f7f4 ff85 	bl	8000b14 <__aeabi_dcmpge>
 800bc0a:	9e03      	ldr	r6, [sp, #12]
 800bc0c:	4637      	mov	r7, r6
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f040 8245 	bne.w	800c09e <_dtoa_r+0x93e>
 800bc14:	9d01      	ldr	r5, [sp, #4]
 800bc16:	2331      	movs	r3, #49	; 0x31
 800bc18:	f805 3b01 	strb.w	r3, [r5], #1
 800bc1c:	9b00      	ldr	r3, [sp, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	e240      	b.n	800c0a6 <_dtoa_r+0x946>
 800bc24:	07f2      	lsls	r2, r6, #31
 800bc26:	d505      	bpl.n	800bc34 <_dtoa_r+0x4d4>
 800bc28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc2c:	f7f4 fcec 	bl	8000608 <__aeabi_dmul>
 800bc30:	3501      	adds	r5, #1
 800bc32:	2301      	movs	r3, #1
 800bc34:	1076      	asrs	r6, r6, #1
 800bc36:	3708      	adds	r7, #8
 800bc38:	e777      	b.n	800bb2a <_dtoa_r+0x3ca>
 800bc3a:	2502      	movs	r5, #2
 800bc3c:	e779      	b.n	800bb32 <_dtoa_r+0x3d2>
 800bc3e:	9f00      	ldr	r7, [sp, #0]
 800bc40:	9e03      	ldr	r6, [sp, #12]
 800bc42:	e794      	b.n	800bb6e <_dtoa_r+0x40e>
 800bc44:	9901      	ldr	r1, [sp, #4]
 800bc46:	4b4c      	ldr	r3, [pc, #304]	; (800bd78 <_dtoa_r+0x618>)
 800bc48:	4431      	add	r1, r6
 800bc4a:	910d      	str	r1, [sp, #52]	; 0x34
 800bc4c:	9908      	ldr	r1, [sp, #32]
 800bc4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc56:	2900      	cmp	r1, #0
 800bc58:	d043      	beq.n	800bce2 <_dtoa_r+0x582>
 800bc5a:	494d      	ldr	r1, [pc, #308]	; (800bd90 <_dtoa_r+0x630>)
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f7f4 fdfd 	bl	800085c <__aeabi_ddiv>
 800bc62:	4652      	mov	r2, sl
 800bc64:	465b      	mov	r3, fp
 800bc66:	f7f4 fb17 	bl	8000298 <__aeabi_dsub>
 800bc6a:	9d01      	ldr	r5, [sp, #4]
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	468b      	mov	fp, r1
 800bc70:	4649      	mov	r1, r9
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7f4 ff78 	bl	8000b68 <__aeabi_d2iz>
 800bc78:	4606      	mov	r6, r0
 800bc7a:	f7f4 fc5b 	bl	8000534 <__aeabi_i2d>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fb07 	bl	8000298 <__aeabi_dsub>
 800bc8a:	3630      	adds	r6, #48	; 0x30
 800bc8c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc90:	4652      	mov	r2, sl
 800bc92:	465b      	mov	r3, fp
 800bc94:	4680      	mov	r8, r0
 800bc96:	4689      	mov	r9, r1
 800bc98:	f7f4 ff28 	bl	8000aec <__aeabi_dcmplt>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d163      	bne.n	800bd68 <_dtoa_r+0x608>
 800bca0:	4642      	mov	r2, r8
 800bca2:	464b      	mov	r3, r9
 800bca4:	4936      	ldr	r1, [pc, #216]	; (800bd80 <_dtoa_r+0x620>)
 800bca6:	2000      	movs	r0, #0
 800bca8:	f7f4 faf6 	bl	8000298 <__aeabi_dsub>
 800bcac:	4652      	mov	r2, sl
 800bcae:	465b      	mov	r3, fp
 800bcb0:	f7f4 ff1c 	bl	8000aec <__aeabi_dcmplt>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	f040 80b5 	bne.w	800be24 <_dtoa_r+0x6c4>
 800bcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	d081      	beq.n	800bbc4 <_dtoa_r+0x464>
 800bcc0:	4b30      	ldr	r3, [pc, #192]	; (800bd84 <_dtoa_r+0x624>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	4659      	mov	r1, fp
 800bcc8:	f7f4 fc9e 	bl	8000608 <__aeabi_dmul>
 800bccc:	4b2d      	ldr	r3, [pc, #180]	; (800bd84 <_dtoa_r+0x624>)
 800bcce:	4682      	mov	sl, r0
 800bcd0:	468b      	mov	fp, r1
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f7f4 fc96 	bl	8000608 <__aeabi_dmul>
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	e7c6      	b.n	800bc70 <_dtoa_r+0x510>
 800bce2:	4650      	mov	r0, sl
 800bce4:	4659      	mov	r1, fp
 800bce6:	f7f4 fc8f 	bl	8000608 <__aeabi_dmul>
 800bcea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcec:	9d01      	ldr	r5, [sp, #4]
 800bcee:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf0:	4682      	mov	sl, r0
 800bcf2:	468b      	mov	fp, r1
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	f7f4 ff36 	bl	8000b68 <__aeabi_d2iz>
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	f7f4 fc19 	bl	8000534 <__aeabi_i2d>
 800bd02:	3630      	adds	r6, #48	; 0x30
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 fac4 	bl	8000298 <__aeabi_dsub>
 800bd10:	f805 6b01 	strb.w	r6, [r5], #1
 800bd14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd16:	429d      	cmp	r5, r3
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4689      	mov	r9, r1
 800bd1c:	f04f 0200 	mov.w	r2, #0
 800bd20:	d124      	bne.n	800bd6c <_dtoa_r+0x60c>
 800bd22:	4b1b      	ldr	r3, [pc, #108]	; (800bd90 <_dtoa_r+0x630>)
 800bd24:	4650      	mov	r0, sl
 800bd26:	4659      	mov	r1, fp
 800bd28:	f7f4 fab8 	bl	800029c <__adddf3>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4640      	mov	r0, r8
 800bd32:	4649      	mov	r1, r9
 800bd34:	f7f4 fef8 	bl	8000b28 <__aeabi_dcmpgt>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d173      	bne.n	800be24 <_dtoa_r+0x6c4>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	4913      	ldr	r1, [pc, #76]	; (800bd90 <_dtoa_r+0x630>)
 800bd42:	2000      	movs	r0, #0
 800bd44:	f7f4 faa8 	bl	8000298 <__aeabi_dsub>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7f4 fecc 	bl	8000aec <__aeabi_dcmplt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f43f af35 	beq.w	800bbc4 <_dtoa_r+0x464>
 800bd5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd5c:	1e6b      	subs	r3, r5, #1
 800bd5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd64:	2b30      	cmp	r3, #48	; 0x30
 800bd66:	d0f8      	beq.n	800bd5a <_dtoa_r+0x5fa>
 800bd68:	9700      	str	r7, [sp, #0]
 800bd6a:	e049      	b.n	800be00 <_dtoa_r+0x6a0>
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <_dtoa_r+0x624>)
 800bd6e:	f7f4 fc4b 	bl	8000608 <__aeabi_dmul>
 800bd72:	4680      	mov	r8, r0
 800bd74:	4689      	mov	r9, r1
 800bd76:	e7bd      	b.n	800bcf4 <_dtoa_r+0x594>
 800bd78:	0800e110 	.word	0x0800e110
 800bd7c:	0800e0e8 	.word	0x0800e0e8
 800bd80:	3ff00000 	.word	0x3ff00000
 800bd84:	40240000 	.word	0x40240000
 800bd88:	401c0000 	.word	0x401c0000
 800bd8c:	40140000 	.word	0x40140000
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	9d01      	ldr	r5, [sp, #4]
 800bd96:	4656      	mov	r6, sl
 800bd98:	465f      	mov	r7, fp
 800bd9a:	4642      	mov	r2, r8
 800bd9c:	464b      	mov	r3, r9
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 fd5b 	bl	800085c <__aeabi_ddiv>
 800bda6:	f7f4 fedf 	bl	8000b68 <__aeabi_d2iz>
 800bdaa:	4682      	mov	sl, r0
 800bdac:	f7f4 fbc2 	bl	8000534 <__aeabi_i2d>
 800bdb0:	4642      	mov	r2, r8
 800bdb2:	464b      	mov	r3, r9
 800bdb4:	f7f4 fc28 	bl	8000608 <__aeabi_dmul>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bdc4:	f7f4 fa68 	bl	8000298 <__aeabi_dsub>
 800bdc8:	f805 6b01 	strb.w	r6, [r5], #1
 800bdcc:	9e01      	ldr	r6, [sp, #4]
 800bdce:	9f03      	ldr	r7, [sp, #12]
 800bdd0:	1bae      	subs	r6, r5, r6
 800bdd2:	42b7      	cmp	r7, r6
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	d135      	bne.n	800be46 <_dtoa_r+0x6e6>
 800bdda:	f7f4 fa5f 	bl	800029c <__adddf3>
 800bdde:	4642      	mov	r2, r8
 800bde0:	464b      	mov	r3, r9
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	f7f4 fe9f 	bl	8000b28 <__aeabi_dcmpgt>
 800bdea:	b9d0      	cbnz	r0, 800be22 <_dtoa_r+0x6c2>
 800bdec:	4642      	mov	r2, r8
 800bdee:	464b      	mov	r3, r9
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdf8:	b110      	cbz	r0, 800be00 <_dtoa_r+0x6a0>
 800bdfa:	f01a 0f01 	tst.w	sl, #1
 800bdfe:	d110      	bne.n	800be22 <_dtoa_r+0x6c2>
 800be00:	4620      	mov	r0, r4
 800be02:	ee18 1a10 	vmov	r1, s16
 800be06:	f000 faf3 	bl	800c3f0 <_Bfree>
 800be0a:	2300      	movs	r3, #0
 800be0c:	9800      	ldr	r0, [sp, #0]
 800be0e:	702b      	strb	r3, [r5, #0]
 800be10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be12:	3001      	adds	r0, #1
 800be14:	6018      	str	r0, [r3, #0]
 800be16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f43f acf1 	beq.w	800b800 <_dtoa_r+0xa0>
 800be1e:	601d      	str	r5, [r3, #0]
 800be20:	e4ee      	b.n	800b800 <_dtoa_r+0xa0>
 800be22:	9f00      	ldr	r7, [sp, #0]
 800be24:	462b      	mov	r3, r5
 800be26:	461d      	mov	r5, r3
 800be28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be2c:	2a39      	cmp	r2, #57	; 0x39
 800be2e:	d106      	bne.n	800be3e <_dtoa_r+0x6de>
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	429a      	cmp	r2, r3
 800be34:	d1f7      	bne.n	800be26 <_dtoa_r+0x6c6>
 800be36:	9901      	ldr	r1, [sp, #4]
 800be38:	2230      	movs	r2, #48	; 0x30
 800be3a:	3701      	adds	r7, #1
 800be3c:	700a      	strb	r2, [r1, #0]
 800be3e:	781a      	ldrb	r2, [r3, #0]
 800be40:	3201      	adds	r2, #1
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e790      	b.n	800bd68 <_dtoa_r+0x608>
 800be46:	4ba6      	ldr	r3, [pc, #664]	; (800c0e0 <_dtoa_r+0x980>)
 800be48:	2200      	movs	r2, #0
 800be4a:	f7f4 fbdd 	bl	8000608 <__aeabi_dmul>
 800be4e:	2200      	movs	r2, #0
 800be50:	2300      	movs	r3, #0
 800be52:	4606      	mov	r6, r0
 800be54:	460f      	mov	r7, r1
 800be56:	f7f4 fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d09d      	beq.n	800bd9a <_dtoa_r+0x63a>
 800be5e:	e7cf      	b.n	800be00 <_dtoa_r+0x6a0>
 800be60:	9a08      	ldr	r2, [sp, #32]
 800be62:	2a00      	cmp	r2, #0
 800be64:	f000 80d7 	beq.w	800c016 <_dtoa_r+0x8b6>
 800be68:	9a06      	ldr	r2, [sp, #24]
 800be6a:	2a01      	cmp	r2, #1
 800be6c:	f300 80ba 	bgt.w	800bfe4 <_dtoa_r+0x884>
 800be70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be72:	2a00      	cmp	r2, #0
 800be74:	f000 80b2 	beq.w	800bfdc <_dtoa_r+0x87c>
 800be78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be7c:	9e07      	ldr	r6, [sp, #28]
 800be7e:	9d04      	ldr	r5, [sp, #16]
 800be80:	9a04      	ldr	r2, [sp, #16]
 800be82:	441a      	add	r2, r3
 800be84:	9204      	str	r2, [sp, #16]
 800be86:	9a05      	ldr	r2, [sp, #20]
 800be88:	2101      	movs	r1, #1
 800be8a:	441a      	add	r2, r3
 800be8c:	4620      	mov	r0, r4
 800be8e:	9205      	str	r2, [sp, #20]
 800be90:	f000 fb66 	bl	800c560 <__i2b>
 800be94:	4607      	mov	r7, r0
 800be96:	2d00      	cmp	r5, #0
 800be98:	dd0c      	ble.n	800beb4 <_dtoa_r+0x754>
 800be9a:	9b05      	ldr	r3, [sp, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd09      	ble.n	800beb4 <_dtoa_r+0x754>
 800bea0:	42ab      	cmp	r3, r5
 800bea2:	9a04      	ldr	r2, [sp, #16]
 800bea4:	bfa8      	it	ge
 800bea6:	462b      	movge	r3, r5
 800bea8:	1ad2      	subs	r2, r2, r3
 800beaa:	9204      	str	r2, [sp, #16]
 800beac:	9a05      	ldr	r2, [sp, #20]
 800beae:	1aed      	subs	r5, r5, r3
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	9b07      	ldr	r3, [sp, #28]
 800beb6:	b31b      	cbz	r3, 800bf00 <_dtoa_r+0x7a0>
 800beb8:	9b08      	ldr	r3, [sp, #32]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 80af 	beq.w	800c01e <_dtoa_r+0x8be>
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	dd13      	ble.n	800beec <_dtoa_r+0x78c>
 800bec4:	4639      	mov	r1, r7
 800bec6:	4632      	mov	r2, r6
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 fc09 	bl	800c6e0 <__pow5mult>
 800bece:	ee18 2a10 	vmov	r2, s16
 800bed2:	4601      	mov	r1, r0
 800bed4:	4607      	mov	r7, r0
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 fb58 	bl	800c58c <__multiply>
 800bedc:	ee18 1a10 	vmov	r1, s16
 800bee0:	4680      	mov	r8, r0
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 fa84 	bl	800c3f0 <_Bfree>
 800bee8:	ee08 8a10 	vmov	s16, r8
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	1b9a      	subs	r2, r3, r6
 800bef0:	d006      	beq.n	800bf00 <_dtoa_r+0x7a0>
 800bef2:	ee18 1a10 	vmov	r1, s16
 800bef6:	4620      	mov	r0, r4
 800bef8:	f000 fbf2 	bl	800c6e0 <__pow5mult>
 800befc:	ee08 0a10 	vmov	s16, r0
 800bf00:	2101      	movs	r1, #1
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fb2c 	bl	800c560 <__i2b>
 800bf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	f340 8088 	ble.w	800c022 <_dtoa_r+0x8c2>
 800bf12:	461a      	mov	r2, r3
 800bf14:	4601      	mov	r1, r0
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 fbe2 	bl	800c6e0 <__pow5mult>
 800bf1c:	9b06      	ldr	r3, [sp, #24]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	4606      	mov	r6, r0
 800bf22:	f340 8081 	ble.w	800c028 <_dtoa_r+0x8c8>
 800bf26:	f04f 0800 	mov.w	r8, #0
 800bf2a:	6933      	ldr	r3, [r6, #16]
 800bf2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf30:	6918      	ldr	r0, [r3, #16]
 800bf32:	f000 fac5 	bl	800c4c0 <__hi0bits>
 800bf36:	f1c0 0020 	rsb	r0, r0, #32
 800bf3a:	9b05      	ldr	r3, [sp, #20]
 800bf3c:	4418      	add	r0, r3
 800bf3e:	f010 001f 	ands.w	r0, r0, #31
 800bf42:	f000 8092 	beq.w	800c06a <_dtoa_r+0x90a>
 800bf46:	f1c0 0320 	rsb	r3, r0, #32
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	f340 808a 	ble.w	800c064 <_dtoa_r+0x904>
 800bf50:	f1c0 001c 	rsb	r0, r0, #28
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	4403      	add	r3, r0
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	9b05      	ldr	r3, [sp, #20]
 800bf5c:	4403      	add	r3, r0
 800bf5e:	4405      	add	r5, r0
 800bf60:	9305      	str	r3, [sp, #20]
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd07      	ble.n	800bf78 <_dtoa_r+0x818>
 800bf68:	ee18 1a10 	vmov	r1, s16
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f000 fc10 	bl	800c794 <__lshift>
 800bf74:	ee08 0a10 	vmov	s16, r0
 800bf78:	9b05      	ldr	r3, [sp, #20]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dd05      	ble.n	800bf8a <_dtoa_r+0x82a>
 800bf7e:	4631      	mov	r1, r6
 800bf80:	461a      	mov	r2, r3
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 fc06 	bl	800c794 <__lshift>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d06e      	beq.n	800c06e <_dtoa_r+0x90e>
 800bf90:	ee18 0a10 	vmov	r0, s16
 800bf94:	4631      	mov	r1, r6
 800bf96:	f000 fc6d 	bl	800c874 <__mcmp>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	da67      	bge.n	800c06e <_dtoa_r+0x90e>
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	ee18 1a10 	vmov	r1, s16
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fa41 	bl	800c434 <__multadd>
 800bfb2:	9b08      	ldr	r3, [sp, #32]
 800bfb4:	ee08 0a10 	vmov	s16, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 81b1 	beq.w	800c320 <_dtoa_r+0xbc0>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	220a      	movs	r2, #10
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 fa35 	bl	800c434 <__multadd>
 800bfca:	9b02      	ldr	r3, [sp, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	4607      	mov	r7, r0
 800bfd0:	f300 808e 	bgt.w	800c0f0 <_dtoa_r+0x990>
 800bfd4:	9b06      	ldr	r3, [sp, #24]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	dc51      	bgt.n	800c07e <_dtoa_r+0x91e>
 800bfda:	e089      	b.n	800c0f0 <_dtoa_r+0x990>
 800bfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfe2:	e74b      	b.n	800be7c <_dtoa_r+0x71c>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	1e5e      	subs	r6, r3, #1
 800bfe8:	9b07      	ldr	r3, [sp, #28]
 800bfea:	42b3      	cmp	r3, r6
 800bfec:	bfbf      	itttt	lt
 800bfee:	9b07      	ldrlt	r3, [sp, #28]
 800bff0:	9607      	strlt	r6, [sp, #28]
 800bff2:	1af2      	sublt	r2, r6, r3
 800bff4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bff6:	bfb6      	itet	lt
 800bff8:	189b      	addlt	r3, r3, r2
 800bffa:	1b9e      	subge	r6, r3, r6
 800bffc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	bfb8      	it	lt
 800c002:	2600      	movlt	r6, #0
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfb7      	itett	lt
 800c008:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c00c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c010:	1a9d      	sublt	r5, r3, r2
 800c012:	2300      	movlt	r3, #0
 800c014:	e734      	b.n	800be80 <_dtoa_r+0x720>
 800c016:	9e07      	ldr	r6, [sp, #28]
 800c018:	9d04      	ldr	r5, [sp, #16]
 800c01a:	9f08      	ldr	r7, [sp, #32]
 800c01c:	e73b      	b.n	800be96 <_dtoa_r+0x736>
 800c01e:	9a07      	ldr	r2, [sp, #28]
 800c020:	e767      	b.n	800bef2 <_dtoa_r+0x792>
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	2b01      	cmp	r3, #1
 800c026:	dc18      	bgt.n	800c05a <_dtoa_r+0x8fa>
 800c028:	f1ba 0f00 	cmp.w	sl, #0
 800c02c:	d115      	bne.n	800c05a <_dtoa_r+0x8fa>
 800c02e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c032:	b993      	cbnz	r3, 800c05a <_dtoa_r+0x8fa>
 800c034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c038:	0d1b      	lsrs	r3, r3, #20
 800c03a:	051b      	lsls	r3, r3, #20
 800c03c:	b183      	cbz	r3, 800c060 <_dtoa_r+0x900>
 800c03e:	9b04      	ldr	r3, [sp, #16]
 800c040:	3301      	adds	r3, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	9b05      	ldr	r3, [sp, #20]
 800c046:	3301      	adds	r3, #1
 800c048:	9305      	str	r3, [sp, #20]
 800c04a:	f04f 0801 	mov.w	r8, #1
 800c04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c050:	2b00      	cmp	r3, #0
 800c052:	f47f af6a 	bne.w	800bf2a <_dtoa_r+0x7ca>
 800c056:	2001      	movs	r0, #1
 800c058:	e76f      	b.n	800bf3a <_dtoa_r+0x7da>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	e7f6      	b.n	800c04e <_dtoa_r+0x8ee>
 800c060:	4698      	mov	r8, r3
 800c062:	e7f4      	b.n	800c04e <_dtoa_r+0x8ee>
 800c064:	f43f af7d 	beq.w	800bf62 <_dtoa_r+0x802>
 800c068:	4618      	mov	r0, r3
 800c06a:	301c      	adds	r0, #28
 800c06c:	e772      	b.n	800bf54 <_dtoa_r+0x7f4>
 800c06e:	9b03      	ldr	r3, [sp, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	dc37      	bgt.n	800c0e4 <_dtoa_r+0x984>
 800c074:	9b06      	ldr	r3, [sp, #24]
 800c076:	2b02      	cmp	r3, #2
 800c078:	dd34      	ble.n	800c0e4 <_dtoa_r+0x984>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	9302      	str	r3, [sp, #8]
 800c07e:	9b02      	ldr	r3, [sp, #8]
 800c080:	b96b      	cbnz	r3, 800c09e <_dtoa_r+0x93e>
 800c082:	4631      	mov	r1, r6
 800c084:	2205      	movs	r2, #5
 800c086:	4620      	mov	r0, r4
 800c088:	f000 f9d4 	bl	800c434 <__multadd>
 800c08c:	4601      	mov	r1, r0
 800c08e:	4606      	mov	r6, r0
 800c090:	ee18 0a10 	vmov	r0, s16
 800c094:	f000 fbee 	bl	800c874 <__mcmp>
 800c098:	2800      	cmp	r0, #0
 800c09a:	f73f adbb 	bgt.w	800bc14 <_dtoa_r+0x4b4>
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	9d01      	ldr	r5, [sp, #4]
 800c0a2:	43db      	mvns	r3, r3
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	f04f 0800 	mov.w	r8, #0
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 f99f 	bl	800c3f0 <_Bfree>
 800c0b2:	2f00      	cmp	r7, #0
 800c0b4:	f43f aea4 	beq.w	800be00 <_dtoa_r+0x6a0>
 800c0b8:	f1b8 0f00 	cmp.w	r8, #0
 800c0bc:	d005      	beq.n	800c0ca <_dtoa_r+0x96a>
 800c0be:	45b8      	cmp	r8, r7
 800c0c0:	d003      	beq.n	800c0ca <_dtoa_r+0x96a>
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 f993 	bl	800c3f0 <_Bfree>
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 f98f 	bl	800c3f0 <_Bfree>
 800c0d2:	e695      	b.n	800be00 <_dtoa_r+0x6a0>
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	4637      	mov	r7, r6
 800c0d8:	e7e1      	b.n	800c09e <_dtoa_r+0x93e>
 800c0da:	9700      	str	r7, [sp, #0]
 800c0dc:	4637      	mov	r7, r6
 800c0de:	e599      	b.n	800bc14 <_dtoa_r+0x4b4>
 800c0e0:	40240000 	.word	0x40240000
 800c0e4:	9b08      	ldr	r3, [sp, #32]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 80ca 	beq.w	800c280 <_dtoa_r+0xb20>
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	9302      	str	r3, [sp, #8]
 800c0f0:	2d00      	cmp	r5, #0
 800c0f2:	dd05      	ble.n	800c100 <_dtoa_r+0x9a0>
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 fb4b 	bl	800c794 <__lshift>
 800c0fe:	4607      	mov	r7, r0
 800c100:	f1b8 0f00 	cmp.w	r8, #0
 800c104:	d05b      	beq.n	800c1be <_dtoa_r+0xa5e>
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 f931 	bl	800c370 <_Balloc>
 800c10e:	4605      	mov	r5, r0
 800c110:	b928      	cbnz	r0, 800c11e <_dtoa_r+0x9be>
 800c112:	4b87      	ldr	r3, [pc, #540]	; (800c330 <_dtoa_r+0xbd0>)
 800c114:	4602      	mov	r2, r0
 800c116:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c11a:	f7ff bb3b 	b.w	800b794 <_dtoa_r+0x34>
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	3202      	adds	r2, #2
 800c122:	0092      	lsls	r2, r2, #2
 800c124:	f107 010c 	add.w	r1, r7, #12
 800c128:	300c      	adds	r0, #12
 800c12a:	f000 f913 	bl	800c354 <memcpy>
 800c12e:	2201      	movs	r2, #1
 800c130:	4629      	mov	r1, r5
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fb2e 	bl	800c794 <__lshift>
 800c138:	9b01      	ldr	r3, [sp, #4]
 800c13a:	f103 0901 	add.w	r9, r3, #1
 800c13e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c142:	4413      	add	r3, r2
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	f00a 0301 	and.w	r3, sl, #1
 800c14a:	46b8      	mov	r8, r7
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	4607      	mov	r7, r0
 800c150:	4631      	mov	r1, r6
 800c152:	ee18 0a10 	vmov	r0, s16
 800c156:	f7ff fa75 	bl	800b644 <quorem>
 800c15a:	4641      	mov	r1, r8
 800c15c:	9002      	str	r0, [sp, #8]
 800c15e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c162:	ee18 0a10 	vmov	r0, s16
 800c166:	f000 fb85 	bl	800c874 <__mcmp>
 800c16a:	463a      	mov	r2, r7
 800c16c:	9003      	str	r0, [sp, #12]
 800c16e:	4631      	mov	r1, r6
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fb9b 	bl	800c8ac <__mdiff>
 800c176:	68c2      	ldr	r2, [r0, #12]
 800c178:	f109 3bff 	add.w	fp, r9, #4294967295
 800c17c:	4605      	mov	r5, r0
 800c17e:	bb02      	cbnz	r2, 800c1c2 <_dtoa_r+0xa62>
 800c180:	4601      	mov	r1, r0
 800c182:	ee18 0a10 	vmov	r0, s16
 800c186:	f000 fb75 	bl	800c874 <__mcmp>
 800c18a:	4602      	mov	r2, r0
 800c18c:	4629      	mov	r1, r5
 800c18e:	4620      	mov	r0, r4
 800c190:	9207      	str	r2, [sp, #28]
 800c192:	f000 f92d 	bl	800c3f0 <_Bfree>
 800c196:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c19a:	ea43 0102 	orr.w	r1, r3, r2
 800c19e:	9b04      	ldr	r3, [sp, #16]
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	464d      	mov	r5, r9
 800c1a4:	d10f      	bne.n	800c1c6 <_dtoa_r+0xa66>
 800c1a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1aa:	d02a      	beq.n	800c202 <_dtoa_r+0xaa2>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	dd02      	ble.n	800c1b8 <_dtoa_r+0xa58>
 800c1b2:	9b02      	ldr	r3, [sp, #8]
 800c1b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c1b8:	f88b a000 	strb.w	sl, [fp]
 800c1bc:	e775      	b.n	800c0aa <_dtoa_r+0x94a>
 800c1be:	4638      	mov	r0, r7
 800c1c0:	e7ba      	b.n	800c138 <_dtoa_r+0x9d8>
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	e7e2      	b.n	800c18c <_dtoa_r+0xa2c>
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	db04      	blt.n	800c1d6 <_dtoa_r+0xa76>
 800c1cc:	9906      	ldr	r1, [sp, #24]
 800c1ce:	430b      	orrs	r3, r1
 800c1d0:	9904      	ldr	r1, [sp, #16]
 800c1d2:	430b      	orrs	r3, r1
 800c1d4:	d122      	bne.n	800c21c <_dtoa_r+0xabc>
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	ddee      	ble.n	800c1b8 <_dtoa_r+0xa58>
 800c1da:	ee18 1a10 	vmov	r1, s16
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f000 fad7 	bl	800c794 <__lshift>
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	ee08 0a10 	vmov	s16, r0
 800c1ec:	f000 fb42 	bl	800c874 <__mcmp>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	dc03      	bgt.n	800c1fc <_dtoa_r+0xa9c>
 800c1f4:	d1e0      	bne.n	800c1b8 <_dtoa_r+0xa58>
 800c1f6:	f01a 0f01 	tst.w	sl, #1
 800c1fa:	d0dd      	beq.n	800c1b8 <_dtoa_r+0xa58>
 800c1fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c200:	d1d7      	bne.n	800c1b2 <_dtoa_r+0xa52>
 800c202:	2339      	movs	r3, #57	; 0x39
 800c204:	f88b 3000 	strb.w	r3, [fp]
 800c208:	462b      	mov	r3, r5
 800c20a:	461d      	mov	r5, r3
 800c20c:	3b01      	subs	r3, #1
 800c20e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c212:	2a39      	cmp	r2, #57	; 0x39
 800c214:	d071      	beq.n	800c2fa <_dtoa_r+0xb9a>
 800c216:	3201      	adds	r2, #1
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	e746      	b.n	800c0aa <_dtoa_r+0x94a>
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	dd07      	ble.n	800c230 <_dtoa_r+0xad0>
 800c220:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c224:	d0ed      	beq.n	800c202 <_dtoa_r+0xaa2>
 800c226:	f10a 0301 	add.w	r3, sl, #1
 800c22a:	f88b 3000 	strb.w	r3, [fp]
 800c22e:	e73c      	b.n	800c0aa <_dtoa_r+0x94a>
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c236:	4599      	cmp	r9, r3
 800c238:	d047      	beq.n	800c2ca <_dtoa_r+0xb6a>
 800c23a:	ee18 1a10 	vmov	r1, s16
 800c23e:	2300      	movs	r3, #0
 800c240:	220a      	movs	r2, #10
 800c242:	4620      	mov	r0, r4
 800c244:	f000 f8f6 	bl	800c434 <__multadd>
 800c248:	45b8      	cmp	r8, r7
 800c24a:	ee08 0a10 	vmov	s16, r0
 800c24e:	f04f 0300 	mov.w	r3, #0
 800c252:	f04f 020a 	mov.w	r2, #10
 800c256:	4641      	mov	r1, r8
 800c258:	4620      	mov	r0, r4
 800c25a:	d106      	bne.n	800c26a <_dtoa_r+0xb0a>
 800c25c:	f000 f8ea 	bl	800c434 <__multadd>
 800c260:	4680      	mov	r8, r0
 800c262:	4607      	mov	r7, r0
 800c264:	f109 0901 	add.w	r9, r9, #1
 800c268:	e772      	b.n	800c150 <_dtoa_r+0x9f0>
 800c26a:	f000 f8e3 	bl	800c434 <__multadd>
 800c26e:	4639      	mov	r1, r7
 800c270:	4680      	mov	r8, r0
 800c272:	2300      	movs	r3, #0
 800c274:	220a      	movs	r2, #10
 800c276:	4620      	mov	r0, r4
 800c278:	f000 f8dc 	bl	800c434 <__multadd>
 800c27c:	4607      	mov	r7, r0
 800c27e:	e7f1      	b.n	800c264 <_dtoa_r+0xb04>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	9d01      	ldr	r5, [sp, #4]
 800c286:	ee18 0a10 	vmov	r0, s16
 800c28a:	4631      	mov	r1, r6
 800c28c:	f7ff f9da 	bl	800b644 <quorem>
 800c290:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	f805 ab01 	strb.w	sl, [r5], #1
 800c29a:	1aea      	subs	r2, r5, r3
 800c29c:	9b02      	ldr	r3, [sp, #8]
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	dd09      	ble.n	800c2b6 <_dtoa_r+0xb56>
 800c2a2:	ee18 1a10 	vmov	r1, s16
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 f8c2 	bl	800c434 <__multadd>
 800c2b0:	ee08 0a10 	vmov	s16, r0
 800c2b4:	e7e7      	b.n	800c286 <_dtoa_r+0xb26>
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfc8      	it	gt
 800c2bc:	461d      	movgt	r5, r3
 800c2be:	9b01      	ldr	r3, [sp, #4]
 800c2c0:	bfd8      	it	le
 800c2c2:	2501      	movle	r5, #1
 800c2c4:	441d      	add	r5, r3
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	ee18 1a10 	vmov	r1, s16
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fa5f 	bl	800c794 <__lshift>
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	ee08 0a10 	vmov	s16, r0
 800c2dc:	f000 faca 	bl	800c874 <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dc91      	bgt.n	800c208 <_dtoa_r+0xaa8>
 800c2e4:	d102      	bne.n	800c2ec <_dtoa_r+0xb8c>
 800c2e6:	f01a 0f01 	tst.w	sl, #1
 800c2ea:	d18d      	bne.n	800c208 <_dtoa_r+0xaa8>
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	461d      	mov	r5, r3
 800c2f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2f4:	2a30      	cmp	r2, #48	; 0x30
 800c2f6:	d0fa      	beq.n	800c2ee <_dtoa_r+0xb8e>
 800c2f8:	e6d7      	b.n	800c0aa <_dtoa_r+0x94a>
 800c2fa:	9a01      	ldr	r2, [sp, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d184      	bne.n	800c20a <_dtoa_r+0xaaa>
 800c300:	9b00      	ldr	r3, [sp, #0]
 800c302:	3301      	adds	r3, #1
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	2331      	movs	r3, #49	; 0x31
 800c308:	7013      	strb	r3, [r2, #0]
 800c30a:	e6ce      	b.n	800c0aa <_dtoa_r+0x94a>
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <_dtoa_r+0xbd4>)
 800c30e:	f7ff ba95 	b.w	800b83c <_dtoa_r+0xdc>
 800c312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c314:	2b00      	cmp	r3, #0
 800c316:	f47f aa6e 	bne.w	800b7f6 <_dtoa_r+0x96>
 800c31a:	4b07      	ldr	r3, [pc, #28]	; (800c338 <_dtoa_r+0xbd8>)
 800c31c:	f7ff ba8e 	b.w	800b83c <_dtoa_r+0xdc>
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	dcae      	bgt.n	800c284 <_dtoa_r+0xb24>
 800c326:	9b06      	ldr	r3, [sp, #24]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	f73f aea8 	bgt.w	800c07e <_dtoa_r+0x91e>
 800c32e:	e7a9      	b.n	800c284 <_dtoa_r+0xb24>
 800c330:	0800e07b 	.word	0x0800e07b
 800c334:	0800dfd8 	.word	0x0800dfd8
 800c338:	0800dffc 	.word	0x0800dffc

0800c33c <_localeconv_r>:
 800c33c:	4800      	ldr	r0, [pc, #0]	; (800c340 <_localeconv_r+0x4>)
 800c33e:	4770      	bx	lr
 800c340:	200002cc 	.word	0x200002cc

0800c344 <malloc>:
 800c344:	4b02      	ldr	r3, [pc, #8]	; (800c350 <malloc+0xc>)
 800c346:	4601      	mov	r1, r0
 800c348:	6818      	ldr	r0, [r3, #0]
 800c34a:	f000 bc17 	b.w	800cb7c <_malloc_r>
 800c34e:	bf00      	nop
 800c350:	20000178 	.word	0x20000178

0800c354 <memcpy>:
 800c354:	440a      	add	r2, r1
 800c356:	4291      	cmp	r1, r2
 800c358:	f100 33ff 	add.w	r3, r0, #4294967295
 800c35c:	d100      	bne.n	800c360 <memcpy+0xc>
 800c35e:	4770      	bx	lr
 800c360:	b510      	push	{r4, lr}
 800c362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c36a:	4291      	cmp	r1, r2
 800c36c:	d1f9      	bne.n	800c362 <memcpy+0xe>
 800c36e:	bd10      	pop	{r4, pc}

0800c370 <_Balloc>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c374:	4604      	mov	r4, r0
 800c376:	460d      	mov	r5, r1
 800c378:	b976      	cbnz	r6, 800c398 <_Balloc+0x28>
 800c37a:	2010      	movs	r0, #16
 800c37c:	f7ff ffe2 	bl	800c344 <malloc>
 800c380:	4602      	mov	r2, r0
 800c382:	6260      	str	r0, [r4, #36]	; 0x24
 800c384:	b920      	cbnz	r0, 800c390 <_Balloc+0x20>
 800c386:	4b18      	ldr	r3, [pc, #96]	; (800c3e8 <_Balloc+0x78>)
 800c388:	4818      	ldr	r0, [pc, #96]	; (800c3ec <_Balloc+0x7c>)
 800c38a:	2166      	movs	r1, #102	; 0x66
 800c38c:	f000 fdd6 	bl	800cf3c <__assert_func>
 800c390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c394:	6006      	str	r6, [r0, #0]
 800c396:	60c6      	str	r6, [r0, #12]
 800c398:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c39a:	68f3      	ldr	r3, [r6, #12]
 800c39c:	b183      	cbz	r3, 800c3c0 <_Balloc+0x50>
 800c39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3a6:	b9b8      	cbnz	r0, 800c3d8 <_Balloc+0x68>
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	fa01 f605 	lsl.w	r6, r1, r5
 800c3ae:	1d72      	adds	r2, r6, #5
 800c3b0:	0092      	lsls	r2, r2, #2
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 fb60 	bl	800ca78 <_calloc_r>
 800c3b8:	b160      	cbz	r0, 800c3d4 <_Balloc+0x64>
 800c3ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3be:	e00e      	b.n	800c3de <_Balloc+0x6e>
 800c3c0:	2221      	movs	r2, #33	; 0x21
 800c3c2:	2104      	movs	r1, #4
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f000 fb57 	bl	800ca78 <_calloc_r>
 800c3ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3cc:	60f0      	str	r0, [r6, #12]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e4      	bne.n	800c39e <_Balloc+0x2e>
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	6802      	ldr	r2, [r0, #0]
 800c3da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3e4:	e7f7      	b.n	800c3d6 <_Balloc+0x66>
 800c3e6:	bf00      	nop
 800c3e8:	0800e009 	.word	0x0800e009
 800c3ec:	0800e08c 	.word	0x0800e08c

0800c3f0 <_Bfree>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	b976      	cbnz	r6, 800c418 <_Bfree+0x28>
 800c3fa:	2010      	movs	r0, #16
 800c3fc:	f7ff ffa2 	bl	800c344 <malloc>
 800c400:	4602      	mov	r2, r0
 800c402:	6268      	str	r0, [r5, #36]	; 0x24
 800c404:	b920      	cbnz	r0, 800c410 <_Bfree+0x20>
 800c406:	4b09      	ldr	r3, [pc, #36]	; (800c42c <_Bfree+0x3c>)
 800c408:	4809      	ldr	r0, [pc, #36]	; (800c430 <_Bfree+0x40>)
 800c40a:	218a      	movs	r1, #138	; 0x8a
 800c40c:	f000 fd96 	bl	800cf3c <__assert_func>
 800c410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c414:	6006      	str	r6, [r0, #0]
 800c416:	60c6      	str	r6, [r0, #12]
 800c418:	b13c      	cbz	r4, 800c42a <_Bfree+0x3a>
 800c41a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c41c:	6862      	ldr	r2, [r4, #4]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c424:	6021      	str	r1, [r4, #0]
 800c426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c42a:	bd70      	pop	{r4, r5, r6, pc}
 800c42c:	0800e009 	.word	0x0800e009
 800c430:	0800e08c 	.word	0x0800e08c

0800c434 <__multadd>:
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c438:	690d      	ldr	r5, [r1, #16]
 800c43a:	4607      	mov	r7, r0
 800c43c:	460c      	mov	r4, r1
 800c43e:	461e      	mov	r6, r3
 800c440:	f101 0c14 	add.w	ip, r1, #20
 800c444:	2000      	movs	r0, #0
 800c446:	f8dc 3000 	ldr.w	r3, [ip]
 800c44a:	b299      	uxth	r1, r3
 800c44c:	fb02 6101 	mla	r1, r2, r1, r6
 800c450:	0c1e      	lsrs	r6, r3, #16
 800c452:	0c0b      	lsrs	r3, r1, #16
 800c454:	fb02 3306 	mla	r3, r2, r6, r3
 800c458:	b289      	uxth	r1, r1
 800c45a:	3001      	adds	r0, #1
 800c45c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c460:	4285      	cmp	r5, r0
 800c462:	f84c 1b04 	str.w	r1, [ip], #4
 800c466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c46a:	dcec      	bgt.n	800c446 <__multadd+0x12>
 800c46c:	b30e      	cbz	r6, 800c4b2 <__multadd+0x7e>
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	42ab      	cmp	r3, r5
 800c472:	dc19      	bgt.n	800c4a8 <__multadd+0x74>
 800c474:	6861      	ldr	r1, [r4, #4]
 800c476:	4638      	mov	r0, r7
 800c478:	3101      	adds	r1, #1
 800c47a:	f7ff ff79 	bl	800c370 <_Balloc>
 800c47e:	4680      	mov	r8, r0
 800c480:	b928      	cbnz	r0, 800c48e <__multadd+0x5a>
 800c482:	4602      	mov	r2, r0
 800c484:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <__multadd+0x84>)
 800c486:	480d      	ldr	r0, [pc, #52]	; (800c4bc <__multadd+0x88>)
 800c488:	21b5      	movs	r1, #181	; 0xb5
 800c48a:	f000 fd57 	bl	800cf3c <__assert_func>
 800c48e:	6922      	ldr	r2, [r4, #16]
 800c490:	3202      	adds	r2, #2
 800c492:	f104 010c 	add.w	r1, r4, #12
 800c496:	0092      	lsls	r2, r2, #2
 800c498:	300c      	adds	r0, #12
 800c49a:	f7ff ff5b 	bl	800c354 <memcpy>
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	f7ff ffa5 	bl	800c3f0 <_Bfree>
 800c4a6:	4644      	mov	r4, r8
 800c4a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4ac:	3501      	adds	r5, #1
 800c4ae:	615e      	str	r6, [r3, #20]
 800c4b0:	6125      	str	r5, [r4, #16]
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b8:	0800e07b 	.word	0x0800e07b
 800c4bc:	0800e08c 	.word	0x0800e08c

0800c4c0 <__hi0bits>:
 800c4c0:	0c03      	lsrs	r3, r0, #16
 800c4c2:	041b      	lsls	r3, r3, #16
 800c4c4:	b9d3      	cbnz	r3, 800c4fc <__hi0bits+0x3c>
 800c4c6:	0400      	lsls	r0, r0, #16
 800c4c8:	2310      	movs	r3, #16
 800c4ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4ce:	bf04      	itt	eq
 800c4d0:	0200      	lsleq	r0, r0, #8
 800c4d2:	3308      	addeq	r3, #8
 800c4d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4d8:	bf04      	itt	eq
 800c4da:	0100      	lsleq	r0, r0, #4
 800c4dc:	3304      	addeq	r3, #4
 800c4de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4e2:	bf04      	itt	eq
 800c4e4:	0080      	lsleq	r0, r0, #2
 800c4e6:	3302      	addeq	r3, #2
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	db05      	blt.n	800c4f8 <__hi0bits+0x38>
 800c4ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4f0:	f103 0301 	add.w	r3, r3, #1
 800c4f4:	bf08      	it	eq
 800c4f6:	2320      	moveq	r3, #32
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	4770      	bx	lr
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e7e4      	b.n	800c4ca <__hi0bits+0xa>

0800c500 <__lo0bits>:
 800c500:	6803      	ldr	r3, [r0, #0]
 800c502:	f013 0207 	ands.w	r2, r3, #7
 800c506:	4601      	mov	r1, r0
 800c508:	d00b      	beq.n	800c522 <__lo0bits+0x22>
 800c50a:	07da      	lsls	r2, r3, #31
 800c50c:	d423      	bmi.n	800c556 <__lo0bits+0x56>
 800c50e:	0798      	lsls	r0, r3, #30
 800c510:	bf49      	itett	mi
 800c512:	085b      	lsrmi	r3, r3, #1
 800c514:	089b      	lsrpl	r3, r3, #2
 800c516:	2001      	movmi	r0, #1
 800c518:	600b      	strmi	r3, [r1, #0]
 800c51a:	bf5c      	itt	pl
 800c51c:	600b      	strpl	r3, [r1, #0]
 800c51e:	2002      	movpl	r0, #2
 800c520:	4770      	bx	lr
 800c522:	b298      	uxth	r0, r3
 800c524:	b9a8      	cbnz	r0, 800c552 <__lo0bits+0x52>
 800c526:	0c1b      	lsrs	r3, r3, #16
 800c528:	2010      	movs	r0, #16
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	b90a      	cbnz	r2, 800c532 <__lo0bits+0x32>
 800c52e:	3008      	adds	r0, #8
 800c530:	0a1b      	lsrs	r3, r3, #8
 800c532:	071a      	lsls	r2, r3, #28
 800c534:	bf04      	itt	eq
 800c536:	091b      	lsreq	r3, r3, #4
 800c538:	3004      	addeq	r0, #4
 800c53a:	079a      	lsls	r2, r3, #30
 800c53c:	bf04      	itt	eq
 800c53e:	089b      	lsreq	r3, r3, #2
 800c540:	3002      	addeq	r0, #2
 800c542:	07da      	lsls	r2, r3, #31
 800c544:	d403      	bmi.n	800c54e <__lo0bits+0x4e>
 800c546:	085b      	lsrs	r3, r3, #1
 800c548:	f100 0001 	add.w	r0, r0, #1
 800c54c:	d005      	beq.n	800c55a <__lo0bits+0x5a>
 800c54e:	600b      	str	r3, [r1, #0]
 800c550:	4770      	bx	lr
 800c552:	4610      	mov	r0, r2
 800c554:	e7e9      	b.n	800c52a <__lo0bits+0x2a>
 800c556:	2000      	movs	r0, #0
 800c558:	4770      	bx	lr
 800c55a:	2020      	movs	r0, #32
 800c55c:	4770      	bx	lr
	...

0800c560 <__i2b>:
 800c560:	b510      	push	{r4, lr}
 800c562:	460c      	mov	r4, r1
 800c564:	2101      	movs	r1, #1
 800c566:	f7ff ff03 	bl	800c370 <_Balloc>
 800c56a:	4602      	mov	r2, r0
 800c56c:	b928      	cbnz	r0, 800c57a <__i2b+0x1a>
 800c56e:	4b05      	ldr	r3, [pc, #20]	; (800c584 <__i2b+0x24>)
 800c570:	4805      	ldr	r0, [pc, #20]	; (800c588 <__i2b+0x28>)
 800c572:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c576:	f000 fce1 	bl	800cf3c <__assert_func>
 800c57a:	2301      	movs	r3, #1
 800c57c:	6144      	str	r4, [r0, #20]
 800c57e:	6103      	str	r3, [r0, #16]
 800c580:	bd10      	pop	{r4, pc}
 800c582:	bf00      	nop
 800c584:	0800e07b 	.word	0x0800e07b
 800c588:	0800e08c 	.word	0x0800e08c

0800c58c <__multiply>:
 800c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	4691      	mov	r9, r2
 800c592:	690a      	ldr	r2, [r1, #16]
 800c594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	bfb8      	it	lt
 800c59c:	460b      	movlt	r3, r1
 800c59e:	460c      	mov	r4, r1
 800c5a0:	bfbc      	itt	lt
 800c5a2:	464c      	movlt	r4, r9
 800c5a4:	4699      	movlt	r9, r3
 800c5a6:	6927      	ldr	r7, [r4, #16]
 800c5a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5ac:	68a3      	ldr	r3, [r4, #8]
 800c5ae:	6861      	ldr	r1, [r4, #4]
 800c5b0:	eb07 060a 	add.w	r6, r7, sl
 800c5b4:	42b3      	cmp	r3, r6
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	bfb8      	it	lt
 800c5ba:	3101      	addlt	r1, #1
 800c5bc:	f7ff fed8 	bl	800c370 <_Balloc>
 800c5c0:	b930      	cbnz	r0, 800c5d0 <__multiply+0x44>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b44      	ldr	r3, [pc, #272]	; (800c6d8 <__multiply+0x14c>)
 800c5c6:	4845      	ldr	r0, [pc, #276]	; (800c6dc <__multiply+0x150>)
 800c5c8:	f240 115d 	movw	r1, #349	; 0x15d
 800c5cc:	f000 fcb6 	bl	800cf3c <__assert_func>
 800c5d0:	f100 0514 	add.w	r5, r0, #20
 800c5d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5d8:	462b      	mov	r3, r5
 800c5da:	2200      	movs	r2, #0
 800c5dc:	4543      	cmp	r3, r8
 800c5de:	d321      	bcc.n	800c624 <__multiply+0x98>
 800c5e0:	f104 0314 	add.w	r3, r4, #20
 800c5e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5e8:	f109 0314 	add.w	r3, r9, #20
 800c5ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5f0:	9202      	str	r2, [sp, #8]
 800c5f2:	1b3a      	subs	r2, r7, r4
 800c5f4:	3a15      	subs	r2, #21
 800c5f6:	f022 0203 	bic.w	r2, r2, #3
 800c5fa:	3204      	adds	r2, #4
 800c5fc:	f104 0115 	add.w	r1, r4, #21
 800c600:	428f      	cmp	r7, r1
 800c602:	bf38      	it	cc
 800c604:	2204      	movcc	r2, #4
 800c606:	9201      	str	r2, [sp, #4]
 800c608:	9a02      	ldr	r2, [sp, #8]
 800c60a:	9303      	str	r3, [sp, #12]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d80c      	bhi.n	800c62a <__multiply+0x9e>
 800c610:	2e00      	cmp	r6, #0
 800c612:	dd03      	ble.n	800c61c <__multiply+0x90>
 800c614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d05a      	beq.n	800c6d2 <__multiply+0x146>
 800c61c:	6106      	str	r6, [r0, #16]
 800c61e:	b005      	add	sp, #20
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	f843 2b04 	str.w	r2, [r3], #4
 800c628:	e7d8      	b.n	800c5dc <__multiply+0x50>
 800c62a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c62e:	f1ba 0f00 	cmp.w	sl, #0
 800c632:	d024      	beq.n	800c67e <__multiply+0xf2>
 800c634:	f104 0e14 	add.w	lr, r4, #20
 800c638:	46a9      	mov	r9, r5
 800c63a:	f04f 0c00 	mov.w	ip, #0
 800c63e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c642:	f8d9 1000 	ldr.w	r1, [r9]
 800c646:	fa1f fb82 	uxth.w	fp, r2
 800c64a:	b289      	uxth	r1, r1
 800c64c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c654:	f8d9 2000 	ldr.w	r2, [r9]
 800c658:	4461      	add	r1, ip
 800c65a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c65e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c666:	b289      	uxth	r1, r1
 800c668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c66c:	4577      	cmp	r7, lr
 800c66e:	f849 1b04 	str.w	r1, [r9], #4
 800c672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c676:	d8e2      	bhi.n	800c63e <__multiply+0xb2>
 800c678:	9a01      	ldr	r2, [sp, #4]
 800c67a:	f845 c002 	str.w	ip, [r5, r2]
 800c67e:	9a03      	ldr	r2, [sp, #12]
 800c680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c684:	3304      	adds	r3, #4
 800c686:	f1b9 0f00 	cmp.w	r9, #0
 800c68a:	d020      	beq.n	800c6ce <__multiply+0x142>
 800c68c:	6829      	ldr	r1, [r5, #0]
 800c68e:	f104 0c14 	add.w	ip, r4, #20
 800c692:	46ae      	mov	lr, r5
 800c694:	f04f 0a00 	mov.w	sl, #0
 800c698:	f8bc b000 	ldrh.w	fp, [ip]
 800c69c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6a0:	fb09 220b 	mla	r2, r9, fp, r2
 800c6a4:	4492      	add	sl, r2
 800c6a6:	b289      	uxth	r1, r1
 800c6a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c6ac:	f84e 1b04 	str.w	r1, [lr], #4
 800c6b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6b4:	f8be 1000 	ldrh.w	r1, [lr]
 800c6b8:	0c12      	lsrs	r2, r2, #16
 800c6ba:	fb09 1102 	mla	r1, r9, r2, r1
 800c6be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c6c2:	4567      	cmp	r7, ip
 800c6c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6c8:	d8e6      	bhi.n	800c698 <__multiply+0x10c>
 800c6ca:	9a01      	ldr	r2, [sp, #4]
 800c6cc:	50a9      	str	r1, [r5, r2]
 800c6ce:	3504      	adds	r5, #4
 800c6d0:	e79a      	b.n	800c608 <__multiply+0x7c>
 800c6d2:	3e01      	subs	r6, #1
 800c6d4:	e79c      	b.n	800c610 <__multiply+0x84>
 800c6d6:	bf00      	nop
 800c6d8:	0800e07b 	.word	0x0800e07b
 800c6dc:	0800e08c 	.word	0x0800e08c

0800c6e0 <__pow5mult>:
 800c6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e4:	4615      	mov	r5, r2
 800c6e6:	f012 0203 	ands.w	r2, r2, #3
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	460f      	mov	r7, r1
 800c6ee:	d007      	beq.n	800c700 <__pow5mult+0x20>
 800c6f0:	4c25      	ldr	r4, [pc, #148]	; (800c788 <__pow5mult+0xa8>)
 800c6f2:	3a01      	subs	r2, #1
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6fa:	f7ff fe9b 	bl	800c434 <__multadd>
 800c6fe:	4607      	mov	r7, r0
 800c700:	10ad      	asrs	r5, r5, #2
 800c702:	d03d      	beq.n	800c780 <__pow5mult+0xa0>
 800c704:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c706:	b97c      	cbnz	r4, 800c728 <__pow5mult+0x48>
 800c708:	2010      	movs	r0, #16
 800c70a:	f7ff fe1b 	bl	800c344 <malloc>
 800c70e:	4602      	mov	r2, r0
 800c710:	6270      	str	r0, [r6, #36]	; 0x24
 800c712:	b928      	cbnz	r0, 800c720 <__pow5mult+0x40>
 800c714:	4b1d      	ldr	r3, [pc, #116]	; (800c78c <__pow5mult+0xac>)
 800c716:	481e      	ldr	r0, [pc, #120]	; (800c790 <__pow5mult+0xb0>)
 800c718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c71c:	f000 fc0e 	bl	800cf3c <__assert_func>
 800c720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c724:	6004      	str	r4, [r0, #0]
 800c726:	60c4      	str	r4, [r0, #12]
 800c728:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c72c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c730:	b94c      	cbnz	r4, 800c746 <__pow5mult+0x66>
 800c732:	f240 2171 	movw	r1, #625	; 0x271
 800c736:	4630      	mov	r0, r6
 800c738:	f7ff ff12 	bl	800c560 <__i2b>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c742:	4604      	mov	r4, r0
 800c744:	6003      	str	r3, [r0, #0]
 800c746:	f04f 0900 	mov.w	r9, #0
 800c74a:	07eb      	lsls	r3, r5, #31
 800c74c:	d50a      	bpl.n	800c764 <__pow5mult+0x84>
 800c74e:	4639      	mov	r1, r7
 800c750:	4622      	mov	r2, r4
 800c752:	4630      	mov	r0, r6
 800c754:	f7ff ff1a 	bl	800c58c <__multiply>
 800c758:	4639      	mov	r1, r7
 800c75a:	4680      	mov	r8, r0
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7ff fe47 	bl	800c3f0 <_Bfree>
 800c762:	4647      	mov	r7, r8
 800c764:	106d      	asrs	r5, r5, #1
 800c766:	d00b      	beq.n	800c780 <__pow5mult+0xa0>
 800c768:	6820      	ldr	r0, [r4, #0]
 800c76a:	b938      	cbnz	r0, 800c77c <__pow5mult+0x9c>
 800c76c:	4622      	mov	r2, r4
 800c76e:	4621      	mov	r1, r4
 800c770:	4630      	mov	r0, r6
 800c772:	f7ff ff0b 	bl	800c58c <__multiply>
 800c776:	6020      	str	r0, [r4, #0]
 800c778:	f8c0 9000 	str.w	r9, [r0]
 800c77c:	4604      	mov	r4, r0
 800c77e:	e7e4      	b.n	800c74a <__pow5mult+0x6a>
 800c780:	4638      	mov	r0, r7
 800c782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c786:	bf00      	nop
 800c788:	0800e1d8 	.word	0x0800e1d8
 800c78c:	0800e009 	.word	0x0800e009
 800c790:	0800e08c 	.word	0x0800e08c

0800c794 <__lshift>:
 800c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c798:	460c      	mov	r4, r1
 800c79a:	6849      	ldr	r1, [r1, #4]
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7a2:	68a3      	ldr	r3, [r4, #8]
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	4691      	mov	r9, r2
 800c7a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7ac:	f108 0601 	add.w	r6, r8, #1
 800c7b0:	42b3      	cmp	r3, r6
 800c7b2:	db0b      	blt.n	800c7cc <__lshift+0x38>
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff fddb 	bl	800c370 <_Balloc>
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	b948      	cbnz	r0, 800c7d2 <__lshift+0x3e>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	4b2a      	ldr	r3, [pc, #168]	; (800c86c <__lshift+0xd8>)
 800c7c2:	482b      	ldr	r0, [pc, #172]	; (800c870 <__lshift+0xdc>)
 800c7c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7c8:	f000 fbb8 	bl	800cf3c <__assert_func>
 800c7cc:	3101      	adds	r1, #1
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	e7ee      	b.n	800c7b0 <__lshift+0x1c>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f100 0114 	add.w	r1, r0, #20
 800c7d8:	f100 0210 	add.w	r2, r0, #16
 800c7dc:	4618      	mov	r0, r3
 800c7de:	4553      	cmp	r3, sl
 800c7e0:	db37      	blt.n	800c852 <__lshift+0xbe>
 800c7e2:	6920      	ldr	r0, [r4, #16]
 800c7e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7e8:	f104 0314 	add.w	r3, r4, #20
 800c7ec:	f019 091f 	ands.w	r9, r9, #31
 800c7f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7f8:	d02f      	beq.n	800c85a <__lshift+0xc6>
 800c7fa:	f1c9 0e20 	rsb	lr, r9, #32
 800c7fe:	468a      	mov	sl, r1
 800c800:	f04f 0c00 	mov.w	ip, #0
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	fa02 f209 	lsl.w	r2, r2, r9
 800c80a:	ea42 020c 	orr.w	r2, r2, ip
 800c80e:	f84a 2b04 	str.w	r2, [sl], #4
 800c812:	f853 2b04 	ldr.w	r2, [r3], #4
 800c816:	4298      	cmp	r0, r3
 800c818:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c81c:	d8f2      	bhi.n	800c804 <__lshift+0x70>
 800c81e:	1b03      	subs	r3, r0, r4
 800c820:	3b15      	subs	r3, #21
 800c822:	f023 0303 	bic.w	r3, r3, #3
 800c826:	3304      	adds	r3, #4
 800c828:	f104 0215 	add.w	r2, r4, #21
 800c82c:	4290      	cmp	r0, r2
 800c82e:	bf38      	it	cc
 800c830:	2304      	movcc	r3, #4
 800c832:	f841 c003 	str.w	ip, [r1, r3]
 800c836:	f1bc 0f00 	cmp.w	ip, #0
 800c83a:	d001      	beq.n	800c840 <__lshift+0xac>
 800c83c:	f108 0602 	add.w	r6, r8, #2
 800c840:	3e01      	subs	r6, #1
 800c842:	4638      	mov	r0, r7
 800c844:	612e      	str	r6, [r5, #16]
 800c846:	4621      	mov	r1, r4
 800c848:	f7ff fdd2 	bl	800c3f0 <_Bfree>
 800c84c:	4628      	mov	r0, r5
 800c84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c852:	f842 0f04 	str.w	r0, [r2, #4]!
 800c856:	3301      	adds	r3, #1
 800c858:	e7c1      	b.n	800c7de <__lshift+0x4a>
 800c85a:	3904      	subs	r1, #4
 800c85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c860:	f841 2f04 	str.w	r2, [r1, #4]!
 800c864:	4298      	cmp	r0, r3
 800c866:	d8f9      	bhi.n	800c85c <__lshift+0xc8>
 800c868:	e7ea      	b.n	800c840 <__lshift+0xac>
 800c86a:	bf00      	nop
 800c86c:	0800e07b 	.word	0x0800e07b
 800c870:	0800e08c 	.word	0x0800e08c

0800c874 <__mcmp>:
 800c874:	b530      	push	{r4, r5, lr}
 800c876:	6902      	ldr	r2, [r0, #16]
 800c878:	690c      	ldr	r4, [r1, #16]
 800c87a:	1b12      	subs	r2, r2, r4
 800c87c:	d10e      	bne.n	800c89c <__mcmp+0x28>
 800c87e:	f100 0314 	add.w	r3, r0, #20
 800c882:	3114      	adds	r1, #20
 800c884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c88c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c894:	42a5      	cmp	r5, r4
 800c896:	d003      	beq.n	800c8a0 <__mcmp+0x2c>
 800c898:	d305      	bcc.n	800c8a6 <__mcmp+0x32>
 800c89a:	2201      	movs	r2, #1
 800c89c:	4610      	mov	r0, r2
 800c89e:	bd30      	pop	{r4, r5, pc}
 800c8a0:	4283      	cmp	r3, r0
 800c8a2:	d3f3      	bcc.n	800c88c <__mcmp+0x18>
 800c8a4:	e7fa      	b.n	800c89c <__mcmp+0x28>
 800c8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8aa:	e7f7      	b.n	800c89c <__mcmp+0x28>

0800c8ac <__mdiff>:
 800c8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	4690      	mov	r8, r2
 800c8ba:	f7ff ffdb 	bl	800c874 <__mcmp>
 800c8be:	1e05      	subs	r5, r0, #0
 800c8c0:	d110      	bne.n	800c8e4 <__mdiff+0x38>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff fd53 	bl	800c370 <_Balloc>
 800c8ca:	b930      	cbnz	r0, 800c8da <__mdiff+0x2e>
 800c8cc:	4b3a      	ldr	r3, [pc, #232]	; (800c9b8 <__mdiff+0x10c>)
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	f240 2132 	movw	r1, #562	; 0x232
 800c8d4:	4839      	ldr	r0, [pc, #228]	; (800c9bc <__mdiff+0x110>)
 800c8d6:	f000 fb31 	bl	800cf3c <__assert_func>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	bfa4      	itt	ge
 800c8e6:	4643      	movge	r3, r8
 800c8e8:	46a0      	movge	r8, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8f0:	bfa6      	itte	ge
 800c8f2:	461c      	movge	r4, r3
 800c8f4:	2500      	movge	r5, #0
 800c8f6:	2501      	movlt	r5, #1
 800c8f8:	f7ff fd3a 	bl	800c370 <_Balloc>
 800c8fc:	b920      	cbnz	r0, 800c908 <__mdiff+0x5c>
 800c8fe:	4b2e      	ldr	r3, [pc, #184]	; (800c9b8 <__mdiff+0x10c>)
 800c900:	4602      	mov	r2, r0
 800c902:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c906:	e7e5      	b.n	800c8d4 <__mdiff+0x28>
 800c908:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c90c:	6926      	ldr	r6, [r4, #16]
 800c90e:	60c5      	str	r5, [r0, #12]
 800c910:	f104 0914 	add.w	r9, r4, #20
 800c914:	f108 0514 	add.w	r5, r8, #20
 800c918:	f100 0e14 	add.w	lr, r0, #20
 800c91c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c924:	f108 0210 	add.w	r2, r8, #16
 800c928:	46f2      	mov	sl, lr
 800c92a:	2100      	movs	r1, #0
 800c92c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c934:	fa1f f883 	uxth.w	r8, r3
 800c938:	fa11 f18b 	uxtah	r1, r1, fp
 800c93c:	0c1b      	lsrs	r3, r3, #16
 800c93e:	eba1 0808 	sub.w	r8, r1, r8
 800c942:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c946:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c94a:	fa1f f888 	uxth.w	r8, r8
 800c94e:	1419      	asrs	r1, r3, #16
 800c950:	454e      	cmp	r6, r9
 800c952:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c956:	f84a 3b04 	str.w	r3, [sl], #4
 800c95a:	d8e7      	bhi.n	800c92c <__mdiff+0x80>
 800c95c:	1b33      	subs	r3, r6, r4
 800c95e:	3b15      	subs	r3, #21
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	3304      	adds	r3, #4
 800c966:	3415      	adds	r4, #21
 800c968:	42a6      	cmp	r6, r4
 800c96a:	bf38      	it	cc
 800c96c:	2304      	movcc	r3, #4
 800c96e:	441d      	add	r5, r3
 800c970:	4473      	add	r3, lr
 800c972:	469e      	mov	lr, r3
 800c974:	462e      	mov	r6, r5
 800c976:	4566      	cmp	r6, ip
 800c978:	d30e      	bcc.n	800c998 <__mdiff+0xec>
 800c97a:	f10c 0203 	add.w	r2, ip, #3
 800c97e:	1b52      	subs	r2, r2, r5
 800c980:	f022 0203 	bic.w	r2, r2, #3
 800c984:	3d03      	subs	r5, #3
 800c986:	45ac      	cmp	ip, r5
 800c988:	bf38      	it	cc
 800c98a:	2200      	movcc	r2, #0
 800c98c:	441a      	add	r2, r3
 800c98e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c992:	b17b      	cbz	r3, 800c9b4 <__mdiff+0x108>
 800c994:	6107      	str	r7, [r0, #16]
 800c996:	e7a3      	b.n	800c8e0 <__mdiff+0x34>
 800c998:	f856 8b04 	ldr.w	r8, [r6], #4
 800c99c:	fa11 f288 	uxtah	r2, r1, r8
 800c9a0:	1414      	asrs	r4, r2, #16
 800c9a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9a6:	b292      	uxth	r2, r2
 800c9a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c9b0:	1421      	asrs	r1, r4, #16
 800c9b2:	e7e0      	b.n	800c976 <__mdiff+0xca>
 800c9b4:	3f01      	subs	r7, #1
 800c9b6:	e7ea      	b.n	800c98e <__mdiff+0xe2>
 800c9b8:	0800e07b 	.word	0x0800e07b
 800c9bc:	0800e08c 	.word	0x0800e08c

0800c9c0 <__d2b>:
 800c9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	4689      	mov	r9, r1
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	ec57 6b10 	vmov	r6, r7, d0
 800c9cc:	4690      	mov	r8, r2
 800c9ce:	f7ff fccf 	bl	800c370 <_Balloc>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	b930      	cbnz	r0, 800c9e4 <__d2b+0x24>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	4b25      	ldr	r3, [pc, #148]	; (800ca70 <__d2b+0xb0>)
 800c9da:	4826      	ldr	r0, [pc, #152]	; (800ca74 <__d2b+0xb4>)
 800c9dc:	f240 310a 	movw	r1, #778	; 0x30a
 800c9e0:	f000 faac 	bl	800cf3c <__assert_func>
 800c9e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9ec:	bb35      	cbnz	r5, 800ca3c <__d2b+0x7c>
 800c9ee:	2e00      	cmp	r6, #0
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	d028      	beq.n	800ca46 <__d2b+0x86>
 800c9f4:	4668      	mov	r0, sp
 800c9f6:	9600      	str	r6, [sp, #0]
 800c9f8:	f7ff fd82 	bl	800c500 <__lo0bits>
 800c9fc:	9900      	ldr	r1, [sp, #0]
 800c9fe:	b300      	cbz	r0, 800ca42 <__d2b+0x82>
 800ca00:	9a01      	ldr	r2, [sp, #4]
 800ca02:	f1c0 0320 	rsb	r3, r0, #32
 800ca06:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0a:	430b      	orrs	r3, r1
 800ca0c:	40c2      	lsrs	r2, r0
 800ca0e:	6163      	str	r3, [r4, #20]
 800ca10:	9201      	str	r2, [sp, #4]
 800ca12:	9b01      	ldr	r3, [sp, #4]
 800ca14:	61a3      	str	r3, [r4, #24]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bf14      	ite	ne
 800ca1a:	2202      	movne	r2, #2
 800ca1c:	2201      	moveq	r2, #1
 800ca1e:	6122      	str	r2, [r4, #16]
 800ca20:	b1d5      	cbz	r5, 800ca58 <__d2b+0x98>
 800ca22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca26:	4405      	add	r5, r0
 800ca28:	f8c9 5000 	str.w	r5, [r9]
 800ca2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca30:	f8c8 0000 	str.w	r0, [r8]
 800ca34:	4620      	mov	r0, r4
 800ca36:	b003      	add	sp, #12
 800ca38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca40:	e7d5      	b.n	800c9ee <__d2b+0x2e>
 800ca42:	6161      	str	r1, [r4, #20]
 800ca44:	e7e5      	b.n	800ca12 <__d2b+0x52>
 800ca46:	a801      	add	r0, sp, #4
 800ca48:	f7ff fd5a 	bl	800c500 <__lo0bits>
 800ca4c:	9b01      	ldr	r3, [sp, #4]
 800ca4e:	6163      	str	r3, [r4, #20]
 800ca50:	2201      	movs	r2, #1
 800ca52:	6122      	str	r2, [r4, #16]
 800ca54:	3020      	adds	r0, #32
 800ca56:	e7e3      	b.n	800ca20 <__d2b+0x60>
 800ca58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca60:	f8c9 0000 	str.w	r0, [r9]
 800ca64:	6918      	ldr	r0, [r3, #16]
 800ca66:	f7ff fd2b 	bl	800c4c0 <__hi0bits>
 800ca6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca6e:	e7df      	b.n	800ca30 <__d2b+0x70>
 800ca70:	0800e07b 	.word	0x0800e07b
 800ca74:	0800e08c 	.word	0x0800e08c

0800ca78 <_calloc_r>:
 800ca78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca7a:	fba1 2402 	umull	r2, r4, r1, r2
 800ca7e:	b94c      	cbnz	r4, 800ca94 <_calloc_r+0x1c>
 800ca80:	4611      	mov	r1, r2
 800ca82:	9201      	str	r2, [sp, #4]
 800ca84:	f000 f87a 	bl	800cb7c <_malloc_r>
 800ca88:	9a01      	ldr	r2, [sp, #4]
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	b930      	cbnz	r0, 800ca9c <_calloc_r+0x24>
 800ca8e:	4628      	mov	r0, r5
 800ca90:	b003      	add	sp, #12
 800ca92:	bd30      	pop	{r4, r5, pc}
 800ca94:	220c      	movs	r2, #12
 800ca96:	6002      	str	r2, [r0, #0]
 800ca98:	2500      	movs	r5, #0
 800ca9a:	e7f8      	b.n	800ca8e <_calloc_r+0x16>
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	f7fe f93f 	bl	800ad20 <memset>
 800caa2:	e7f4      	b.n	800ca8e <_calloc_r+0x16>

0800caa4 <_free_r>:
 800caa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caa6:	2900      	cmp	r1, #0
 800caa8:	d044      	beq.n	800cb34 <_free_r+0x90>
 800caaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caae:	9001      	str	r0, [sp, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f1a1 0404 	sub.w	r4, r1, #4
 800cab6:	bfb8      	it	lt
 800cab8:	18e4      	addlt	r4, r4, r3
 800caba:	f000 fa9b 	bl	800cff4 <__malloc_lock>
 800cabe:	4a1e      	ldr	r2, [pc, #120]	; (800cb38 <_free_r+0x94>)
 800cac0:	9801      	ldr	r0, [sp, #4]
 800cac2:	6813      	ldr	r3, [r2, #0]
 800cac4:	b933      	cbnz	r3, 800cad4 <_free_r+0x30>
 800cac6:	6063      	str	r3, [r4, #4]
 800cac8:	6014      	str	r4, [r2, #0]
 800caca:	b003      	add	sp, #12
 800cacc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cad0:	f000 ba96 	b.w	800d000 <__malloc_unlock>
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	d908      	bls.n	800caea <_free_r+0x46>
 800cad8:	6825      	ldr	r5, [r4, #0]
 800cada:	1961      	adds	r1, r4, r5
 800cadc:	428b      	cmp	r3, r1
 800cade:	bf01      	itttt	eq
 800cae0:	6819      	ldreq	r1, [r3, #0]
 800cae2:	685b      	ldreq	r3, [r3, #4]
 800cae4:	1949      	addeq	r1, r1, r5
 800cae6:	6021      	streq	r1, [r4, #0]
 800cae8:	e7ed      	b.n	800cac6 <_free_r+0x22>
 800caea:	461a      	mov	r2, r3
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	b10b      	cbz	r3, 800caf4 <_free_r+0x50>
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	d9fa      	bls.n	800caea <_free_r+0x46>
 800caf4:	6811      	ldr	r1, [r2, #0]
 800caf6:	1855      	adds	r5, r2, r1
 800caf8:	42a5      	cmp	r5, r4
 800cafa:	d10b      	bne.n	800cb14 <_free_r+0x70>
 800cafc:	6824      	ldr	r4, [r4, #0]
 800cafe:	4421      	add	r1, r4
 800cb00:	1854      	adds	r4, r2, r1
 800cb02:	42a3      	cmp	r3, r4
 800cb04:	6011      	str	r1, [r2, #0]
 800cb06:	d1e0      	bne.n	800caca <_free_r+0x26>
 800cb08:	681c      	ldr	r4, [r3, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	6053      	str	r3, [r2, #4]
 800cb0e:	4421      	add	r1, r4
 800cb10:	6011      	str	r1, [r2, #0]
 800cb12:	e7da      	b.n	800caca <_free_r+0x26>
 800cb14:	d902      	bls.n	800cb1c <_free_r+0x78>
 800cb16:	230c      	movs	r3, #12
 800cb18:	6003      	str	r3, [r0, #0]
 800cb1a:	e7d6      	b.n	800caca <_free_r+0x26>
 800cb1c:	6825      	ldr	r5, [r4, #0]
 800cb1e:	1961      	adds	r1, r4, r5
 800cb20:	428b      	cmp	r3, r1
 800cb22:	bf04      	itt	eq
 800cb24:	6819      	ldreq	r1, [r3, #0]
 800cb26:	685b      	ldreq	r3, [r3, #4]
 800cb28:	6063      	str	r3, [r4, #4]
 800cb2a:	bf04      	itt	eq
 800cb2c:	1949      	addeq	r1, r1, r5
 800cb2e:	6021      	streq	r1, [r4, #0]
 800cb30:	6054      	str	r4, [r2, #4]
 800cb32:	e7ca      	b.n	800caca <_free_r+0x26>
 800cb34:	b003      	add	sp, #12
 800cb36:	bd30      	pop	{r4, r5, pc}
 800cb38:	20002084 	.word	0x20002084

0800cb3c <sbrk_aligned>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4e0e      	ldr	r6, [pc, #56]	; (800cb78 <sbrk_aligned+0x3c>)
 800cb40:	460c      	mov	r4, r1
 800cb42:	6831      	ldr	r1, [r6, #0]
 800cb44:	4605      	mov	r5, r0
 800cb46:	b911      	cbnz	r1, 800cb4e <sbrk_aligned+0x12>
 800cb48:	f000 f9e8 	bl	800cf1c <_sbrk_r>
 800cb4c:	6030      	str	r0, [r6, #0]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 f9e3 	bl	800cf1c <_sbrk_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d00a      	beq.n	800cb70 <sbrk_aligned+0x34>
 800cb5a:	1cc4      	adds	r4, r0, #3
 800cb5c:	f024 0403 	bic.w	r4, r4, #3
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d007      	beq.n	800cb74 <sbrk_aligned+0x38>
 800cb64:	1a21      	subs	r1, r4, r0
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 f9d8 	bl	800cf1c <_sbrk_r>
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d101      	bne.n	800cb74 <sbrk_aligned+0x38>
 800cb70:	f04f 34ff 	mov.w	r4, #4294967295
 800cb74:	4620      	mov	r0, r4
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	20002088 	.word	0x20002088

0800cb7c <_malloc_r>:
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	1ccd      	adds	r5, r1, #3
 800cb82:	f025 0503 	bic.w	r5, r5, #3
 800cb86:	3508      	adds	r5, #8
 800cb88:	2d0c      	cmp	r5, #12
 800cb8a:	bf38      	it	cc
 800cb8c:	250c      	movcc	r5, #12
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	4607      	mov	r7, r0
 800cb92:	db01      	blt.n	800cb98 <_malloc_r+0x1c>
 800cb94:	42a9      	cmp	r1, r5
 800cb96:	d905      	bls.n	800cba4 <_malloc_r+0x28>
 800cb98:	230c      	movs	r3, #12
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	4630      	mov	r0, r6
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba4:	4e2e      	ldr	r6, [pc, #184]	; (800cc60 <_malloc_r+0xe4>)
 800cba6:	f000 fa25 	bl	800cff4 <__malloc_lock>
 800cbaa:	6833      	ldr	r3, [r6, #0]
 800cbac:	461c      	mov	r4, r3
 800cbae:	bb34      	cbnz	r4, 800cbfe <_malloc_r+0x82>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	f7ff ffc2 	bl	800cb3c <sbrk_aligned>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	4604      	mov	r4, r0
 800cbbc:	d14d      	bne.n	800cc5a <_malloc_r+0xde>
 800cbbe:	6834      	ldr	r4, [r6, #0]
 800cbc0:	4626      	mov	r6, r4
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	d140      	bne.n	800cc48 <_malloc_r+0xcc>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	4631      	mov	r1, r6
 800cbca:	4638      	mov	r0, r7
 800cbcc:	eb04 0803 	add.w	r8, r4, r3
 800cbd0:	f000 f9a4 	bl	800cf1c <_sbrk_r>
 800cbd4:	4580      	cmp	r8, r0
 800cbd6:	d13a      	bne.n	800cc4e <_malloc_r+0xd2>
 800cbd8:	6821      	ldr	r1, [r4, #0]
 800cbda:	3503      	adds	r5, #3
 800cbdc:	1a6d      	subs	r5, r5, r1
 800cbde:	f025 0503 	bic.w	r5, r5, #3
 800cbe2:	3508      	adds	r5, #8
 800cbe4:	2d0c      	cmp	r5, #12
 800cbe6:	bf38      	it	cc
 800cbe8:	250c      	movcc	r5, #12
 800cbea:	4629      	mov	r1, r5
 800cbec:	4638      	mov	r0, r7
 800cbee:	f7ff ffa5 	bl	800cb3c <sbrk_aligned>
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	d02b      	beq.n	800cc4e <_malloc_r+0xd2>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	442b      	add	r3, r5
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	e00e      	b.n	800cc1c <_malloc_r+0xa0>
 800cbfe:	6822      	ldr	r2, [r4, #0]
 800cc00:	1b52      	subs	r2, r2, r5
 800cc02:	d41e      	bmi.n	800cc42 <_malloc_r+0xc6>
 800cc04:	2a0b      	cmp	r2, #11
 800cc06:	d916      	bls.n	800cc36 <_malloc_r+0xba>
 800cc08:	1961      	adds	r1, r4, r5
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	6025      	str	r5, [r4, #0]
 800cc0e:	bf18      	it	ne
 800cc10:	6059      	strne	r1, [r3, #4]
 800cc12:	6863      	ldr	r3, [r4, #4]
 800cc14:	bf08      	it	eq
 800cc16:	6031      	streq	r1, [r6, #0]
 800cc18:	5162      	str	r2, [r4, r5]
 800cc1a:	604b      	str	r3, [r1, #4]
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	f104 060b 	add.w	r6, r4, #11
 800cc22:	f000 f9ed 	bl	800d000 <__malloc_unlock>
 800cc26:	f026 0607 	bic.w	r6, r6, #7
 800cc2a:	1d23      	adds	r3, r4, #4
 800cc2c:	1af2      	subs	r2, r6, r3
 800cc2e:	d0b6      	beq.n	800cb9e <_malloc_r+0x22>
 800cc30:	1b9b      	subs	r3, r3, r6
 800cc32:	50a3      	str	r3, [r4, r2]
 800cc34:	e7b3      	b.n	800cb9e <_malloc_r+0x22>
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	bf0c      	ite	eq
 800cc3c:	6032      	streq	r2, [r6, #0]
 800cc3e:	605a      	strne	r2, [r3, #4]
 800cc40:	e7ec      	b.n	800cc1c <_malloc_r+0xa0>
 800cc42:	4623      	mov	r3, r4
 800cc44:	6864      	ldr	r4, [r4, #4]
 800cc46:	e7b2      	b.n	800cbae <_malloc_r+0x32>
 800cc48:	4634      	mov	r4, r6
 800cc4a:	6876      	ldr	r6, [r6, #4]
 800cc4c:	e7b9      	b.n	800cbc2 <_malloc_r+0x46>
 800cc4e:	230c      	movs	r3, #12
 800cc50:	603b      	str	r3, [r7, #0]
 800cc52:	4638      	mov	r0, r7
 800cc54:	f000 f9d4 	bl	800d000 <__malloc_unlock>
 800cc58:	e7a1      	b.n	800cb9e <_malloc_r+0x22>
 800cc5a:	6025      	str	r5, [r4, #0]
 800cc5c:	e7de      	b.n	800cc1c <_malloc_r+0xa0>
 800cc5e:	bf00      	nop
 800cc60:	20002084 	.word	0x20002084

0800cc64 <__ssputs_r>:
 800cc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc68:	688e      	ldr	r6, [r1, #8]
 800cc6a:	429e      	cmp	r6, r3
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	460c      	mov	r4, r1
 800cc70:	4690      	mov	r8, r2
 800cc72:	461f      	mov	r7, r3
 800cc74:	d838      	bhi.n	800cce8 <__ssputs_r+0x84>
 800cc76:	898a      	ldrh	r2, [r1, #12]
 800cc78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc7c:	d032      	beq.n	800cce4 <__ssputs_r+0x80>
 800cc7e:	6825      	ldr	r5, [r4, #0]
 800cc80:	6909      	ldr	r1, [r1, #16]
 800cc82:	eba5 0901 	sub.w	r9, r5, r1
 800cc86:	6965      	ldr	r5, [r4, #20]
 800cc88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc90:	3301      	adds	r3, #1
 800cc92:	444b      	add	r3, r9
 800cc94:	106d      	asrs	r5, r5, #1
 800cc96:	429d      	cmp	r5, r3
 800cc98:	bf38      	it	cc
 800cc9a:	461d      	movcc	r5, r3
 800cc9c:	0553      	lsls	r3, r2, #21
 800cc9e:	d531      	bpl.n	800cd04 <__ssputs_r+0xa0>
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7ff ff6b 	bl	800cb7c <_malloc_r>
 800cca6:	4606      	mov	r6, r0
 800cca8:	b950      	cbnz	r0, 800ccc0 <__ssputs_r+0x5c>
 800ccaa:	230c      	movs	r3, #12
 800ccac:	f8ca 3000 	str.w	r3, [sl]
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb6:	81a3      	strh	r3, [r4, #12]
 800ccb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc0:	6921      	ldr	r1, [r4, #16]
 800ccc2:	464a      	mov	r2, r9
 800ccc4:	f7ff fb46 	bl	800c354 <memcpy>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd2:	81a3      	strh	r3, [r4, #12]
 800ccd4:	6126      	str	r6, [r4, #16]
 800ccd6:	6165      	str	r5, [r4, #20]
 800ccd8:	444e      	add	r6, r9
 800ccda:	eba5 0509 	sub.w	r5, r5, r9
 800ccde:	6026      	str	r6, [r4, #0]
 800cce0:	60a5      	str	r5, [r4, #8]
 800cce2:	463e      	mov	r6, r7
 800cce4:	42be      	cmp	r6, r7
 800cce6:	d900      	bls.n	800ccea <__ssputs_r+0x86>
 800cce8:	463e      	mov	r6, r7
 800ccea:	6820      	ldr	r0, [r4, #0]
 800ccec:	4632      	mov	r2, r6
 800ccee:	4641      	mov	r1, r8
 800ccf0:	f000 f966 	bl	800cfc0 <memmove>
 800ccf4:	68a3      	ldr	r3, [r4, #8]
 800ccf6:	1b9b      	subs	r3, r3, r6
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	4433      	add	r3, r6
 800ccfe:	6023      	str	r3, [r4, #0]
 800cd00:	2000      	movs	r0, #0
 800cd02:	e7db      	b.n	800ccbc <__ssputs_r+0x58>
 800cd04:	462a      	mov	r2, r5
 800cd06:	f000 f981 	bl	800d00c <_realloc_r>
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d1e1      	bne.n	800ccd4 <__ssputs_r+0x70>
 800cd10:	6921      	ldr	r1, [r4, #16]
 800cd12:	4650      	mov	r0, sl
 800cd14:	f7ff fec6 	bl	800caa4 <_free_r>
 800cd18:	e7c7      	b.n	800ccaa <__ssputs_r+0x46>
	...

0800cd1c <_svfiprintf_r>:
 800cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	4698      	mov	r8, r3
 800cd22:	898b      	ldrh	r3, [r1, #12]
 800cd24:	061b      	lsls	r3, r3, #24
 800cd26:	b09d      	sub	sp, #116	; 0x74
 800cd28:	4607      	mov	r7, r0
 800cd2a:	460d      	mov	r5, r1
 800cd2c:	4614      	mov	r4, r2
 800cd2e:	d50e      	bpl.n	800cd4e <_svfiprintf_r+0x32>
 800cd30:	690b      	ldr	r3, [r1, #16]
 800cd32:	b963      	cbnz	r3, 800cd4e <_svfiprintf_r+0x32>
 800cd34:	2140      	movs	r1, #64	; 0x40
 800cd36:	f7ff ff21 	bl	800cb7c <_malloc_r>
 800cd3a:	6028      	str	r0, [r5, #0]
 800cd3c:	6128      	str	r0, [r5, #16]
 800cd3e:	b920      	cbnz	r0, 800cd4a <_svfiprintf_r+0x2e>
 800cd40:	230c      	movs	r3, #12
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	f04f 30ff 	mov.w	r0, #4294967295
 800cd48:	e0d1      	b.n	800ceee <_svfiprintf_r+0x1d2>
 800cd4a:	2340      	movs	r3, #64	; 0x40
 800cd4c:	616b      	str	r3, [r5, #20]
 800cd4e:	2300      	movs	r3, #0
 800cd50:	9309      	str	r3, [sp, #36]	; 0x24
 800cd52:	2320      	movs	r3, #32
 800cd54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd58:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd5c:	2330      	movs	r3, #48	; 0x30
 800cd5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf08 <_svfiprintf_r+0x1ec>
 800cd62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd66:	f04f 0901 	mov.w	r9, #1
 800cd6a:	4623      	mov	r3, r4
 800cd6c:	469a      	mov	sl, r3
 800cd6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd72:	b10a      	cbz	r2, 800cd78 <_svfiprintf_r+0x5c>
 800cd74:	2a25      	cmp	r2, #37	; 0x25
 800cd76:	d1f9      	bne.n	800cd6c <_svfiprintf_r+0x50>
 800cd78:	ebba 0b04 	subs.w	fp, sl, r4
 800cd7c:	d00b      	beq.n	800cd96 <_svfiprintf_r+0x7a>
 800cd7e:	465b      	mov	r3, fp
 800cd80:	4622      	mov	r2, r4
 800cd82:	4629      	mov	r1, r5
 800cd84:	4638      	mov	r0, r7
 800cd86:	f7ff ff6d 	bl	800cc64 <__ssputs_r>
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	f000 80aa 	beq.w	800cee4 <_svfiprintf_r+0x1c8>
 800cd90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd92:	445a      	add	r2, fp
 800cd94:	9209      	str	r2, [sp, #36]	; 0x24
 800cd96:	f89a 3000 	ldrb.w	r3, [sl]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 80a2 	beq.w	800cee4 <_svfiprintf_r+0x1c8>
 800cda0:	2300      	movs	r3, #0
 800cda2:	f04f 32ff 	mov.w	r2, #4294967295
 800cda6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdaa:	f10a 0a01 	add.w	sl, sl, #1
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	9307      	str	r3, [sp, #28]
 800cdb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdb6:	931a      	str	r3, [sp, #104]	; 0x68
 800cdb8:	4654      	mov	r4, sl
 800cdba:	2205      	movs	r2, #5
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	4851      	ldr	r0, [pc, #324]	; (800cf08 <_svfiprintf_r+0x1ec>)
 800cdc2:	f7f3 fa15 	bl	80001f0 <memchr>
 800cdc6:	9a04      	ldr	r2, [sp, #16]
 800cdc8:	b9d8      	cbnz	r0, 800ce02 <_svfiprintf_r+0xe6>
 800cdca:	06d0      	lsls	r0, r2, #27
 800cdcc:	bf44      	itt	mi
 800cdce:	2320      	movmi	r3, #32
 800cdd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdd4:	0711      	lsls	r1, r2, #28
 800cdd6:	bf44      	itt	mi
 800cdd8:	232b      	movmi	r3, #43	; 0x2b
 800cdda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdde:	f89a 3000 	ldrb.w	r3, [sl]
 800cde2:	2b2a      	cmp	r3, #42	; 0x2a
 800cde4:	d015      	beq.n	800ce12 <_svfiprintf_r+0xf6>
 800cde6:	9a07      	ldr	r2, [sp, #28]
 800cde8:	4654      	mov	r4, sl
 800cdea:	2000      	movs	r0, #0
 800cdec:	f04f 0c0a 	mov.w	ip, #10
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdf6:	3b30      	subs	r3, #48	; 0x30
 800cdf8:	2b09      	cmp	r3, #9
 800cdfa:	d94e      	bls.n	800ce9a <_svfiprintf_r+0x17e>
 800cdfc:	b1b0      	cbz	r0, 800ce2c <_svfiprintf_r+0x110>
 800cdfe:	9207      	str	r2, [sp, #28]
 800ce00:	e014      	b.n	800ce2c <_svfiprintf_r+0x110>
 800ce02:	eba0 0308 	sub.w	r3, r0, r8
 800ce06:	fa09 f303 	lsl.w	r3, r9, r3
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	46a2      	mov	sl, r4
 800ce10:	e7d2      	b.n	800cdb8 <_svfiprintf_r+0x9c>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	1d19      	adds	r1, r3, #4
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	9103      	str	r1, [sp, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bfbb      	ittet	lt
 800ce1e:	425b      	neglt	r3, r3
 800ce20:	f042 0202 	orrlt.w	r2, r2, #2
 800ce24:	9307      	strge	r3, [sp, #28]
 800ce26:	9307      	strlt	r3, [sp, #28]
 800ce28:	bfb8      	it	lt
 800ce2a:	9204      	strlt	r2, [sp, #16]
 800ce2c:	7823      	ldrb	r3, [r4, #0]
 800ce2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce30:	d10c      	bne.n	800ce4c <_svfiprintf_r+0x130>
 800ce32:	7863      	ldrb	r3, [r4, #1]
 800ce34:	2b2a      	cmp	r3, #42	; 0x2a
 800ce36:	d135      	bne.n	800cea4 <_svfiprintf_r+0x188>
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	1d1a      	adds	r2, r3, #4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	9203      	str	r2, [sp, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	bfb8      	it	lt
 800ce44:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce48:	3402      	adds	r4, #2
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf18 <_svfiprintf_r+0x1fc>
 800ce50:	7821      	ldrb	r1, [r4, #0]
 800ce52:	2203      	movs	r2, #3
 800ce54:	4650      	mov	r0, sl
 800ce56:	f7f3 f9cb 	bl	80001f0 <memchr>
 800ce5a:	b140      	cbz	r0, 800ce6e <_svfiprintf_r+0x152>
 800ce5c:	2340      	movs	r3, #64	; 0x40
 800ce5e:	eba0 000a 	sub.w	r0, r0, sl
 800ce62:	fa03 f000 	lsl.w	r0, r3, r0
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	4303      	orrs	r3, r0
 800ce6a:	3401      	adds	r4, #1
 800ce6c:	9304      	str	r3, [sp, #16]
 800ce6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce72:	4826      	ldr	r0, [pc, #152]	; (800cf0c <_svfiprintf_r+0x1f0>)
 800ce74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce78:	2206      	movs	r2, #6
 800ce7a:	f7f3 f9b9 	bl	80001f0 <memchr>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d038      	beq.n	800cef4 <_svfiprintf_r+0x1d8>
 800ce82:	4b23      	ldr	r3, [pc, #140]	; (800cf10 <_svfiprintf_r+0x1f4>)
 800ce84:	bb1b      	cbnz	r3, 800cece <_svfiprintf_r+0x1b2>
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	3307      	adds	r3, #7
 800ce8a:	f023 0307 	bic.w	r3, r3, #7
 800ce8e:	3308      	adds	r3, #8
 800ce90:	9303      	str	r3, [sp, #12]
 800ce92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce94:	4433      	add	r3, r6
 800ce96:	9309      	str	r3, [sp, #36]	; 0x24
 800ce98:	e767      	b.n	800cd6a <_svfiprintf_r+0x4e>
 800ce9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce9e:	460c      	mov	r4, r1
 800cea0:	2001      	movs	r0, #1
 800cea2:	e7a5      	b.n	800cdf0 <_svfiprintf_r+0xd4>
 800cea4:	2300      	movs	r3, #0
 800cea6:	3401      	adds	r4, #1
 800cea8:	9305      	str	r3, [sp, #20]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	f04f 0c0a 	mov.w	ip, #10
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb6:	3a30      	subs	r2, #48	; 0x30
 800ceb8:	2a09      	cmp	r2, #9
 800ceba:	d903      	bls.n	800cec4 <_svfiprintf_r+0x1a8>
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d0c5      	beq.n	800ce4c <_svfiprintf_r+0x130>
 800cec0:	9105      	str	r1, [sp, #20]
 800cec2:	e7c3      	b.n	800ce4c <_svfiprintf_r+0x130>
 800cec4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cec8:	4604      	mov	r4, r0
 800ceca:	2301      	movs	r3, #1
 800cecc:	e7f0      	b.n	800ceb0 <_svfiprintf_r+0x194>
 800cece:	ab03      	add	r3, sp, #12
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	462a      	mov	r2, r5
 800ced4:	4b0f      	ldr	r3, [pc, #60]	; (800cf14 <_svfiprintf_r+0x1f8>)
 800ced6:	a904      	add	r1, sp, #16
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7fd ffc9 	bl	800ae70 <_printf_float>
 800cede:	1c42      	adds	r2, r0, #1
 800cee0:	4606      	mov	r6, r0
 800cee2:	d1d6      	bne.n	800ce92 <_svfiprintf_r+0x176>
 800cee4:	89ab      	ldrh	r3, [r5, #12]
 800cee6:	065b      	lsls	r3, r3, #25
 800cee8:	f53f af2c 	bmi.w	800cd44 <_svfiprintf_r+0x28>
 800ceec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceee:	b01d      	add	sp, #116	; 0x74
 800cef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef4:	ab03      	add	r3, sp, #12
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	462a      	mov	r2, r5
 800cefa:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <_svfiprintf_r+0x1f8>)
 800cefc:	a904      	add	r1, sp, #16
 800cefe:	4638      	mov	r0, r7
 800cf00:	f7fe fa5a 	bl	800b3b8 <_printf_i>
 800cf04:	e7eb      	b.n	800cede <_svfiprintf_r+0x1c2>
 800cf06:	bf00      	nop
 800cf08:	0800e1e4 	.word	0x0800e1e4
 800cf0c:	0800e1ee 	.word	0x0800e1ee
 800cf10:	0800ae71 	.word	0x0800ae71
 800cf14:	0800cc65 	.word	0x0800cc65
 800cf18:	0800e1ea 	.word	0x0800e1ea

0800cf1c <_sbrk_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d06      	ldr	r5, [pc, #24]	; (800cf38 <_sbrk_r+0x1c>)
 800cf20:	2300      	movs	r3, #0
 800cf22:	4604      	mov	r4, r0
 800cf24:	4608      	mov	r0, r1
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	f7f5 f8ba 	bl	80020a0 <_sbrk>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_sbrk_r+0x1a>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_sbrk_r+0x1a>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	2000208c 	.word	0x2000208c

0800cf3c <__assert_func>:
 800cf3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf3e:	4614      	mov	r4, r2
 800cf40:	461a      	mov	r2, r3
 800cf42:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <__assert_func+0x2c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4605      	mov	r5, r0
 800cf48:	68d8      	ldr	r0, [r3, #12]
 800cf4a:	b14c      	cbz	r4, 800cf60 <__assert_func+0x24>
 800cf4c:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <__assert_func+0x30>)
 800cf4e:	9100      	str	r1, [sp, #0]
 800cf50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf54:	4906      	ldr	r1, [pc, #24]	; (800cf70 <__assert_func+0x34>)
 800cf56:	462b      	mov	r3, r5
 800cf58:	f000 f80e 	bl	800cf78 <fiprintf>
 800cf5c:	f000 faac 	bl	800d4b8 <abort>
 800cf60:	4b04      	ldr	r3, [pc, #16]	; (800cf74 <__assert_func+0x38>)
 800cf62:	461c      	mov	r4, r3
 800cf64:	e7f3      	b.n	800cf4e <__assert_func+0x12>
 800cf66:	bf00      	nop
 800cf68:	20000178 	.word	0x20000178
 800cf6c:	0800e1f5 	.word	0x0800e1f5
 800cf70:	0800e202 	.word	0x0800e202
 800cf74:	0800e230 	.word	0x0800e230

0800cf78 <fiprintf>:
 800cf78:	b40e      	push	{r1, r2, r3}
 800cf7a:	b503      	push	{r0, r1, lr}
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	ab03      	add	r3, sp, #12
 800cf80:	4805      	ldr	r0, [pc, #20]	; (800cf98 <fiprintf+0x20>)
 800cf82:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf86:	6800      	ldr	r0, [r0, #0]
 800cf88:	9301      	str	r3, [sp, #4]
 800cf8a:	f000 f897 	bl	800d0bc <_vfiprintf_r>
 800cf8e:	b002      	add	sp, #8
 800cf90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf94:	b003      	add	sp, #12
 800cf96:	4770      	bx	lr
 800cf98:	20000178 	.word	0x20000178

0800cf9c <__ascii_mbtowc>:
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	b901      	cbnz	r1, 800cfa2 <__ascii_mbtowc+0x6>
 800cfa0:	a901      	add	r1, sp, #4
 800cfa2:	b142      	cbz	r2, 800cfb6 <__ascii_mbtowc+0x1a>
 800cfa4:	b14b      	cbz	r3, 800cfba <__ascii_mbtowc+0x1e>
 800cfa6:	7813      	ldrb	r3, [r2, #0]
 800cfa8:	600b      	str	r3, [r1, #0]
 800cfaa:	7812      	ldrb	r2, [r2, #0]
 800cfac:	1e10      	subs	r0, r2, #0
 800cfae:	bf18      	it	ne
 800cfb0:	2001      	movne	r0, #1
 800cfb2:	b002      	add	sp, #8
 800cfb4:	4770      	bx	lr
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	e7fb      	b.n	800cfb2 <__ascii_mbtowc+0x16>
 800cfba:	f06f 0001 	mvn.w	r0, #1
 800cfbe:	e7f8      	b.n	800cfb2 <__ascii_mbtowc+0x16>

0800cfc0 <memmove>:
 800cfc0:	4288      	cmp	r0, r1
 800cfc2:	b510      	push	{r4, lr}
 800cfc4:	eb01 0402 	add.w	r4, r1, r2
 800cfc8:	d902      	bls.n	800cfd0 <memmove+0x10>
 800cfca:	4284      	cmp	r4, r0
 800cfcc:	4623      	mov	r3, r4
 800cfce:	d807      	bhi.n	800cfe0 <memmove+0x20>
 800cfd0:	1e43      	subs	r3, r0, #1
 800cfd2:	42a1      	cmp	r1, r4
 800cfd4:	d008      	beq.n	800cfe8 <memmove+0x28>
 800cfd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfde:	e7f8      	b.n	800cfd2 <memmove+0x12>
 800cfe0:	4402      	add	r2, r0
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	428a      	cmp	r2, r1
 800cfe6:	d100      	bne.n	800cfea <memmove+0x2a>
 800cfe8:	bd10      	pop	{r4, pc}
 800cfea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cff2:	e7f7      	b.n	800cfe4 <memmove+0x24>

0800cff4 <__malloc_lock>:
 800cff4:	4801      	ldr	r0, [pc, #4]	; (800cffc <__malloc_lock+0x8>)
 800cff6:	f000 bc1f 	b.w	800d838 <__retarget_lock_acquire_recursive>
 800cffa:	bf00      	nop
 800cffc:	20002090 	.word	0x20002090

0800d000 <__malloc_unlock>:
 800d000:	4801      	ldr	r0, [pc, #4]	; (800d008 <__malloc_unlock+0x8>)
 800d002:	f000 bc1a 	b.w	800d83a <__retarget_lock_release_recursive>
 800d006:	bf00      	nop
 800d008:	20002090 	.word	0x20002090

0800d00c <_realloc_r>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	4680      	mov	r8, r0
 800d012:	4614      	mov	r4, r2
 800d014:	460e      	mov	r6, r1
 800d016:	b921      	cbnz	r1, 800d022 <_realloc_r+0x16>
 800d018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	4611      	mov	r1, r2
 800d01e:	f7ff bdad 	b.w	800cb7c <_malloc_r>
 800d022:	b92a      	cbnz	r2, 800d030 <_realloc_r+0x24>
 800d024:	f7ff fd3e 	bl	800caa4 <_free_r>
 800d028:	4625      	mov	r5, r4
 800d02a:	4628      	mov	r0, r5
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	f000 fc6a 	bl	800d908 <_malloc_usable_size_r>
 800d034:	4284      	cmp	r4, r0
 800d036:	4607      	mov	r7, r0
 800d038:	d802      	bhi.n	800d040 <_realloc_r+0x34>
 800d03a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d03e:	d812      	bhi.n	800d066 <_realloc_r+0x5a>
 800d040:	4621      	mov	r1, r4
 800d042:	4640      	mov	r0, r8
 800d044:	f7ff fd9a 	bl	800cb7c <_malloc_r>
 800d048:	4605      	mov	r5, r0
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0ed      	beq.n	800d02a <_realloc_r+0x1e>
 800d04e:	42bc      	cmp	r4, r7
 800d050:	4622      	mov	r2, r4
 800d052:	4631      	mov	r1, r6
 800d054:	bf28      	it	cs
 800d056:	463a      	movcs	r2, r7
 800d058:	f7ff f97c 	bl	800c354 <memcpy>
 800d05c:	4631      	mov	r1, r6
 800d05e:	4640      	mov	r0, r8
 800d060:	f7ff fd20 	bl	800caa4 <_free_r>
 800d064:	e7e1      	b.n	800d02a <_realloc_r+0x1e>
 800d066:	4635      	mov	r5, r6
 800d068:	e7df      	b.n	800d02a <_realloc_r+0x1e>

0800d06a <__sfputc_r>:
 800d06a:	6893      	ldr	r3, [r2, #8]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	2b00      	cmp	r3, #0
 800d070:	b410      	push	{r4}
 800d072:	6093      	str	r3, [r2, #8]
 800d074:	da08      	bge.n	800d088 <__sfputc_r+0x1e>
 800d076:	6994      	ldr	r4, [r2, #24]
 800d078:	42a3      	cmp	r3, r4
 800d07a:	db01      	blt.n	800d080 <__sfputc_r+0x16>
 800d07c:	290a      	cmp	r1, #10
 800d07e:	d103      	bne.n	800d088 <__sfputc_r+0x1e>
 800d080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d084:	f000 b94a 	b.w	800d31c <__swbuf_r>
 800d088:	6813      	ldr	r3, [r2, #0]
 800d08a:	1c58      	adds	r0, r3, #1
 800d08c:	6010      	str	r0, [r2, #0]
 800d08e:	7019      	strb	r1, [r3, #0]
 800d090:	4608      	mov	r0, r1
 800d092:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <__sfputs_r>:
 800d098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09a:	4606      	mov	r6, r0
 800d09c:	460f      	mov	r7, r1
 800d09e:	4614      	mov	r4, r2
 800d0a0:	18d5      	adds	r5, r2, r3
 800d0a2:	42ac      	cmp	r4, r5
 800d0a4:	d101      	bne.n	800d0aa <__sfputs_r+0x12>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	e007      	b.n	800d0ba <__sfputs_r+0x22>
 800d0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ae:	463a      	mov	r2, r7
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f7ff ffda 	bl	800d06a <__sfputc_r>
 800d0b6:	1c43      	adds	r3, r0, #1
 800d0b8:	d1f3      	bne.n	800d0a2 <__sfputs_r+0xa>
 800d0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0bc <_vfiprintf_r>:
 800d0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	b09d      	sub	sp, #116	; 0x74
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	4698      	mov	r8, r3
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	b118      	cbz	r0, 800d0d4 <_vfiprintf_r+0x18>
 800d0cc:	6983      	ldr	r3, [r0, #24]
 800d0ce:	b90b      	cbnz	r3, 800d0d4 <_vfiprintf_r+0x18>
 800d0d0:	f000 fb14 	bl	800d6fc <__sinit>
 800d0d4:	4b89      	ldr	r3, [pc, #548]	; (800d2fc <_vfiprintf_r+0x240>)
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	d11b      	bne.n	800d112 <_vfiprintf_r+0x56>
 800d0da:	6875      	ldr	r5, [r6, #4]
 800d0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0de:	07d9      	lsls	r1, r3, #31
 800d0e0:	d405      	bmi.n	800d0ee <_vfiprintf_r+0x32>
 800d0e2:	89ab      	ldrh	r3, [r5, #12]
 800d0e4:	059a      	lsls	r2, r3, #22
 800d0e6:	d402      	bmi.n	800d0ee <_vfiprintf_r+0x32>
 800d0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0ea:	f000 fba5 	bl	800d838 <__retarget_lock_acquire_recursive>
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	071b      	lsls	r3, r3, #28
 800d0f2:	d501      	bpl.n	800d0f8 <_vfiprintf_r+0x3c>
 800d0f4:	692b      	ldr	r3, [r5, #16]
 800d0f6:	b9eb      	cbnz	r3, 800d134 <_vfiprintf_r+0x78>
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f000 f96e 	bl	800d3dc <__swsetup_r>
 800d100:	b1c0      	cbz	r0, 800d134 <_vfiprintf_r+0x78>
 800d102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d104:	07dc      	lsls	r4, r3, #31
 800d106:	d50e      	bpl.n	800d126 <_vfiprintf_r+0x6a>
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	b01d      	add	sp, #116	; 0x74
 800d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d112:	4b7b      	ldr	r3, [pc, #492]	; (800d300 <_vfiprintf_r+0x244>)
 800d114:	429d      	cmp	r5, r3
 800d116:	d101      	bne.n	800d11c <_vfiprintf_r+0x60>
 800d118:	68b5      	ldr	r5, [r6, #8]
 800d11a:	e7df      	b.n	800d0dc <_vfiprintf_r+0x20>
 800d11c:	4b79      	ldr	r3, [pc, #484]	; (800d304 <_vfiprintf_r+0x248>)
 800d11e:	429d      	cmp	r5, r3
 800d120:	bf08      	it	eq
 800d122:	68f5      	ldreq	r5, [r6, #12]
 800d124:	e7da      	b.n	800d0dc <_vfiprintf_r+0x20>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	0598      	lsls	r0, r3, #22
 800d12a:	d4ed      	bmi.n	800d108 <_vfiprintf_r+0x4c>
 800d12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d12e:	f000 fb84 	bl	800d83a <__retarget_lock_release_recursive>
 800d132:	e7e9      	b.n	800d108 <_vfiprintf_r+0x4c>
 800d134:	2300      	movs	r3, #0
 800d136:	9309      	str	r3, [sp, #36]	; 0x24
 800d138:	2320      	movs	r3, #32
 800d13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d142:	2330      	movs	r3, #48	; 0x30
 800d144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d308 <_vfiprintf_r+0x24c>
 800d148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d14c:	f04f 0901 	mov.w	r9, #1
 800d150:	4623      	mov	r3, r4
 800d152:	469a      	mov	sl, r3
 800d154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d158:	b10a      	cbz	r2, 800d15e <_vfiprintf_r+0xa2>
 800d15a:	2a25      	cmp	r2, #37	; 0x25
 800d15c:	d1f9      	bne.n	800d152 <_vfiprintf_r+0x96>
 800d15e:	ebba 0b04 	subs.w	fp, sl, r4
 800d162:	d00b      	beq.n	800d17c <_vfiprintf_r+0xc0>
 800d164:	465b      	mov	r3, fp
 800d166:	4622      	mov	r2, r4
 800d168:	4629      	mov	r1, r5
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7ff ff94 	bl	800d098 <__sfputs_r>
 800d170:	3001      	adds	r0, #1
 800d172:	f000 80aa 	beq.w	800d2ca <_vfiprintf_r+0x20e>
 800d176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d178:	445a      	add	r2, fp
 800d17a:	9209      	str	r2, [sp, #36]	; 0x24
 800d17c:	f89a 3000 	ldrb.w	r3, [sl]
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 80a2 	beq.w	800d2ca <_vfiprintf_r+0x20e>
 800d186:	2300      	movs	r3, #0
 800d188:	f04f 32ff 	mov.w	r2, #4294967295
 800d18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d190:	f10a 0a01 	add.w	sl, sl, #1
 800d194:	9304      	str	r3, [sp, #16]
 800d196:	9307      	str	r3, [sp, #28]
 800d198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d19c:	931a      	str	r3, [sp, #104]	; 0x68
 800d19e:	4654      	mov	r4, sl
 800d1a0:	2205      	movs	r2, #5
 800d1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a6:	4858      	ldr	r0, [pc, #352]	; (800d308 <_vfiprintf_r+0x24c>)
 800d1a8:	f7f3 f822 	bl	80001f0 <memchr>
 800d1ac:	9a04      	ldr	r2, [sp, #16]
 800d1ae:	b9d8      	cbnz	r0, 800d1e8 <_vfiprintf_r+0x12c>
 800d1b0:	06d1      	lsls	r1, r2, #27
 800d1b2:	bf44      	itt	mi
 800d1b4:	2320      	movmi	r3, #32
 800d1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ba:	0713      	lsls	r3, r2, #28
 800d1bc:	bf44      	itt	mi
 800d1be:	232b      	movmi	r3, #43	; 0x2b
 800d1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ca:	d015      	beq.n	800d1f8 <_vfiprintf_r+0x13c>
 800d1cc:	9a07      	ldr	r2, [sp, #28]
 800d1ce:	4654      	mov	r4, sl
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	f04f 0c0a 	mov.w	ip, #10
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1dc:	3b30      	subs	r3, #48	; 0x30
 800d1de:	2b09      	cmp	r3, #9
 800d1e0:	d94e      	bls.n	800d280 <_vfiprintf_r+0x1c4>
 800d1e2:	b1b0      	cbz	r0, 800d212 <_vfiprintf_r+0x156>
 800d1e4:	9207      	str	r2, [sp, #28]
 800d1e6:	e014      	b.n	800d212 <_vfiprintf_r+0x156>
 800d1e8:	eba0 0308 	sub.w	r3, r0, r8
 800d1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	9304      	str	r3, [sp, #16]
 800d1f4:	46a2      	mov	sl, r4
 800d1f6:	e7d2      	b.n	800d19e <_vfiprintf_r+0xe2>
 800d1f8:	9b03      	ldr	r3, [sp, #12]
 800d1fa:	1d19      	adds	r1, r3, #4
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	9103      	str	r1, [sp, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	bfbb      	ittet	lt
 800d204:	425b      	neglt	r3, r3
 800d206:	f042 0202 	orrlt.w	r2, r2, #2
 800d20a:	9307      	strge	r3, [sp, #28]
 800d20c:	9307      	strlt	r3, [sp, #28]
 800d20e:	bfb8      	it	lt
 800d210:	9204      	strlt	r2, [sp, #16]
 800d212:	7823      	ldrb	r3, [r4, #0]
 800d214:	2b2e      	cmp	r3, #46	; 0x2e
 800d216:	d10c      	bne.n	800d232 <_vfiprintf_r+0x176>
 800d218:	7863      	ldrb	r3, [r4, #1]
 800d21a:	2b2a      	cmp	r3, #42	; 0x2a
 800d21c:	d135      	bne.n	800d28a <_vfiprintf_r+0x1ce>
 800d21e:	9b03      	ldr	r3, [sp, #12]
 800d220:	1d1a      	adds	r2, r3, #4
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	9203      	str	r2, [sp, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	bfb8      	it	lt
 800d22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d22e:	3402      	adds	r4, #2
 800d230:	9305      	str	r3, [sp, #20]
 800d232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d318 <_vfiprintf_r+0x25c>
 800d236:	7821      	ldrb	r1, [r4, #0]
 800d238:	2203      	movs	r2, #3
 800d23a:	4650      	mov	r0, sl
 800d23c:	f7f2 ffd8 	bl	80001f0 <memchr>
 800d240:	b140      	cbz	r0, 800d254 <_vfiprintf_r+0x198>
 800d242:	2340      	movs	r3, #64	; 0x40
 800d244:	eba0 000a 	sub.w	r0, r0, sl
 800d248:	fa03 f000 	lsl.w	r0, r3, r0
 800d24c:	9b04      	ldr	r3, [sp, #16]
 800d24e:	4303      	orrs	r3, r0
 800d250:	3401      	adds	r4, #1
 800d252:	9304      	str	r3, [sp, #16]
 800d254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d258:	482c      	ldr	r0, [pc, #176]	; (800d30c <_vfiprintf_r+0x250>)
 800d25a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d25e:	2206      	movs	r2, #6
 800d260:	f7f2 ffc6 	bl	80001f0 <memchr>
 800d264:	2800      	cmp	r0, #0
 800d266:	d03f      	beq.n	800d2e8 <_vfiprintf_r+0x22c>
 800d268:	4b29      	ldr	r3, [pc, #164]	; (800d310 <_vfiprintf_r+0x254>)
 800d26a:	bb1b      	cbnz	r3, 800d2b4 <_vfiprintf_r+0x1f8>
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	3307      	adds	r3, #7
 800d270:	f023 0307 	bic.w	r3, r3, #7
 800d274:	3308      	adds	r3, #8
 800d276:	9303      	str	r3, [sp, #12]
 800d278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d27a:	443b      	add	r3, r7
 800d27c:	9309      	str	r3, [sp, #36]	; 0x24
 800d27e:	e767      	b.n	800d150 <_vfiprintf_r+0x94>
 800d280:	fb0c 3202 	mla	r2, ip, r2, r3
 800d284:	460c      	mov	r4, r1
 800d286:	2001      	movs	r0, #1
 800d288:	e7a5      	b.n	800d1d6 <_vfiprintf_r+0x11a>
 800d28a:	2300      	movs	r3, #0
 800d28c:	3401      	adds	r4, #1
 800d28e:	9305      	str	r3, [sp, #20]
 800d290:	4619      	mov	r1, r3
 800d292:	f04f 0c0a 	mov.w	ip, #10
 800d296:	4620      	mov	r0, r4
 800d298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d29c:	3a30      	subs	r2, #48	; 0x30
 800d29e:	2a09      	cmp	r2, #9
 800d2a0:	d903      	bls.n	800d2aa <_vfiprintf_r+0x1ee>
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0c5      	beq.n	800d232 <_vfiprintf_r+0x176>
 800d2a6:	9105      	str	r1, [sp, #20]
 800d2a8:	e7c3      	b.n	800d232 <_vfiprintf_r+0x176>
 800d2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e7f0      	b.n	800d296 <_vfiprintf_r+0x1da>
 800d2b4:	ab03      	add	r3, sp, #12
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	462a      	mov	r2, r5
 800d2ba:	4b16      	ldr	r3, [pc, #88]	; (800d314 <_vfiprintf_r+0x258>)
 800d2bc:	a904      	add	r1, sp, #16
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7fd fdd6 	bl	800ae70 <_printf_float>
 800d2c4:	4607      	mov	r7, r0
 800d2c6:	1c78      	adds	r0, r7, #1
 800d2c8:	d1d6      	bne.n	800d278 <_vfiprintf_r+0x1bc>
 800d2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2cc:	07d9      	lsls	r1, r3, #31
 800d2ce:	d405      	bmi.n	800d2dc <_vfiprintf_r+0x220>
 800d2d0:	89ab      	ldrh	r3, [r5, #12]
 800d2d2:	059a      	lsls	r2, r3, #22
 800d2d4:	d402      	bmi.n	800d2dc <_vfiprintf_r+0x220>
 800d2d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2d8:	f000 faaf 	bl	800d83a <__retarget_lock_release_recursive>
 800d2dc:	89ab      	ldrh	r3, [r5, #12]
 800d2de:	065b      	lsls	r3, r3, #25
 800d2e0:	f53f af12 	bmi.w	800d108 <_vfiprintf_r+0x4c>
 800d2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2e6:	e711      	b.n	800d10c <_vfiprintf_r+0x50>
 800d2e8:	ab03      	add	r3, sp, #12
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	462a      	mov	r2, r5
 800d2ee:	4b09      	ldr	r3, [pc, #36]	; (800d314 <_vfiprintf_r+0x258>)
 800d2f0:	a904      	add	r1, sp, #16
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7fe f860 	bl	800b3b8 <_printf_i>
 800d2f8:	e7e4      	b.n	800d2c4 <_vfiprintf_r+0x208>
 800d2fa:	bf00      	nop
 800d2fc:	0800e35c 	.word	0x0800e35c
 800d300:	0800e37c 	.word	0x0800e37c
 800d304:	0800e33c 	.word	0x0800e33c
 800d308:	0800e1e4 	.word	0x0800e1e4
 800d30c:	0800e1ee 	.word	0x0800e1ee
 800d310:	0800ae71 	.word	0x0800ae71
 800d314:	0800d099 	.word	0x0800d099
 800d318:	0800e1ea 	.word	0x0800e1ea

0800d31c <__swbuf_r>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	460e      	mov	r6, r1
 800d320:	4614      	mov	r4, r2
 800d322:	4605      	mov	r5, r0
 800d324:	b118      	cbz	r0, 800d32e <__swbuf_r+0x12>
 800d326:	6983      	ldr	r3, [r0, #24]
 800d328:	b90b      	cbnz	r3, 800d32e <__swbuf_r+0x12>
 800d32a:	f000 f9e7 	bl	800d6fc <__sinit>
 800d32e:	4b21      	ldr	r3, [pc, #132]	; (800d3b4 <__swbuf_r+0x98>)
 800d330:	429c      	cmp	r4, r3
 800d332:	d12b      	bne.n	800d38c <__swbuf_r+0x70>
 800d334:	686c      	ldr	r4, [r5, #4]
 800d336:	69a3      	ldr	r3, [r4, #24]
 800d338:	60a3      	str	r3, [r4, #8]
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	071a      	lsls	r2, r3, #28
 800d33e:	d52f      	bpl.n	800d3a0 <__swbuf_r+0x84>
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	b36b      	cbz	r3, 800d3a0 <__swbuf_r+0x84>
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	6820      	ldr	r0, [r4, #0]
 800d348:	1ac0      	subs	r0, r0, r3
 800d34a:	6963      	ldr	r3, [r4, #20]
 800d34c:	b2f6      	uxtb	r6, r6
 800d34e:	4283      	cmp	r3, r0
 800d350:	4637      	mov	r7, r6
 800d352:	dc04      	bgt.n	800d35e <__swbuf_r+0x42>
 800d354:	4621      	mov	r1, r4
 800d356:	4628      	mov	r0, r5
 800d358:	f000 f93c 	bl	800d5d4 <_fflush_r>
 800d35c:	bb30      	cbnz	r0, 800d3ac <__swbuf_r+0x90>
 800d35e:	68a3      	ldr	r3, [r4, #8]
 800d360:	3b01      	subs	r3, #1
 800d362:	60a3      	str	r3, [r4, #8]
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	6022      	str	r2, [r4, #0]
 800d36a:	701e      	strb	r6, [r3, #0]
 800d36c:	6963      	ldr	r3, [r4, #20]
 800d36e:	3001      	adds	r0, #1
 800d370:	4283      	cmp	r3, r0
 800d372:	d004      	beq.n	800d37e <__swbuf_r+0x62>
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	07db      	lsls	r3, r3, #31
 800d378:	d506      	bpl.n	800d388 <__swbuf_r+0x6c>
 800d37a:	2e0a      	cmp	r6, #10
 800d37c:	d104      	bne.n	800d388 <__swbuf_r+0x6c>
 800d37e:	4621      	mov	r1, r4
 800d380:	4628      	mov	r0, r5
 800d382:	f000 f927 	bl	800d5d4 <_fflush_r>
 800d386:	b988      	cbnz	r0, 800d3ac <__swbuf_r+0x90>
 800d388:	4638      	mov	r0, r7
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38c:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <__swbuf_r+0x9c>)
 800d38e:	429c      	cmp	r4, r3
 800d390:	d101      	bne.n	800d396 <__swbuf_r+0x7a>
 800d392:	68ac      	ldr	r4, [r5, #8]
 800d394:	e7cf      	b.n	800d336 <__swbuf_r+0x1a>
 800d396:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <__swbuf_r+0xa0>)
 800d398:	429c      	cmp	r4, r3
 800d39a:	bf08      	it	eq
 800d39c:	68ec      	ldreq	r4, [r5, #12]
 800d39e:	e7ca      	b.n	800d336 <__swbuf_r+0x1a>
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	f000 f81a 	bl	800d3dc <__swsetup_r>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d0cb      	beq.n	800d344 <__swbuf_r+0x28>
 800d3ac:	f04f 37ff 	mov.w	r7, #4294967295
 800d3b0:	e7ea      	b.n	800d388 <__swbuf_r+0x6c>
 800d3b2:	bf00      	nop
 800d3b4:	0800e35c 	.word	0x0800e35c
 800d3b8:	0800e37c 	.word	0x0800e37c
 800d3bc:	0800e33c 	.word	0x0800e33c

0800d3c0 <__ascii_wctomb>:
 800d3c0:	b149      	cbz	r1, 800d3d6 <__ascii_wctomb+0x16>
 800d3c2:	2aff      	cmp	r2, #255	; 0xff
 800d3c4:	bf85      	ittet	hi
 800d3c6:	238a      	movhi	r3, #138	; 0x8a
 800d3c8:	6003      	strhi	r3, [r0, #0]
 800d3ca:	700a      	strbls	r2, [r1, #0]
 800d3cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3d0:	bf98      	it	ls
 800d3d2:	2001      	movls	r0, #1
 800d3d4:	4770      	bx	lr
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	4770      	bx	lr
	...

0800d3dc <__swsetup_r>:
 800d3dc:	4b32      	ldr	r3, [pc, #200]	; (800d4a8 <__swsetup_r+0xcc>)
 800d3de:	b570      	push	{r4, r5, r6, lr}
 800d3e0:	681d      	ldr	r5, [r3, #0]
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	b125      	cbz	r5, 800d3f2 <__swsetup_r+0x16>
 800d3e8:	69ab      	ldr	r3, [r5, #24]
 800d3ea:	b913      	cbnz	r3, 800d3f2 <__swsetup_r+0x16>
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f000 f985 	bl	800d6fc <__sinit>
 800d3f2:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <__swsetup_r+0xd0>)
 800d3f4:	429c      	cmp	r4, r3
 800d3f6:	d10f      	bne.n	800d418 <__swsetup_r+0x3c>
 800d3f8:	686c      	ldr	r4, [r5, #4]
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d400:	0719      	lsls	r1, r3, #28
 800d402:	d42c      	bmi.n	800d45e <__swsetup_r+0x82>
 800d404:	06dd      	lsls	r5, r3, #27
 800d406:	d411      	bmi.n	800d42c <__swsetup_r+0x50>
 800d408:	2309      	movs	r3, #9
 800d40a:	6033      	str	r3, [r6, #0]
 800d40c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d410:	81a3      	strh	r3, [r4, #12]
 800d412:	f04f 30ff 	mov.w	r0, #4294967295
 800d416:	e03e      	b.n	800d496 <__swsetup_r+0xba>
 800d418:	4b25      	ldr	r3, [pc, #148]	; (800d4b0 <__swsetup_r+0xd4>)
 800d41a:	429c      	cmp	r4, r3
 800d41c:	d101      	bne.n	800d422 <__swsetup_r+0x46>
 800d41e:	68ac      	ldr	r4, [r5, #8]
 800d420:	e7eb      	b.n	800d3fa <__swsetup_r+0x1e>
 800d422:	4b24      	ldr	r3, [pc, #144]	; (800d4b4 <__swsetup_r+0xd8>)
 800d424:	429c      	cmp	r4, r3
 800d426:	bf08      	it	eq
 800d428:	68ec      	ldreq	r4, [r5, #12]
 800d42a:	e7e6      	b.n	800d3fa <__swsetup_r+0x1e>
 800d42c:	0758      	lsls	r0, r3, #29
 800d42e:	d512      	bpl.n	800d456 <__swsetup_r+0x7a>
 800d430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d432:	b141      	cbz	r1, 800d446 <__swsetup_r+0x6a>
 800d434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d438:	4299      	cmp	r1, r3
 800d43a:	d002      	beq.n	800d442 <__swsetup_r+0x66>
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff fb31 	bl	800caa4 <_free_r>
 800d442:	2300      	movs	r3, #0
 800d444:	6363      	str	r3, [r4, #52]	; 0x34
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	2300      	movs	r3, #0
 800d450:	6063      	str	r3, [r4, #4]
 800d452:	6923      	ldr	r3, [r4, #16]
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	f043 0308 	orr.w	r3, r3, #8
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	6923      	ldr	r3, [r4, #16]
 800d460:	b94b      	cbnz	r3, 800d476 <__swsetup_r+0x9a>
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d46c:	d003      	beq.n	800d476 <__swsetup_r+0x9a>
 800d46e:	4621      	mov	r1, r4
 800d470:	4630      	mov	r0, r6
 800d472:	f000 fa09 	bl	800d888 <__smakebuf_r>
 800d476:	89a0      	ldrh	r0, [r4, #12]
 800d478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d47c:	f010 0301 	ands.w	r3, r0, #1
 800d480:	d00a      	beq.n	800d498 <__swsetup_r+0xbc>
 800d482:	2300      	movs	r3, #0
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	6963      	ldr	r3, [r4, #20]
 800d488:	425b      	negs	r3, r3
 800d48a:	61a3      	str	r3, [r4, #24]
 800d48c:	6923      	ldr	r3, [r4, #16]
 800d48e:	b943      	cbnz	r3, 800d4a2 <__swsetup_r+0xc6>
 800d490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d494:	d1ba      	bne.n	800d40c <__swsetup_r+0x30>
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	0781      	lsls	r1, r0, #30
 800d49a:	bf58      	it	pl
 800d49c:	6963      	ldrpl	r3, [r4, #20]
 800d49e:	60a3      	str	r3, [r4, #8]
 800d4a0:	e7f4      	b.n	800d48c <__swsetup_r+0xb0>
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	e7f7      	b.n	800d496 <__swsetup_r+0xba>
 800d4a6:	bf00      	nop
 800d4a8:	20000178 	.word	0x20000178
 800d4ac:	0800e35c 	.word	0x0800e35c
 800d4b0:	0800e37c 	.word	0x0800e37c
 800d4b4:	0800e33c 	.word	0x0800e33c

0800d4b8 <abort>:
 800d4b8:	b508      	push	{r3, lr}
 800d4ba:	2006      	movs	r0, #6
 800d4bc:	f000 fa54 	bl	800d968 <raise>
 800d4c0:	2001      	movs	r0, #1
 800d4c2:	f7f4 fd75 	bl	8001fb0 <_exit>
	...

0800d4c8 <__sflush_r>:
 800d4c8:	898a      	ldrh	r2, [r1, #12]
 800d4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	0710      	lsls	r0, r2, #28
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	d458      	bmi.n	800d588 <__sflush_r+0xc0>
 800d4d6:	684b      	ldr	r3, [r1, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dc05      	bgt.n	800d4e8 <__sflush_r+0x20>
 800d4dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dc02      	bgt.n	800d4e8 <__sflush_r+0x20>
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4ea:	2e00      	cmp	r6, #0
 800d4ec:	d0f9      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4f4:	682f      	ldr	r7, [r5, #0]
 800d4f6:	602b      	str	r3, [r5, #0]
 800d4f8:	d032      	beq.n	800d560 <__sflush_r+0x98>
 800d4fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	075a      	lsls	r2, r3, #29
 800d500:	d505      	bpl.n	800d50e <__sflush_r+0x46>
 800d502:	6863      	ldr	r3, [r4, #4]
 800d504:	1ac0      	subs	r0, r0, r3
 800d506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d508:	b10b      	cbz	r3, 800d50e <__sflush_r+0x46>
 800d50a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d50c:	1ac0      	subs	r0, r0, r3
 800d50e:	2300      	movs	r3, #0
 800d510:	4602      	mov	r2, r0
 800d512:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d514:	6a21      	ldr	r1, [r4, #32]
 800d516:	4628      	mov	r0, r5
 800d518:	47b0      	blx	r6
 800d51a:	1c43      	adds	r3, r0, #1
 800d51c:	89a3      	ldrh	r3, [r4, #12]
 800d51e:	d106      	bne.n	800d52e <__sflush_r+0x66>
 800d520:	6829      	ldr	r1, [r5, #0]
 800d522:	291d      	cmp	r1, #29
 800d524:	d82c      	bhi.n	800d580 <__sflush_r+0xb8>
 800d526:	4a2a      	ldr	r2, [pc, #168]	; (800d5d0 <__sflush_r+0x108>)
 800d528:	40ca      	lsrs	r2, r1
 800d52a:	07d6      	lsls	r6, r2, #31
 800d52c:	d528      	bpl.n	800d580 <__sflush_r+0xb8>
 800d52e:	2200      	movs	r2, #0
 800d530:	6062      	str	r2, [r4, #4]
 800d532:	04d9      	lsls	r1, r3, #19
 800d534:	6922      	ldr	r2, [r4, #16]
 800d536:	6022      	str	r2, [r4, #0]
 800d538:	d504      	bpl.n	800d544 <__sflush_r+0x7c>
 800d53a:	1c42      	adds	r2, r0, #1
 800d53c:	d101      	bne.n	800d542 <__sflush_r+0x7a>
 800d53e:	682b      	ldr	r3, [r5, #0]
 800d540:	b903      	cbnz	r3, 800d544 <__sflush_r+0x7c>
 800d542:	6560      	str	r0, [r4, #84]	; 0x54
 800d544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d546:	602f      	str	r7, [r5, #0]
 800d548:	2900      	cmp	r1, #0
 800d54a:	d0ca      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d54c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d550:	4299      	cmp	r1, r3
 800d552:	d002      	beq.n	800d55a <__sflush_r+0x92>
 800d554:	4628      	mov	r0, r5
 800d556:	f7ff faa5 	bl	800caa4 <_free_r>
 800d55a:	2000      	movs	r0, #0
 800d55c:	6360      	str	r0, [r4, #52]	; 0x34
 800d55e:	e7c1      	b.n	800d4e4 <__sflush_r+0x1c>
 800d560:	6a21      	ldr	r1, [r4, #32]
 800d562:	2301      	movs	r3, #1
 800d564:	4628      	mov	r0, r5
 800d566:	47b0      	blx	r6
 800d568:	1c41      	adds	r1, r0, #1
 800d56a:	d1c7      	bne.n	800d4fc <__sflush_r+0x34>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0c4      	beq.n	800d4fc <__sflush_r+0x34>
 800d572:	2b1d      	cmp	r3, #29
 800d574:	d001      	beq.n	800d57a <__sflush_r+0xb2>
 800d576:	2b16      	cmp	r3, #22
 800d578:	d101      	bne.n	800d57e <__sflush_r+0xb6>
 800d57a:	602f      	str	r7, [r5, #0]
 800d57c:	e7b1      	b.n	800d4e2 <__sflush_r+0x1a>
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d584:	81a3      	strh	r3, [r4, #12]
 800d586:	e7ad      	b.n	800d4e4 <__sflush_r+0x1c>
 800d588:	690f      	ldr	r7, [r1, #16]
 800d58a:	2f00      	cmp	r7, #0
 800d58c:	d0a9      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d58e:	0793      	lsls	r3, r2, #30
 800d590:	680e      	ldr	r6, [r1, #0]
 800d592:	bf08      	it	eq
 800d594:	694b      	ldreq	r3, [r1, #20]
 800d596:	600f      	str	r7, [r1, #0]
 800d598:	bf18      	it	ne
 800d59a:	2300      	movne	r3, #0
 800d59c:	eba6 0807 	sub.w	r8, r6, r7
 800d5a0:	608b      	str	r3, [r1, #8]
 800d5a2:	f1b8 0f00 	cmp.w	r8, #0
 800d5a6:	dd9c      	ble.n	800d4e2 <__sflush_r+0x1a>
 800d5a8:	6a21      	ldr	r1, [r4, #32]
 800d5aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5ac:	4643      	mov	r3, r8
 800d5ae:	463a      	mov	r2, r7
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	47b0      	blx	r6
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	dc06      	bgt.n	800d5c6 <__sflush_r+0xfe>
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5be:	81a3      	strh	r3, [r4, #12]
 800d5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c4:	e78e      	b.n	800d4e4 <__sflush_r+0x1c>
 800d5c6:	4407      	add	r7, r0
 800d5c8:	eba8 0800 	sub.w	r8, r8, r0
 800d5cc:	e7e9      	b.n	800d5a2 <__sflush_r+0xda>
 800d5ce:	bf00      	nop
 800d5d0:	20400001 	.word	0x20400001

0800d5d4 <_fflush_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	690b      	ldr	r3, [r1, #16]
 800d5d8:	4605      	mov	r5, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	b913      	cbnz	r3, 800d5e4 <_fflush_r+0x10>
 800d5de:	2500      	movs	r5, #0
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	b118      	cbz	r0, 800d5ee <_fflush_r+0x1a>
 800d5e6:	6983      	ldr	r3, [r0, #24]
 800d5e8:	b90b      	cbnz	r3, 800d5ee <_fflush_r+0x1a>
 800d5ea:	f000 f887 	bl	800d6fc <__sinit>
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <_fflush_r+0x6c>)
 800d5f0:	429c      	cmp	r4, r3
 800d5f2:	d11b      	bne.n	800d62c <_fflush_r+0x58>
 800d5f4:	686c      	ldr	r4, [r5, #4]
 800d5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d0ef      	beq.n	800d5de <_fflush_r+0xa>
 800d5fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d600:	07d0      	lsls	r0, r2, #31
 800d602:	d404      	bmi.n	800d60e <_fflush_r+0x3a>
 800d604:	0599      	lsls	r1, r3, #22
 800d606:	d402      	bmi.n	800d60e <_fflush_r+0x3a>
 800d608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d60a:	f000 f915 	bl	800d838 <__retarget_lock_acquire_recursive>
 800d60e:	4628      	mov	r0, r5
 800d610:	4621      	mov	r1, r4
 800d612:	f7ff ff59 	bl	800d4c8 <__sflush_r>
 800d616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d618:	07da      	lsls	r2, r3, #31
 800d61a:	4605      	mov	r5, r0
 800d61c:	d4e0      	bmi.n	800d5e0 <_fflush_r+0xc>
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	059b      	lsls	r3, r3, #22
 800d622:	d4dd      	bmi.n	800d5e0 <_fflush_r+0xc>
 800d624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d626:	f000 f908 	bl	800d83a <__retarget_lock_release_recursive>
 800d62a:	e7d9      	b.n	800d5e0 <_fflush_r+0xc>
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <_fflush_r+0x70>)
 800d62e:	429c      	cmp	r4, r3
 800d630:	d101      	bne.n	800d636 <_fflush_r+0x62>
 800d632:	68ac      	ldr	r4, [r5, #8]
 800d634:	e7df      	b.n	800d5f6 <_fflush_r+0x22>
 800d636:	4b04      	ldr	r3, [pc, #16]	; (800d648 <_fflush_r+0x74>)
 800d638:	429c      	cmp	r4, r3
 800d63a:	bf08      	it	eq
 800d63c:	68ec      	ldreq	r4, [r5, #12]
 800d63e:	e7da      	b.n	800d5f6 <_fflush_r+0x22>
 800d640:	0800e35c 	.word	0x0800e35c
 800d644:	0800e37c 	.word	0x0800e37c
 800d648:	0800e33c 	.word	0x0800e33c

0800d64c <std>:
 800d64c:	2300      	movs	r3, #0
 800d64e:	b510      	push	{r4, lr}
 800d650:	4604      	mov	r4, r0
 800d652:	e9c0 3300 	strd	r3, r3, [r0]
 800d656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d65a:	6083      	str	r3, [r0, #8]
 800d65c:	8181      	strh	r1, [r0, #12]
 800d65e:	6643      	str	r3, [r0, #100]	; 0x64
 800d660:	81c2      	strh	r2, [r0, #14]
 800d662:	6183      	str	r3, [r0, #24]
 800d664:	4619      	mov	r1, r3
 800d666:	2208      	movs	r2, #8
 800d668:	305c      	adds	r0, #92	; 0x5c
 800d66a:	f7fd fb59 	bl	800ad20 <memset>
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <std+0x38>)
 800d670:	6263      	str	r3, [r4, #36]	; 0x24
 800d672:	4b05      	ldr	r3, [pc, #20]	; (800d688 <std+0x3c>)
 800d674:	62a3      	str	r3, [r4, #40]	; 0x28
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <std+0x40>)
 800d678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <std+0x44>)
 800d67c:	6224      	str	r4, [r4, #32]
 800d67e:	6323      	str	r3, [r4, #48]	; 0x30
 800d680:	bd10      	pop	{r4, pc}
 800d682:	bf00      	nop
 800d684:	0800d9a1 	.word	0x0800d9a1
 800d688:	0800d9c3 	.word	0x0800d9c3
 800d68c:	0800d9fb 	.word	0x0800d9fb
 800d690:	0800da1f 	.word	0x0800da1f

0800d694 <_cleanup_r>:
 800d694:	4901      	ldr	r1, [pc, #4]	; (800d69c <_cleanup_r+0x8>)
 800d696:	f000 b8af 	b.w	800d7f8 <_fwalk_reent>
 800d69a:	bf00      	nop
 800d69c:	0800d5d5 	.word	0x0800d5d5

0800d6a0 <__sfmoreglue>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	2268      	movs	r2, #104	; 0x68
 800d6a4:	1e4d      	subs	r5, r1, #1
 800d6a6:	4355      	muls	r5, r2
 800d6a8:	460e      	mov	r6, r1
 800d6aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6ae:	f7ff fa65 	bl	800cb7c <_malloc_r>
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	b140      	cbz	r0, 800d6c8 <__sfmoreglue+0x28>
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	e9c0 1600 	strd	r1, r6, [r0]
 800d6bc:	300c      	adds	r0, #12
 800d6be:	60a0      	str	r0, [r4, #8]
 800d6c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6c4:	f7fd fb2c 	bl	800ad20 <memset>
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	bd70      	pop	{r4, r5, r6, pc}

0800d6cc <__sfp_lock_acquire>:
 800d6cc:	4801      	ldr	r0, [pc, #4]	; (800d6d4 <__sfp_lock_acquire+0x8>)
 800d6ce:	f000 b8b3 	b.w	800d838 <__retarget_lock_acquire_recursive>
 800d6d2:	bf00      	nop
 800d6d4:	20002091 	.word	0x20002091

0800d6d8 <__sfp_lock_release>:
 800d6d8:	4801      	ldr	r0, [pc, #4]	; (800d6e0 <__sfp_lock_release+0x8>)
 800d6da:	f000 b8ae 	b.w	800d83a <__retarget_lock_release_recursive>
 800d6de:	bf00      	nop
 800d6e0:	20002091 	.word	0x20002091

0800d6e4 <__sinit_lock_acquire>:
 800d6e4:	4801      	ldr	r0, [pc, #4]	; (800d6ec <__sinit_lock_acquire+0x8>)
 800d6e6:	f000 b8a7 	b.w	800d838 <__retarget_lock_acquire_recursive>
 800d6ea:	bf00      	nop
 800d6ec:	20002092 	.word	0x20002092

0800d6f0 <__sinit_lock_release>:
 800d6f0:	4801      	ldr	r0, [pc, #4]	; (800d6f8 <__sinit_lock_release+0x8>)
 800d6f2:	f000 b8a2 	b.w	800d83a <__retarget_lock_release_recursive>
 800d6f6:	bf00      	nop
 800d6f8:	20002092 	.word	0x20002092

0800d6fc <__sinit>:
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	4604      	mov	r4, r0
 800d700:	f7ff fff0 	bl	800d6e4 <__sinit_lock_acquire>
 800d704:	69a3      	ldr	r3, [r4, #24]
 800d706:	b11b      	cbz	r3, 800d710 <__sinit+0x14>
 800d708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d70c:	f7ff bff0 	b.w	800d6f0 <__sinit_lock_release>
 800d710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d714:	6523      	str	r3, [r4, #80]	; 0x50
 800d716:	4b13      	ldr	r3, [pc, #76]	; (800d764 <__sinit+0x68>)
 800d718:	4a13      	ldr	r2, [pc, #76]	; (800d768 <__sinit+0x6c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d71e:	42a3      	cmp	r3, r4
 800d720:	bf04      	itt	eq
 800d722:	2301      	moveq	r3, #1
 800d724:	61a3      	streq	r3, [r4, #24]
 800d726:	4620      	mov	r0, r4
 800d728:	f000 f820 	bl	800d76c <__sfp>
 800d72c:	6060      	str	r0, [r4, #4]
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 f81c 	bl	800d76c <__sfp>
 800d734:	60a0      	str	r0, [r4, #8]
 800d736:	4620      	mov	r0, r4
 800d738:	f000 f818 	bl	800d76c <__sfp>
 800d73c:	2200      	movs	r2, #0
 800d73e:	60e0      	str	r0, [r4, #12]
 800d740:	2104      	movs	r1, #4
 800d742:	6860      	ldr	r0, [r4, #4]
 800d744:	f7ff ff82 	bl	800d64c <std>
 800d748:	68a0      	ldr	r0, [r4, #8]
 800d74a:	2201      	movs	r2, #1
 800d74c:	2109      	movs	r1, #9
 800d74e:	f7ff ff7d 	bl	800d64c <std>
 800d752:	68e0      	ldr	r0, [r4, #12]
 800d754:	2202      	movs	r2, #2
 800d756:	2112      	movs	r1, #18
 800d758:	f7ff ff78 	bl	800d64c <std>
 800d75c:	2301      	movs	r3, #1
 800d75e:	61a3      	str	r3, [r4, #24]
 800d760:	e7d2      	b.n	800d708 <__sinit+0xc>
 800d762:	bf00      	nop
 800d764:	0800dfc4 	.word	0x0800dfc4
 800d768:	0800d695 	.word	0x0800d695

0800d76c <__sfp>:
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	4607      	mov	r7, r0
 800d770:	f7ff ffac 	bl	800d6cc <__sfp_lock_acquire>
 800d774:	4b1e      	ldr	r3, [pc, #120]	; (800d7f0 <__sfp+0x84>)
 800d776:	681e      	ldr	r6, [r3, #0]
 800d778:	69b3      	ldr	r3, [r6, #24]
 800d77a:	b913      	cbnz	r3, 800d782 <__sfp+0x16>
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7ff ffbd 	bl	800d6fc <__sinit>
 800d782:	3648      	adds	r6, #72	; 0x48
 800d784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d788:	3b01      	subs	r3, #1
 800d78a:	d503      	bpl.n	800d794 <__sfp+0x28>
 800d78c:	6833      	ldr	r3, [r6, #0]
 800d78e:	b30b      	cbz	r3, 800d7d4 <__sfp+0x68>
 800d790:	6836      	ldr	r6, [r6, #0]
 800d792:	e7f7      	b.n	800d784 <__sfp+0x18>
 800d794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d798:	b9d5      	cbnz	r5, 800d7d0 <__sfp+0x64>
 800d79a:	4b16      	ldr	r3, [pc, #88]	; (800d7f4 <__sfp+0x88>)
 800d79c:	60e3      	str	r3, [r4, #12]
 800d79e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7a2:	6665      	str	r5, [r4, #100]	; 0x64
 800d7a4:	f000 f847 	bl	800d836 <__retarget_lock_init_recursive>
 800d7a8:	f7ff ff96 	bl	800d6d8 <__sfp_lock_release>
 800d7ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d7b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7b4:	6025      	str	r5, [r4, #0]
 800d7b6:	61a5      	str	r5, [r4, #24]
 800d7b8:	2208      	movs	r2, #8
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7c0:	f7fd faae 	bl	800ad20 <memset>
 800d7c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d7c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d0:	3468      	adds	r4, #104	; 0x68
 800d7d2:	e7d9      	b.n	800d788 <__sfp+0x1c>
 800d7d4:	2104      	movs	r1, #4
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	f7ff ff62 	bl	800d6a0 <__sfmoreglue>
 800d7dc:	4604      	mov	r4, r0
 800d7de:	6030      	str	r0, [r6, #0]
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d1d5      	bne.n	800d790 <__sfp+0x24>
 800d7e4:	f7ff ff78 	bl	800d6d8 <__sfp_lock_release>
 800d7e8:	230c      	movs	r3, #12
 800d7ea:	603b      	str	r3, [r7, #0]
 800d7ec:	e7ee      	b.n	800d7cc <__sfp+0x60>
 800d7ee:	bf00      	nop
 800d7f0:	0800dfc4 	.word	0x0800dfc4
 800d7f4:	ffff0001 	.word	0xffff0001

0800d7f8 <_fwalk_reent>:
 800d7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	4688      	mov	r8, r1
 800d800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d804:	2700      	movs	r7, #0
 800d806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d80a:	f1b9 0901 	subs.w	r9, r9, #1
 800d80e:	d505      	bpl.n	800d81c <_fwalk_reent+0x24>
 800d810:	6824      	ldr	r4, [r4, #0]
 800d812:	2c00      	cmp	r4, #0
 800d814:	d1f7      	bne.n	800d806 <_fwalk_reent+0xe>
 800d816:	4638      	mov	r0, r7
 800d818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81c:	89ab      	ldrh	r3, [r5, #12]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d907      	bls.n	800d832 <_fwalk_reent+0x3a>
 800d822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d826:	3301      	adds	r3, #1
 800d828:	d003      	beq.n	800d832 <_fwalk_reent+0x3a>
 800d82a:	4629      	mov	r1, r5
 800d82c:	4630      	mov	r0, r6
 800d82e:	47c0      	blx	r8
 800d830:	4307      	orrs	r7, r0
 800d832:	3568      	adds	r5, #104	; 0x68
 800d834:	e7e9      	b.n	800d80a <_fwalk_reent+0x12>

0800d836 <__retarget_lock_init_recursive>:
 800d836:	4770      	bx	lr

0800d838 <__retarget_lock_acquire_recursive>:
 800d838:	4770      	bx	lr

0800d83a <__retarget_lock_release_recursive>:
 800d83a:	4770      	bx	lr

0800d83c <__swhatbuf_r>:
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	460e      	mov	r6, r1
 800d840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d844:	2900      	cmp	r1, #0
 800d846:	b096      	sub	sp, #88	; 0x58
 800d848:	4614      	mov	r4, r2
 800d84a:	461d      	mov	r5, r3
 800d84c:	da08      	bge.n	800d860 <__swhatbuf_r+0x24>
 800d84e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d852:	2200      	movs	r2, #0
 800d854:	602a      	str	r2, [r5, #0]
 800d856:	061a      	lsls	r2, r3, #24
 800d858:	d410      	bmi.n	800d87c <__swhatbuf_r+0x40>
 800d85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d85e:	e00e      	b.n	800d87e <__swhatbuf_r+0x42>
 800d860:	466a      	mov	r2, sp
 800d862:	f000 f903 	bl	800da6c <_fstat_r>
 800d866:	2800      	cmp	r0, #0
 800d868:	dbf1      	blt.n	800d84e <__swhatbuf_r+0x12>
 800d86a:	9a01      	ldr	r2, [sp, #4]
 800d86c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d874:	425a      	negs	r2, r3
 800d876:	415a      	adcs	r2, r3
 800d878:	602a      	str	r2, [r5, #0]
 800d87a:	e7ee      	b.n	800d85a <__swhatbuf_r+0x1e>
 800d87c:	2340      	movs	r3, #64	; 0x40
 800d87e:	2000      	movs	r0, #0
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	b016      	add	sp, #88	; 0x58
 800d884:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d888 <__smakebuf_r>:
 800d888:	898b      	ldrh	r3, [r1, #12]
 800d88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d88c:	079d      	lsls	r5, r3, #30
 800d88e:	4606      	mov	r6, r0
 800d890:	460c      	mov	r4, r1
 800d892:	d507      	bpl.n	800d8a4 <__smakebuf_r+0x1c>
 800d894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d898:	6023      	str	r3, [r4, #0]
 800d89a:	6123      	str	r3, [r4, #16]
 800d89c:	2301      	movs	r3, #1
 800d89e:	6163      	str	r3, [r4, #20]
 800d8a0:	b002      	add	sp, #8
 800d8a2:	bd70      	pop	{r4, r5, r6, pc}
 800d8a4:	ab01      	add	r3, sp, #4
 800d8a6:	466a      	mov	r2, sp
 800d8a8:	f7ff ffc8 	bl	800d83c <__swhatbuf_r>
 800d8ac:	9900      	ldr	r1, [sp, #0]
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f7ff f963 	bl	800cb7c <_malloc_r>
 800d8b6:	b948      	cbnz	r0, 800d8cc <__smakebuf_r+0x44>
 800d8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8bc:	059a      	lsls	r2, r3, #22
 800d8be:	d4ef      	bmi.n	800d8a0 <__smakebuf_r+0x18>
 800d8c0:	f023 0303 	bic.w	r3, r3, #3
 800d8c4:	f043 0302 	orr.w	r3, r3, #2
 800d8c8:	81a3      	strh	r3, [r4, #12]
 800d8ca:	e7e3      	b.n	800d894 <__smakebuf_r+0xc>
 800d8cc:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <__smakebuf_r+0x7c>)
 800d8ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	6020      	str	r0, [r4, #0]
 800d8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d8:	81a3      	strh	r3, [r4, #12]
 800d8da:	9b00      	ldr	r3, [sp, #0]
 800d8dc:	6163      	str	r3, [r4, #20]
 800d8de:	9b01      	ldr	r3, [sp, #4]
 800d8e0:	6120      	str	r0, [r4, #16]
 800d8e2:	b15b      	cbz	r3, 800d8fc <__smakebuf_r+0x74>
 800d8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f000 f8d1 	bl	800da90 <_isatty_r>
 800d8ee:	b128      	cbz	r0, 800d8fc <__smakebuf_r+0x74>
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	f023 0303 	bic.w	r3, r3, #3
 800d8f6:	f043 0301 	orr.w	r3, r3, #1
 800d8fa:	81a3      	strh	r3, [r4, #12]
 800d8fc:	89a0      	ldrh	r0, [r4, #12]
 800d8fe:	4305      	orrs	r5, r0
 800d900:	81a5      	strh	r5, [r4, #12]
 800d902:	e7cd      	b.n	800d8a0 <__smakebuf_r+0x18>
 800d904:	0800d695 	.word	0x0800d695

0800d908 <_malloc_usable_size_r>:
 800d908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d90c:	1f18      	subs	r0, r3, #4
 800d90e:	2b00      	cmp	r3, #0
 800d910:	bfbc      	itt	lt
 800d912:	580b      	ldrlt	r3, [r1, r0]
 800d914:	18c0      	addlt	r0, r0, r3
 800d916:	4770      	bx	lr

0800d918 <_raise_r>:
 800d918:	291f      	cmp	r1, #31
 800d91a:	b538      	push	{r3, r4, r5, lr}
 800d91c:	4604      	mov	r4, r0
 800d91e:	460d      	mov	r5, r1
 800d920:	d904      	bls.n	800d92c <_raise_r+0x14>
 800d922:	2316      	movs	r3, #22
 800d924:	6003      	str	r3, [r0, #0]
 800d926:	f04f 30ff 	mov.w	r0, #4294967295
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d92e:	b112      	cbz	r2, 800d936 <_raise_r+0x1e>
 800d930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d934:	b94b      	cbnz	r3, 800d94a <_raise_r+0x32>
 800d936:	4620      	mov	r0, r4
 800d938:	f000 f830 	bl	800d99c <_getpid_r>
 800d93c:	462a      	mov	r2, r5
 800d93e:	4601      	mov	r1, r0
 800d940:	4620      	mov	r0, r4
 800d942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d946:	f000 b817 	b.w	800d978 <_kill_r>
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d00a      	beq.n	800d964 <_raise_r+0x4c>
 800d94e:	1c59      	adds	r1, r3, #1
 800d950:	d103      	bne.n	800d95a <_raise_r+0x42>
 800d952:	2316      	movs	r3, #22
 800d954:	6003      	str	r3, [r0, #0]
 800d956:	2001      	movs	r0, #1
 800d958:	e7e7      	b.n	800d92a <_raise_r+0x12>
 800d95a:	2400      	movs	r4, #0
 800d95c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d960:	4628      	mov	r0, r5
 800d962:	4798      	blx	r3
 800d964:	2000      	movs	r0, #0
 800d966:	e7e0      	b.n	800d92a <_raise_r+0x12>

0800d968 <raise>:
 800d968:	4b02      	ldr	r3, [pc, #8]	; (800d974 <raise+0xc>)
 800d96a:	4601      	mov	r1, r0
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	f7ff bfd3 	b.w	800d918 <_raise_r>
 800d972:	bf00      	nop
 800d974:	20000178 	.word	0x20000178

0800d978 <_kill_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d07      	ldr	r5, [pc, #28]	; (800d998 <_kill_r+0x20>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	4611      	mov	r1, r2
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	f7f4 fb03 	bl	8001f90 <_kill>
 800d98a:	1c43      	adds	r3, r0, #1
 800d98c:	d102      	bne.n	800d994 <_kill_r+0x1c>
 800d98e:	682b      	ldr	r3, [r5, #0]
 800d990:	b103      	cbz	r3, 800d994 <_kill_r+0x1c>
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	bd38      	pop	{r3, r4, r5, pc}
 800d996:	bf00      	nop
 800d998:	2000208c 	.word	0x2000208c

0800d99c <_getpid_r>:
 800d99c:	f7f4 baf0 	b.w	8001f80 <_getpid>

0800d9a0 <__sread>:
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a8:	f000 f894 	bl	800dad4 <_read_r>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	bfab      	itete	ge
 800d9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d9b4:	181b      	addge	r3, r3, r0
 800d9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9ba:	bfac      	ite	ge
 800d9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9be:	81a3      	strhlt	r3, [r4, #12]
 800d9c0:	bd10      	pop	{r4, pc}

0800d9c2 <__swrite>:
 800d9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c6:	461f      	mov	r7, r3
 800d9c8:	898b      	ldrh	r3, [r1, #12]
 800d9ca:	05db      	lsls	r3, r3, #23
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	4616      	mov	r6, r2
 800d9d2:	d505      	bpl.n	800d9e0 <__swrite+0x1e>
 800d9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d8:	2302      	movs	r3, #2
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f000 f868 	bl	800dab0 <_lseek_r>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9ea:	81a3      	strh	r3, [r4, #12]
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	463b      	mov	r3, r7
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f6:	f000 b817 	b.w	800da28 <_write_r>

0800d9fa <__sseek>:
 800d9fa:	b510      	push	{r4, lr}
 800d9fc:	460c      	mov	r4, r1
 800d9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da02:	f000 f855 	bl	800dab0 <_lseek_r>
 800da06:	1c43      	adds	r3, r0, #1
 800da08:	89a3      	ldrh	r3, [r4, #12]
 800da0a:	bf15      	itete	ne
 800da0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800da0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da16:	81a3      	strheq	r3, [r4, #12]
 800da18:	bf18      	it	ne
 800da1a:	81a3      	strhne	r3, [r4, #12]
 800da1c:	bd10      	pop	{r4, pc}

0800da1e <__sclose>:
 800da1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da22:	f000 b813 	b.w	800da4c <_close_r>
	...

0800da28 <_write_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d07      	ldr	r5, [pc, #28]	; (800da48 <_write_r+0x20>)
 800da2c:	4604      	mov	r4, r0
 800da2e:	4608      	mov	r0, r1
 800da30:	4611      	mov	r1, r2
 800da32:	2200      	movs	r2, #0
 800da34:	602a      	str	r2, [r5, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	f7f4 fae1 	bl	8001ffe <_write>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d102      	bne.n	800da46 <_write_r+0x1e>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	b103      	cbz	r3, 800da46 <_write_r+0x1e>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	2000208c 	.word	0x2000208c

0800da4c <_close_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4d06      	ldr	r5, [pc, #24]	; (800da68 <_close_r+0x1c>)
 800da50:	2300      	movs	r3, #0
 800da52:	4604      	mov	r4, r0
 800da54:	4608      	mov	r0, r1
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	f7f4 faed 	bl	8002036 <_close>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d102      	bne.n	800da66 <_close_r+0x1a>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	b103      	cbz	r3, 800da66 <_close_r+0x1a>
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	2000208c 	.word	0x2000208c

0800da6c <_fstat_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4d07      	ldr	r5, [pc, #28]	; (800da8c <_fstat_r+0x20>)
 800da70:	2300      	movs	r3, #0
 800da72:	4604      	mov	r4, r0
 800da74:	4608      	mov	r0, r1
 800da76:	4611      	mov	r1, r2
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f7f4 fae8 	bl	800204e <_fstat>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	d102      	bne.n	800da88 <_fstat_r+0x1c>
 800da82:	682b      	ldr	r3, [r5, #0]
 800da84:	b103      	cbz	r3, 800da88 <_fstat_r+0x1c>
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	bf00      	nop
 800da8c:	2000208c 	.word	0x2000208c

0800da90 <_isatty_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d06      	ldr	r5, [pc, #24]	; (800daac <_isatty_r+0x1c>)
 800da94:	2300      	movs	r3, #0
 800da96:	4604      	mov	r4, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	602b      	str	r3, [r5, #0]
 800da9c:	f7f4 fae7 	bl	800206e <_isatty>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d102      	bne.n	800daaa <_isatty_r+0x1a>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	b103      	cbz	r3, 800daaa <_isatty_r+0x1a>
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	2000208c 	.word	0x2000208c

0800dab0 <_lseek_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d07      	ldr	r5, [pc, #28]	; (800dad0 <_lseek_r+0x20>)
 800dab4:	4604      	mov	r4, r0
 800dab6:	4608      	mov	r0, r1
 800dab8:	4611      	mov	r1, r2
 800daba:	2200      	movs	r2, #0
 800dabc:	602a      	str	r2, [r5, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	f7f4 fae0 	bl	8002084 <_lseek>
 800dac4:	1c43      	adds	r3, r0, #1
 800dac6:	d102      	bne.n	800dace <_lseek_r+0x1e>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	b103      	cbz	r3, 800dace <_lseek_r+0x1e>
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	bd38      	pop	{r3, r4, r5, pc}
 800dad0:	2000208c 	.word	0x2000208c

0800dad4 <_read_r>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d07      	ldr	r5, [pc, #28]	; (800daf4 <_read_r+0x20>)
 800dad8:	4604      	mov	r4, r0
 800dada:	4608      	mov	r0, r1
 800dadc:	4611      	mov	r1, r2
 800dade:	2200      	movs	r2, #0
 800dae0:	602a      	str	r2, [r5, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	f7f4 fa6e 	bl	8001fc4 <_read>
 800dae8:	1c43      	adds	r3, r0, #1
 800daea:	d102      	bne.n	800daf2 <_read_r+0x1e>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	b103      	cbz	r3, 800daf2 <_read_r+0x1e>
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	2000208c 	.word	0x2000208c

0800daf8 <log>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	ed2d 8b02 	vpush	{d8}
 800dafe:	ec55 4b10 	vmov	r4, r5, d0
 800db02:	f000 f839 	bl	800db78 <__ieee754_log>
 800db06:	4622      	mov	r2, r4
 800db08:	462b      	mov	r3, r5
 800db0a:	4620      	mov	r0, r4
 800db0c:	4629      	mov	r1, r5
 800db0e:	eeb0 8a40 	vmov.f32	s16, s0
 800db12:	eef0 8a60 	vmov.f32	s17, s1
 800db16:	f7f3 f811 	bl	8000b3c <__aeabi_dcmpun>
 800db1a:	b998      	cbnz	r0, 800db44 <log+0x4c>
 800db1c:	2200      	movs	r2, #0
 800db1e:	2300      	movs	r3, #0
 800db20:	4620      	mov	r0, r4
 800db22:	4629      	mov	r1, r5
 800db24:	f7f3 f800 	bl	8000b28 <__aeabi_dcmpgt>
 800db28:	b960      	cbnz	r0, 800db44 <log+0x4c>
 800db2a:	2200      	movs	r2, #0
 800db2c:	2300      	movs	r3, #0
 800db2e:	4620      	mov	r0, r4
 800db30:	4629      	mov	r1, r5
 800db32:	f7f2 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800db36:	b160      	cbz	r0, 800db52 <log+0x5a>
 800db38:	f7fd f8c8 	bl	800accc <__errno>
 800db3c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800db68 <log+0x70>
 800db40:	2322      	movs	r3, #34	; 0x22
 800db42:	6003      	str	r3, [r0, #0]
 800db44:	eeb0 0a48 	vmov.f32	s0, s16
 800db48:	eef0 0a68 	vmov.f32	s1, s17
 800db4c:	ecbd 8b02 	vpop	{d8}
 800db50:	bd38      	pop	{r3, r4, r5, pc}
 800db52:	f7fd f8bb 	bl	800accc <__errno>
 800db56:	ecbd 8b02 	vpop	{d8}
 800db5a:	2321      	movs	r3, #33	; 0x21
 800db5c:	6003      	str	r3, [r0, #0]
 800db5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db62:	4803      	ldr	r0, [pc, #12]	; (800db70 <log+0x78>)
 800db64:	f000 b9c4 	b.w	800def0 <nan>
 800db68:	00000000 	.word	0x00000000
 800db6c:	fff00000 	.word	0xfff00000
 800db70:	0800e230 	.word	0x0800e230
 800db74:	00000000 	.word	0x00000000

0800db78 <__ieee754_log>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	ec51 0b10 	vmov	r0, r1, d0
 800db80:	ed2d 8b04 	vpush	{d8-d9}
 800db84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800db88:	b083      	sub	sp, #12
 800db8a:	460d      	mov	r5, r1
 800db8c:	da29      	bge.n	800dbe2 <__ieee754_log+0x6a>
 800db8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db92:	4303      	orrs	r3, r0
 800db94:	ee10 2a10 	vmov	r2, s0
 800db98:	d10c      	bne.n	800dbb4 <__ieee754_log+0x3c>
 800db9a:	49cf      	ldr	r1, [pc, #828]	; (800ded8 <__ieee754_log+0x360>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	2300      	movs	r3, #0
 800dba0:	2000      	movs	r0, #0
 800dba2:	f7f2 fe5b 	bl	800085c <__aeabi_ddiv>
 800dba6:	ec41 0b10 	vmov	d0, r0, r1
 800dbaa:	b003      	add	sp, #12
 800dbac:	ecbd 8b04 	vpop	{d8-d9}
 800dbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb4:	2900      	cmp	r1, #0
 800dbb6:	da05      	bge.n	800dbc4 <__ieee754_log+0x4c>
 800dbb8:	460b      	mov	r3, r1
 800dbba:	f7f2 fb6d 	bl	8000298 <__aeabi_dsub>
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	e7ee      	b.n	800dba2 <__ieee754_log+0x2a>
 800dbc4:	4bc5      	ldr	r3, [pc, #788]	; (800dedc <__ieee754_log+0x364>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f7f2 fd1e 	bl	8000608 <__aeabi_dmul>
 800dbcc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800dbd0:	460d      	mov	r5, r1
 800dbd2:	4ac3      	ldr	r2, [pc, #780]	; (800dee0 <__ieee754_log+0x368>)
 800dbd4:	4295      	cmp	r5, r2
 800dbd6:	dd06      	ble.n	800dbe6 <__ieee754_log+0x6e>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	460b      	mov	r3, r1
 800dbdc:	f7f2 fb5e 	bl	800029c <__adddf3>
 800dbe0:	e7e1      	b.n	800dba6 <__ieee754_log+0x2e>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e7f5      	b.n	800dbd2 <__ieee754_log+0x5a>
 800dbe6:	152c      	asrs	r4, r5, #20
 800dbe8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dbec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dbf0:	441c      	add	r4, r3
 800dbf2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800dbf6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800dbfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbfe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800dc02:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800dc06:	ea42 0105 	orr.w	r1, r2, r5
 800dc0a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800dc0e:	2200      	movs	r2, #0
 800dc10:	4bb4      	ldr	r3, [pc, #720]	; (800dee4 <__ieee754_log+0x36c>)
 800dc12:	f7f2 fb41 	bl	8000298 <__aeabi_dsub>
 800dc16:	1cab      	adds	r3, r5, #2
 800dc18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	4682      	mov	sl, r0
 800dc20:	468b      	mov	fp, r1
 800dc22:	f04f 0200 	mov.w	r2, #0
 800dc26:	dc53      	bgt.n	800dcd0 <__ieee754_log+0x158>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f7f2 ff55 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc2e:	b1d0      	cbz	r0, 800dc66 <__ieee754_log+0xee>
 800dc30:	2c00      	cmp	r4, #0
 800dc32:	f000 8122 	beq.w	800de7a <__ieee754_log+0x302>
 800dc36:	4620      	mov	r0, r4
 800dc38:	f7f2 fc7c 	bl	8000534 <__aeabi_i2d>
 800dc3c:	a390      	add	r3, pc, #576	; (adr r3, 800de80 <__ieee754_log+0x308>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	4606      	mov	r6, r0
 800dc44:	460f      	mov	r7, r1
 800dc46:	f7f2 fcdf 	bl	8000608 <__aeabi_dmul>
 800dc4a:	a38f      	add	r3, pc, #572	; (adr r3, 800de88 <__ieee754_log+0x310>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	4604      	mov	r4, r0
 800dc52:	460d      	mov	r5, r1
 800dc54:	4630      	mov	r0, r6
 800dc56:	4639      	mov	r1, r7
 800dc58:	f7f2 fcd6 	bl	8000608 <__aeabi_dmul>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4620      	mov	r0, r4
 800dc62:	4629      	mov	r1, r5
 800dc64:	e7ba      	b.n	800dbdc <__ieee754_log+0x64>
 800dc66:	a38a      	add	r3, pc, #552	; (adr r3, 800de90 <__ieee754_log+0x318>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	4650      	mov	r0, sl
 800dc6e:	4659      	mov	r1, fp
 800dc70:	f7f2 fcca 	bl	8000608 <__aeabi_dmul>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	2000      	movs	r0, #0
 800dc7a:	499b      	ldr	r1, [pc, #620]	; (800dee8 <__ieee754_log+0x370>)
 800dc7c:	f7f2 fb0c 	bl	8000298 <__aeabi_dsub>
 800dc80:	4652      	mov	r2, sl
 800dc82:	4606      	mov	r6, r0
 800dc84:	460f      	mov	r7, r1
 800dc86:	465b      	mov	r3, fp
 800dc88:	4650      	mov	r0, sl
 800dc8a:	4659      	mov	r1, fp
 800dc8c:	f7f2 fcbc 	bl	8000608 <__aeabi_dmul>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	4630      	mov	r0, r6
 800dc96:	4639      	mov	r1, r7
 800dc98:	f7f2 fcb6 	bl	8000608 <__aeabi_dmul>
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	460f      	mov	r7, r1
 800dca0:	b914      	cbnz	r4, 800dca8 <__ieee754_log+0x130>
 800dca2:	4632      	mov	r2, r6
 800dca4:	463b      	mov	r3, r7
 800dca6:	e0a2      	b.n	800ddee <__ieee754_log+0x276>
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f7f2 fc43 	bl	8000534 <__aeabi_i2d>
 800dcae:	a374      	add	r3, pc, #464	; (adr r3, 800de80 <__ieee754_log+0x308>)
 800dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	4689      	mov	r9, r1
 800dcb8:	f7f2 fca6 	bl	8000608 <__aeabi_dmul>
 800dcbc:	a372      	add	r3, pc, #456	; (adr r3, 800de88 <__ieee754_log+0x310>)
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	460d      	mov	r5, r1
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	4649      	mov	r1, r9
 800dcca:	f7f2 fc9d 	bl	8000608 <__aeabi_dmul>
 800dcce:	e0a7      	b.n	800de20 <__ieee754_log+0x2a8>
 800dcd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcd4:	f7f2 fae2 	bl	800029c <__adddf3>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4650      	mov	r0, sl
 800dcde:	4659      	mov	r1, fp
 800dce0:	f7f2 fdbc 	bl	800085c <__aeabi_ddiv>
 800dce4:	ec41 0b18 	vmov	d8, r0, r1
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7f2 fc23 	bl	8000534 <__aeabi_i2d>
 800dcee:	ec53 2b18 	vmov	r2, r3, d8
 800dcf2:	ec41 0b19 	vmov	d9, r0, r1
 800dcf6:	ec51 0b18 	vmov	r0, r1, d8
 800dcfa:	f7f2 fc85 	bl	8000608 <__aeabi_dmul>
 800dcfe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800dd02:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800dd06:	9301      	str	r3, [sp, #4]
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4680      	mov	r8, r0
 800dd0e:	4689      	mov	r9, r1
 800dd10:	f7f2 fc7a 	bl	8000608 <__aeabi_dmul>
 800dd14:	a360      	add	r3, pc, #384	; (adr r3, 800de98 <__ieee754_log+0x320>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	460f      	mov	r7, r1
 800dd1e:	f7f2 fc73 	bl	8000608 <__aeabi_dmul>
 800dd22:	a35f      	add	r3, pc, #380	; (adr r3, 800dea0 <__ieee754_log+0x328>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	f7f2 fab8 	bl	800029c <__adddf3>
 800dd2c:	4632      	mov	r2, r6
 800dd2e:	463b      	mov	r3, r7
 800dd30:	f7f2 fc6a 	bl	8000608 <__aeabi_dmul>
 800dd34:	a35c      	add	r3, pc, #368	; (adr r3, 800dea8 <__ieee754_log+0x330>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	f7f2 faaf 	bl	800029c <__adddf3>
 800dd3e:	4632      	mov	r2, r6
 800dd40:	463b      	mov	r3, r7
 800dd42:	f7f2 fc61 	bl	8000608 <__aeabi_dmul>
 800dd46:	a35a      	add	r3, pc, #360	; (adr r3, 800deb0 <__ieee754_log+0x338>)
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	f7f2 faa6 	bl	800029c <__adddf3>
 800dd50:	4642      	mov	r2, r8
 800dd52:	464b      	mov	r3, r9
 800dd54:	f7f2 fc58 	bl	8000608 <__aeabi_dmul>
 800dd58:	a357      	add	r3, pc, #348	; (adr r3, 800deb8 <__ieee754_log+0x340>)
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	4680      	mov	r8, r0
 800dd60:	4689      	mov	r9, r1
 800dd62:	4630      	mov	r0, r6
 800dd64:	4639      	mov	r1, r7
 800dd66:	f7f2 fc4f 	bl	8000608 <__aeabi_dmul>
 800dd6a:	a355      	add	r3, pc, #340	; (adr r3, 800dec0 <__ieee754_log+0x348>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	f7f2 fa94 	bl	800029c <__adddf3>
 800dd74:	4632      	mov	r2, r6
 800dd76:	463b      	mov	r3, r7
 800dd78:	f7f2 fc46 	bl	8000608 <__aeabi_dmul>
 800dd7c:	a352      	add	r3, pc, #328	; (adr r3, 800dec8 <__ieee754_log+0x350>)
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	f7f2 fa8b 	bl	800029c <__adddf3>
 800dd86:	4632      	mov	r2, r6
 800dd88:	463b      	mov	r3, r7
 800dd8a:	f7f2 fc3d 	bl	8000608 <__aeabi_dmul>
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4602      	mov	r2, r0
 800dd92:	4649      	mov	r1, r9
 800dd94:	4640      	mov	r0, r8
 800dd96:	f7f2 fa81 	bl	800029c <__adddf3>
 800dd9a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800dd9e:	9b01      	ldr	r3, [sp, #4]
 800dda0:	3551      	adds	r5, #81	; 0x51
 800dda2:	431d      	orrs	r5, r3
 800dda4:	2d00      	cmp	r5, #0
 800dda6:	4680      	mov	r8, r0
 800dda8:	4689      	mov	r9, r1
 800ddaa:	dd48      	ble.n	800de3e <__ieee754_log+0x2c6>
 800ddac:	4b4e      	ldr	r3, [pc, #312]	; (800dee8 <__ieee754_log+0x370>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	4650      	mov	r0, sl
 800ddb2:	4659      	mov	r1, fp
 800ddb4:	f7f2 fc28 	bl	8000608 <__aeabi_dmul>
 800ddb8:	4652      	mov	r2, sl
 800ddba:	465b      	mov	r3, fp
 800ddbc:	f7f2 fc24 	bl	8000608 <__aeabi_dmul>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	4640      	mov	r0, r8
 800ddca:	4649      	mov	r1, r9
 800ddcc:	f7f2 fa66 	bl	800029c <__adddf3>
 800ddd0:	ec53 2b18 	vmov	r2, r3, d8
 800ddd4:	f7f2 fc18 	bl	8000608 <__aeabi_dmul>
 800ddd8:	4680      	mov	r8, r0
 800ddda:	4689      	mov	r9, r1
 800dddc:	b964      	cbnz	r4, 800ddf8 <__ieee754_log+0x280>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4630      	mov	r0, r6
 800dde4:	4639      	mov	r1, r7
 800dde6:	f7f2 fa57 	bl	8000298 <__aeabi_dsub>
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4650      	mov	r0, sl
 800ddf0:	4659      	mov	r1, fp
 800ddf2:	f7f2 fa51 	bl	8000298 <__aeabi_dsub>
 800ddf6:	e6d6      	b.n	800dba6 <__ieee754_log+0x2e>
 800ddf8:	a321      	add	r3, pc, #132	; (adr r3, 800de80 <__ieee754_log+0x308>)
 800ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfe:	ec51 0b19 	vmov	r0, r1, d9
 800de02:	f7f2 fc01 	bl	8000608 <__aeabi_dmul>
 800de06:	a320      	add	r3, pc, #128	; (adr r3, 800de88 <__ieee754_log+0x310>)
 800de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0c:	4604      	mov	r4, r0
 800de0e:	460d      	mov	r5, r1
 800de10:	ec51 0b19 	vmov	r0, r1, d9
 800de14:	f7f2 fbf8 	bl	8000608 <__aeabi_dmul>
 800de18:	4642      	mov	r2, r8
 800de1a:	464b      	mov	r3, r9
 800de1c:	f7f2 fa3e 	bl	800029c <__adddf3>
 800de20:	4602      	mov	r2, r0
 800de22:	460b      	mov	r3, r1
 800de24:	4630      	mov	r0, r6
 800de26:	4639      	mov	r1, r7
 800de28:	f7f2 fa36 	bl	8000298 <__aeabi_dsub>
 800de2c:	4652      	mov	r2, sl
 800de2e:	465b      	mov	r3, fp
 800de30:	f7f2 fa32 	bl	8000298 <__aeabi_dsub>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4620      	mov	r0, r4
 800de3a:	4629      	mov	r1, r5
 800de3c:	e7d9      	b.n	800ddf2 <__ieee754_log+0x27a>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	4650      	mov	r0, sl
 800de44:	4659      	mov	r1, fp
 800de46:	f7f2 fa27 	bl	8000298 <__aeabi_dsub>
 800de4a:	ec53 2b18 	vmov	r2, r3, d8
 800de4e:	f7f2 fbdb 	bl	8000608 <__aeabi_dmul>
 800de52:	4606      	mov	r6, r0
 800de54:	460f      	mov	r7, r1
 800de56:	2c00      	cmp	r4, #0
 800de58:	f43f af23 	beq.w	800dca2 <__ieee754_log+0x12a>
 800de5c:	a308      	add	r3, pc, #32	; (adr r3, 800de80 <__ieee754_log+0x308>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	ec51 0b19 	vmov	r0, r1, d9
 800de66:	f7f2 fbcf 	bl	8000608 <__aeabi_dmul>
 800de6a:	a307      	add	r3, pc, #28	; (adr r3, 800de88 <__ieee754_log+0x310>)
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	4604      	mov	r4, r0
 800de72:	460d      	mov	r5, r1
 800de74:	ec51 0b19 	vmov	r0, r1, d9
 800de78:	e727      	b.n	800dcca <__ieee754_log+0x152>
 800de7a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ded0 <__ieee754_log+0x358>
 800de7e:	e694      	b.n	800dbaa <__ieee754_log+0x32>
 800de80:	fee00000 	.word	0xfee00000
 800de84:	3fe62e42 	.word	0x3fe62e42
 800de88:	35793c76 	.word	0x35793c76
 800de8c:	3dea39ef 	.word	0x3dea39ef
 800de90:	55555555 	.word	0x55555555
 800de94:	3fd55555 	.word	0x3fd55555
 800de98:	df3e5244 	.word	0xdf3e5244
 800de9c:	3fc2f112 	.word	0x3fc2f112
 800dea0:	96cb03de 	.word	0x96cb03de
 800dea4:	3fc74664 	.word	0x3fc74664
 800dea8:	94229359 	.word	0x94229359
 800deac:	3fd24924 	.word	0x3fd24924
 800deb0:	55555593 	.word	0x55555593
 800deb4:	3fe55555 	.word	0x3fe55555
 800deb8:	d078c69f 	.word	0xd078c69f
 800debc:	3fc39a09 	.word	0x3fc39a09
 800dec0:	1d8e78af 	.word	0x1d8e78af
 800dec4:	3fcc71c5 	.word	0x3fcc71c5
 800dec8:	9997fa04 	.word	0x9997fa04
 800decc:	3fd99999 	.word	0x3fd99999
	...
 800ded8:	c3500000 	.word	0xc3500000
 800dedc:	43500000 	.word	0x43500000
 800dee0:	7fefffff 	.word	0x7fefffff
 800dee4:	3ff00000 	.word	0x3ff00000
 800dee8:	3fe00000 	.word	0x3fe00000
 800deec:	00000000 	.word	0x00000000

0800def0 <nan>:
 800def0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800def8 <nan+0x8>
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	00000000 	.word	0x00000000
 800defc:	7ff80000 	.word	0x7ff80000

0800df00 <_init>:
 800df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df02:	bf00      	nop
 800df04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df06:	bc08      	pop	{r3}
 800df08:	469e      	mov	lr, r3
 800df0a:	4770      	bx	lr

0800df0c <_fini>:
 800df0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0e:	bf00      	nop
 800df10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df12:	bc08      	pop	{r3}
 800df14:	469e      	mov	lr, r3
 800df16:	4770      	bx	lr
